
CBC_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b82c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800bac4  0800bac4  0001bac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bb04  0800bb04  0001bb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bb0c  0800bb0c  0001bb0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bb10  0800bb10  0001bb10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  24000000  0800bb14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000694  24000018  0800bb2c  00020018  2**3
                  ALLOC
  8 ._user_heap_stack 00003400  240006ac  0800bb2c  000206ac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e71a  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004256  00000000  00000000  0004e760  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000017e8  00000000  00000000  000529b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001670  00000000  00000000  000541a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f6ae  00000000  00000000  00055810  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000085df  00000000  00000000  00064ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006d49d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000065bc  00000000  00000000  0006d51c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800baac 	.word	0x0800baac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	0800baac 	.word	0x0800baac

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b97a 	b.w	80005e4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	468c      	mov	ip, r1
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	9e08      	ldr	r6, [sp, #32]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d151      	bne.n	80003bc <__udivmoddi4+0xb4>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d96d      	bls.n	80003fa <__udivmoddi4+0xf2>
 800031e:	fab2 fe82 	clz	lr, r2
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d00b      	beq.n	8000340 <__udivmoddi4+0x38>
 8000328:	f1ce 0c20 	rsb	ip, lr, #32
 800032c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000330:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000334:	fa02 f70e 	lsl.w	r7, r2, lr
 8000338:	ea4c 0c05 	orr.w	ip, ip, r5
 800033c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000340:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000344:	0c25      	lsrs	r5, r4, #16
 8000346:	fbbc f8fa 	udiv	r8, ip, sl
 800034a:	fa1f f987 	uxth.w	r9, r7
 800034e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000352:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000356:	fb08 f309 	mul.w	r3, r8, r9
 800035a:	42ab      	cmp	r3, r5
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x6c>
 800035e:	19ed      	adds	r5, r5, r7
 8000360:	f108 32ff 	add.w	r2, r8, #4294967295
 8000364:	f080 8123 	bcs.w	80005ae <__udivmoddi4+0x2a6>
 8000368:	42ab      	cmp	r3, r5
 800036a:	f240 8120 	bls.w	80005ae <__udivmoddi4+0x2a6>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	443d      	add	r5, r7
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb5 f0fa 	udiv	r0, r5, sl
 800037c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb00 f909 	mul.w	r9, r0, r9
 8000388:	45a1      	cmp	r9, r4
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x98>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	f080 810a 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8107 	bls.w	80005aa <__udivmoddi4+0x2a2>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 0409 	sub.w	r4, r4, r9
 80003a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a8:	2100      	movs	r1, #0
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d061      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80003b2:	2300      	movs	r3, #0
 80003b4:	6034      	str	r4, [r6, #0]
 80003b6:	6073      	str	r3, [r6, #4]
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0xc8>
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d054      	beq.n	800046e <__udivmoddi4+0x166>
 80003c4:	2100      	movs	r1, #0
 80003c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80003ca:	4608      	mov	r0, r1
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	fab3 f183 	clz	r1, r3
 80003d4:	2900      	cmp	r1, #0
 80003d6:	f040 808e 	bne.w	80004f6 <__udivmoddi4+0x1ee>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xdc>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80fa 	bhi.w	80005d8 <__udivmoddi4+0x2d0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb65 0503 	sbc.w	r5, r5, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	46ac      	mov	ip, r5
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d03f      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	b912      	cbnz	r2, 8000402 <__udivmoddi4+0xfa>
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000402:	fab7 fe87 	clz	lr, r7
 8000406:	f1be 0f00 	cmp.w	lr, #0
 800040a:	d134      	bne.n	8000476 <__udivmoddi4+0x16e>
 800040c:	1beb      	subs	r3, r5, r7
 800040e:	0c3a      	lsrs	r2, r7, #16
 8000410:	fa1f fc87 	uxth.w	ip, r7
 8000414:	2101      	movs	r1, #1
 8000416:	fbb3 f8f2 	udiv	r8, r3, r2
 800041a:	0c25      	lsrs	r5, r4, #16
 800041c:	fb02 3318 	mls	r3, r2, r8, r3
 8000420:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000424:	fb0c f308 	mul.w	r3, ip, r8
 8000428:	42ab      	cmp	r3, r5
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x134>
 800042c:	19ed      	adds	r5, r5, r7
 800042e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x132>
 8000434:	42ab      	cmp	r3, r5
 8000436:	f200 80d1 	bhi.w	80005dc <__udivmoddi4+0x2d4>
 800043a:	4680      	mov	r8, r0
 800043c:	1aed      	subs	r5, r5, r3
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb5 f0f2 	udiv	r0, r5, r2
 8000444:	fb02 5510 	mls	r5, r2, r0, r5
 8000448:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800044c:	fb0c fc00 	mul.w	ip, ip, r0
 8000450:	45a4      	cmp	ip, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x15c>
 8000454:	19e4      	adds	r4, r4, r7
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x15a>
 800045c:	45a4      	cmp	ip, r4
 800045e:	f200 80b8 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 040c 	sub.w	r4, r4, ip
 8000468:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800046c:	e79d      	b.n	80003aa <__udivmoddi4+0xa2>
 800046e:	4631      	mov	r1, r6
 8000470:	4630      	mov	r0, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	f1ce 0420 	rsb	r4, lr, #32
 800047a:	fa05 f30e 	lsl.w	r3, r5, lr
 800047e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000482:	fa20 f804 	lsr.w	r8, r0, r4
 8000486:	0c3a      	lsrs	r2, r7, #16
 8000488:	fa25 f404 	lsr.w	r4, r5, r4
 800048c:	ea48 0803 	orr.w	r8, r8, r3
 8000490:	fbb4 f1f2 	udiv	r1, r4, r2
 8000494:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000498:	fb02 4411 	mls	r4, r2, r1, r4
 800049c:	fa1f fc87 	uxth.w	ip, r7
 80004a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004a4:	fb01 f30c 	mul.w	r3, r1, ip
 80004a8:	42ab      	cmp	r3, r5
 80004aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80004ae:	d909      	bls.n	80004c4 <__udivmoddi4+0x1bc>
 80004b0:	19ed      	adds	r5, r5, r7
 80004b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80004b6:	f080 808a 	bcs.w	80005ce <__udivmoddi4+0x2c6>
 80004ba:	42ab      	cmp	r3, r5
 80004bc:	f240 8087 	bls.w	80005ce <__udivmoddi4+0x2c6>
 80004c0:	3902      	subs	r1, #2
 80004c2:	443d      	add	r5, r7
 80004c4:	1aeb      	subs	r3, r5, r3
 80004c6:	fa1f f588 	uxth.w	r5, r8
 80004ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80004ce:	fb02 3310 	mls	r3, r2, r0, r3
 80004d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d6:	fb00 f30c 	mul.w	r3, r0, ip
 80004da:	42ab      	cmp	r3, r5
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1e6>
 80004de:	19ed      	adds	r5, r5, r7
 80004e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e4:	d26f      	bcs.n	80005c6 <__udivmoddi4+0x2be>
 80004e6:	42ab      	cmp	r3, r5
 80004e8:	d96d      	bls.n	80005c6 <__udivmoddi4+0x2be>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443d      	add	r5, r7
 80004ee:	1aeb      	subs	r3, r5, r3
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	e78f      	b.n	8000416 <__udivmoddi4+0x10e>
 80004f6:	f1c1 0720 	rsb	r7, r1, #32
 80004fa:	fa22 f807 	lsr.w	r8, r2, r7
 80004fe:	408b      	lsls	r3, r1
 8000500:	fa05 f401 	lsl.w	r4, r5, r1
 8000504:	ea48 0303 	orr.w	r3, r8, r3
 8000508:	fa20 fe07 	lsr.w	lr, r0, r7
 800050c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000510:	40fd      	lsrs	r5, r7
 8000512:	ea4e 0e04 	orr.w	lr, lr, r4
 8000516:	fbb5 f9fc 	udiv	r9, r5, ip
 800051a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800051e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000522:	fa1f f883 	uxth.w	r8, r3
 8000526:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800052a:	fb09 f408 	mul.w	r4, r9, r8
 800052e:	42ac      	cmp	r4, r5
 8000530:	fa02 f201 	lsl.w	r2, r2, r1
 8000534:	fa00 fa01 	lsl.w	sl, r0, r1
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x244>
 800053a:	18ed      	adds	r5, r5, r3
 800053c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000540:	d243      	bcs.n	80005ca <__udivmoddi4+0x2c2>
 8000542:	42ac      	cmp	r4, r5
 8000544:	d941      	bls.n	80005ca <__udivmoddi4+0x2c2>
 8000546:	f1a9 0902 	sub.w	r9, r9, #2
 800054a:	441d      	add	r5, r3
 800054c:	1b2d      	subs	r5, r5, r4
 800054e:	fa1f fe8e 	uxth.w	lr, lr
 8000552:	fbb5 f0fc 	udiv	r0, r5, ip
 8000556:	fb0c 5510 	mls	r5, ip, r0, r5
 800055a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800055e:	fb00 f808 	mul.w	r8, r0, r8
 8000562:	45a0      	cmp	r8, r4
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x26e>
 8000566:	18e4      	adds	r4, r4, r3
 8000568:	f100 35ff 	add.w	r5, r0, #4294967295
 800056c:	d229      	bcs.n	80005c2 <__udivmoddi4+0x2ba>
 800056e:	45a0      	cmp	r8, r4
 8000570:	d927      	bls.n	80005c2 <__udivmoddi4+0x2ba>
 8000572:	3802      	subs	r0, #2
 8000574:	441c      	add	r4, r3
 8000576:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800057a:	eba4 0408 	sub.w	r4, r4, r8
 800057e:	fba0 8902 	umull	r8, r9, r0, r2
 8000582:	454c      	cmp	r4, r9
 8000584:	46c6      	mov	lr, r8
 8000586:	464d      	mov	r5, r9
 8000588:	d315      	bcc.n	80005b6 <__udivmoddi4+0x2ae>
 800058a:	d012      	beq.n	80005b2 <__udivmoddi4+0x2aa>
 800058c:	b156      	cbz	r6, 80005a4 <__udivmoddi4+0x29c>
 800058e:	ebba 030e 	subs.w	r3, sl, lr
 8000592:	eb64 0405 	sbc.w	r4, r4, r5
 8000596:	fa04 f707 	lsl.w	r7, r4, r7
 800059a:	40cb      	lsrs	r3, r1
 800059c:	431f      	orrs	r7, r3
 800059e:	40cc      	lsrs	r4, r1
 80005a0:	6037      	str	r7, [r6, #0]
 80005a2:	6074      	str	r4, [r6, #4]
 80005a4:	2100      	movs	r1, #0
 80005a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005aa:	4618      	mov	r0, r3
 80005ac:	e6f8      	b.n	80003a0 <__udivmoddi4+0x98>
 80005ae:	4690      	mov	r8, r2
 80005b0:	e6e0      	b.n	8000374 <__udivmoddi4+0x6c>
 80005b2:	45c2      	cmp	sl, r8
 80005b4:	d2ea      	bcs.n	800058c <__udivmoddi4+0x284>
 80005b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80005ba:	eb69 0503 	sbc.w	r5, r9, r3
 80005be:	3801      	subs	r0, #1
 80005c0:	e7e4      	b.n	800058c <__udivmoddi4+0x284>
 80005c2:	4628      	mov	r0, r5
 80005c4:	e7d7      	b.n	8000576 <__udivmoddi4+0x26e>
 80005c6:	4640      	mov	r0, r8
 80005c8:	e791      	b.n	80004ee <__udivmoddi4+0x1e6>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e7be      	b.n	800054c <__udivmoddi4+0x244>
 80005ce:	4601      	mov	r1, r0
 80005d0:	e778      	b.n	80004c4 <__udivmoddi4+0x1bc>
 80005d2:	3802      	subs	r0, #2
 80005d4:	443c      	add	r4, r7
 80005d6:	e745      	b.n	8000464 <__udivmoddi4+0x15c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xe6>
 80005dc:	f1a8 0802 	sub.w	r8, r8, #2
 80005e0:	443d      	add	r5, r7
 80005e2:	e72b      	b.n	800043c <__udivmoddi4+0x134>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ee:	2003      	movs	r0, #3
 80005f0:	f001 fa16 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005f4:	f004 fdae 	bl	8005154 <HAL_RCC_GetSysClockFreq>
 80005f8:	4601      	mov	r1, r0
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <HAL_Init+0x68>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	4a13      	ldr	r2, [pc, #76]	; (8000654 <HAL_Init+0x6c>)
 8000606:	5cd3      	ldrb	r3, [r2, r3]
 8000608:	f003 031f 	and.w	r3, r3, #31
 800060c:	fa21 f303 	lsr.w	r3, r1, r3
 8000610:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_Init+0x68>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_Init+0x6c>)
 800061c:	5cd3      	ldrb	r3, [r2, r3]
 800061e:	f003 031f 	and.w	r3, r3, #31
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	fa22 f303 	lsr.w	r3, r2, r3
 8000628:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <HAL_Init+0x70>)
 800062a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <HAL_Init+0x74>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000632:	2000      	movs	r0, #0
 8000634:	f000 f814 	bl	8000660 <HAL_InitTick>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	e002      	b.n	8000648 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000642:	f00a fee9 	bl	800b418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	58024400 	.word	0x58024400
 8000654:	0800baf4 	.word	0x0800baf4
 8000658:	24000014 	.word	0x24000014
 800065c:	24000010 	.word	0x24000010

08000660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <HAL_InitTick+0x60>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d101      	bne.n	8000674 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000670:	2301      	movs	r3, #1
 8000672:	e021      	b.n	80006b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <HAL_InitTick+0x64>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <HAL_InitTick+0x60>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4619      	mov	r1, r3
 800067e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000682:	fbb3 f3f1 	udiv	r3, r3, r1
 8000686:	fbb2 f3f3 	udiv	r3, r2, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f9fb 	bl	8001a86 <HAL_SYSTICK_Config>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	e00e      	b.n	80006b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b0f      	cmp	r3, #15
 800069e:	d80a      	bhi.n	80006b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a0:	2200      	movs	r2, #0
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	f04f 30ff 	mov.w	r0, #4294967295
 80006a8:	f001 f9c5 	bl	8001a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ac:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <HAL_InitTick+0x68>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006b2:	2300      	movs	r3, #0
 80006b4:	e000      	b.n	80006b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	24000004 	.word	0x24000004
 80006c4:	24000010 	.word	0x24000010
 80006c8:	24000000 	.word	0x24000000

080006cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_IncTick+0x20>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_IncTick+0x24>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4413      	add	r3, r2
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <HAL_IncTick+0x24>)
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	24000004 	.word	0x24000004
 80006f0:	24000064 	.word	0x24000064

080006f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return uwTick;
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <HAL_GetTick+0x14>)
 80006fa:	681b      	ldr	r3, [r3, #0]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	24000064 	.word	0x24000064

0800070c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000714:	f7ff ffee 	bl	80006f4 <HAL_GetTick>
 8000718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000724:	d005      	beq.n	8000732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_Delay+0x40>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4413      	add	r3, r2
 8000730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000732:	bf00      	nop
 8000734:	f7ff ffde 	bl	80006f4 <HAL_GetTick>
 8000738:	4602      	mov	r2, r0
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	1ad2      	subs	r2, r2, r3
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	429a      	cmp	r2, r3
 8000742:	d3f7      	bcc.n	8000734 <HAL_Delay+0x28>
  {
  }
}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	24000004 	.word	0x24000004

08000750 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <HAL_GetREVID+0x14>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	0c1b      	lsrs	r3, r3, #16
}
 800075a:	4618      	mov	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	5c001000 	.word	0x5c001000

08000768 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8000772:	4907      	ldr	r1, [pc, #28]	; (8000790 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	43db      	mvns	r3, r3
 800077c:	401a      	ands	r2, r3
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	4313      	orrs	r3, r2
 8000782:	604b      	str	r3, [r1, #4]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	58000400 	.word	0x58000400

08000794 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	431a      	orrs	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	609a      	str	r2, [r3, #8]
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80007ba:	b480      	push	{r7}
 80007bc:	b083      	sub	sp, #12
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	431a      	orrs	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	609a      	str	r2, [r3, #8]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3360      	adds	r3, #96	; 0x60
 800080e:	461a      	mov	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	430b      	orrs	r3, r1
 800082a:	431a      	orrs	r2, r3
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000830:	bf00      	nop
 8000832:	371c      	adds	r7, #28
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	691b      	ldr	r3, [r3, #16]
 800084c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	f003 031f 	and.w	r3, r3, #31
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	fa01 f303 	lsl.w	r3, r1, r3
 800085c:	431a      	orrs	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	611a      	str	r2, [r3, #16]
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800086e:	b480      	push	{r7}
 8000870:	b087      	sub	sp, #28
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	3360      	adds	r3, #96	; 0x60
 800087e:	461a      	mov	r2, r3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	431a      	orrs	r2, r3
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	601a      	str	r2, [r3, #0]
  }
}
 8000898:	bf00      	nop
 800089a:	371c      	adds	r7, #28
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b087      	sub	sp, #28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	3330      	adds	r3, #48	; 0x30
 80008b4:	461a      	mov	r2, r3
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	f003 030c 	and.w	r3, r3, #12
 80008c0:	4413      	add	r3, r2
 80008c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	f003 031f 	and.w	r3, r3, #31
 80008ce:	211f      	movs	r1, #31
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	401a      	ands	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	0e9b      	lsrs	r3, r3, #26
 80008dc:	f003 011f 	and.w	r1, r3, #31
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	f003 031f 	and.w	r3, r3, #31
 80008e6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ea:	431a      	orrs	r2, r3
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80008f0:	bf00      	nop
 80008f2:	371c      	adds	r7, #28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3314      	adds	r3, #20
 800090c:	461a      	mov	r2, r3
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	0e5b      	lsrs	r3, r3, #25
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	f003 0304 	and.w	r3, r3, #4
 8000918:	4413      	add	r3, r2
 800091a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	0d1b      	lsrs	r3, r3, #20
 8000924:	f003 031f 	and.w	r3, r3, #31
 8000928:	2107      	movs	r1, #7
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	401a      	ands	r2, r3
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	0d1b      	lsrs	r3, r3, #20
 8000936:	f003 031f 	and.w	r3, r3, #31
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	fa01 f303 	lsl.w	r3, r1, r3
 8000940:	431a      	orrs	r2, r3
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000946:	bf00      	nop
 8000948:	371c      	adds	r7, #28
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800096c:	43db      	mvns	r3, r3
 800096e:	401a      	ands	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f003 0318 	and.w	r3, r3, #24
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000978:	40d9      	lsrs	r1, r3
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	400b      	ands	r3, r1
 800097e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000982:	431a      	orrs	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	000fffff 	.word	0x000fffff

0800099c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689a      	ldr	r2, [r3, #8]
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <LL_ADC_DisableDeepPowerDown+0x20>)
 80009aa:	4013      	ands	r3, r2
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	6093      	str	r3, [r2, #8]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	5fffffc0 	.word	0x5fffffc0

080009c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009d4:	d101      	bne.n	80009da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80009d6:	2301      	movs	r3, #1
 80009d8:	e000      	b.n	80009dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <LL_ADC_EnableInternalRegulator+0x24>)
 80009f6:	4013      	ands	r3, r2
 80009f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	6fffffc0 	.word	0x6fffffc0

08000a10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000a24:	d101      	bne.n	8000a2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d101      	bne.n	8000a50 <LL_ADC_IsEnabled+0x18>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e000      	b.n	8000a52 <LL_ADC_IsEnabled+0x1a>
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	d101      	bne.n	8000a76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f003 0308 	and.w	r3, r3, #8
 8000a94:	2b08      	cmp	r3, #8
 8000a96:	d101      	bne.n	8000a9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e000      	b.n	8000a9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e18e      	b.n	8000de4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d109      	bne.n	8000ae8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f009 fc8f 	bl	800a3f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff67 	bl	80009c0 <LL_ADC_IsDeepPowerDownEnabled>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d004      	beq.n	8000b02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff4d 	bl	800099c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff82 	bl	8000a10 <LL_ADC_IsInternalRegulatorEnabled>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d114      	bne.n	8000b3c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff66 	bl	80009e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000b1c:	4b9a      	ldr	r3, [pc, #616]	; (8000d88 <HAL_ADC_Init+0x2dc>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	099b      	lsrs	r3, r3, #6
 8000b22:	4a9a      	ldr	r2, [pc, #616]	; (8000d8c <HAL_ADC_Init+0x2e0>)
 8000b24:	fba2 2303 	umull	r2, r3, r2, r3
 8000b28:	099b      	lsrs	r3, r3, #6
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b2e:	e002      	b.n	8000b36 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d1f9      	bne.n	8000b30 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff65 	bl	8000a10 <LL_ADC_IsInternalRegulatorEnabled>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10d      	bne.n	8000b68 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b50:	f043 0210 	orr.w	r2, r3, #16
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5c:	f043 0201 	orr.w	r2, r3, #1
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff76 	bl	8000a5e <LL_ADC_REG_IsConversionOngoing>
 8000b72:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b78:	f003 0310 	and.w	r3, r3, #16
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f040 8128 	bne.w	8000dd2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	f040 8124 	bne.w	8000dd2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b8e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b92:	f043 0202 	orr.w	r2, r3, #2
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff4a 	bl	8000a38 <LL_ADC_IsEnabled>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d136      	bne.n	8000c18 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a78      	ldr	r2, [pc, #480]	; (8000d90 <HAL_ADC_Init+0x2e4>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d004      	beq.n	8000bbe <HAL_ADC_Init+0x112>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a76      	ldr	r2, [pc, #472]	; (8000d94 <HAL_ADC_Init+0x2e8>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d10e      	bne.n	8000bdc <HAL_ADC_Init+0x130>
 8000bbe:	4874      	ldr	r0, [pc, #464]	; (8000d90 <HAL_ADC_Init+0x2e4>)
 8000bc0:	f7ff ff3a 	bl	8000a38 <LL_ADC_IsEnabled>
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	4873      	ldr	r0, [pc, #460]	; (8000d94 <HAL_ADC_Init+0x2e8>)
 8000bc8:	f7ff ff36 	bl	8000a38 <LL_ADC_IsEnabled>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4323      	orrs	r3, r4
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bf0c      	ite	eq
 8000bd4:	2301      	moveq	r3, #1
 8000bd6:	2300      	movne	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	e008      	b.n	8000bee <HAL_ADC_Init+0x142>
 8000bdc:	486e      	ldr	r0, [pc, #440]	; (8000d98 <HAL_ADC_Init+0x2ec>)
 8000bde:	f7ff ff2b 	bl	8000a38 <LL_ADC_IsEnabled>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	bf0c      	ite	eq
 8000be8:	2301      	moveq	r3, #1
 8000bea:	2300      	movne	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d012      	beq.n	8000c18 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a66      	ldr	r2, [pc, #408]	; (8000d90 <HAL_ADC_Init+0x2e4>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d004      	beq.n	8000c06 <HAL_ADC_Init+0x15a>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a64      	ldr	r2, [pc, #400]	; (8000d94 <HAL_ADC_Init+0x2e8>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <HAL_ADC_Init+0x15e>
 8000c06:	4a65      	ldr	r2, [pc, #404]	; (8000d9c <HAL_ADC_Init+0x2f0>)
 8000c08:	e000      	b.n	8000c0c <HAL_ADC_Init+0x160>
 8000c0a:	4a65      	ldr	r2, [pc, #404]	; (8000da0 <HAL_ADC_Init+0x2f4>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	4619      	mov	r1, r3
 8000c12:	4610      	mov	r0, r2
 8000c14:	f7ff fdbe 	bl	8000794 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000c18:	f7ff fd9a 	bl	8000750 <HAL_GetREVID>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d914      	bls.n	8000c50 <HAL_ADC_Init+0x1a4>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	2b10      	cmp	r3, #16
 8000c2c:	d110      	bne.n	8000c50 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7d5b      	ldrb	r3, [r3, #21]
 8000c32:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c38:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000c3e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7f1b      	ldrb	r3, [r3, #28]
 8000c44:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000c46:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c48:	f043 030c 	orr.w	r3, r3, #12
 8000c4c:	61bb      	str	r3, [r7, #24]
 8000c4e:	e00d      	b.n	8000c6c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	7d5b      	ldrb	r3, [r3, #21]
 8000c54:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c5a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000c60:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7f1b      	ldrb	r3, [r3, #28]
 8000c66:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	7f1b      	ldrb	r3, [r3, #28]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d106      	bne.n	8000c82 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	045b      	lsls	r3, r3, #17
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d009      	beq.n	8000c9e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c96:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68d9      	ldr	r1, [r3, #12]
 8000ca8:	4b3e      	ldr	r3, [pc, #248]	; (8000da4 <HAL_ADC_Init+0x2f8>)
 8000caa:	400b      	ands	r3, r1
 8000cac:	69b9      	ldr	r1, [r7, #24]
 8000cae:	430b      	orrs	r3, r1
 8000cb0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fed1 	bl	8000a5e <LL_ADC_REG_IsConversionOngoing>
 8000cbc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fede 	bl	8000a84 <LL_ADC_INJ_IsConversionOngoing>
 8000cc8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d14a      	bne.n	8000d66 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d147      	bne.n	8000d66 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	7d1b      	ldrb	r3, [r3, #20]
 8000cda:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	68d9      	ldr	r1, [r3, #12]
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <HAL_ADC_Init+0x2fc>)
 8000cf0:	400b      	ands	r3, r1
 8000cf2:	69b9      	ldr	r1, [r7, #24]
 8000cf4:	430b      	orrs	r3, r1
 8000cf6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d11b      	bne.n	8000d3a <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6919      	ldr	r1, [r3, #16]
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <HAL_ADC_Init+0x300>)
 8000d14:	400b      	ands	r3, r1
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000d1a:	3901      	subs	r1, #1
 8000d1c:	0408      	lsls	r0, r1, #16
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d22:	4308      	orrs	r0, r1
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8000d28:	4308      	orrs	r0, r1
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	6c89      	ldr	r1, [r1, #72]	; 0x48
 8000d2e:	4301      	orrs	r1, r0
 8000d30:	430b      	orrs	r3, r1
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6113      	str	r3, [r2, #16]
 8000d38:	e007      	b.n	8000d4a <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	6812      	ldr	r2, [r2, #0]
 8000d42:	6912      	ldr	r2, [r2, #16]
 8000d44:	f022 0201 	bic.w	r2, r2, #1
 8000d48:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	6812      	ldr	r2, [r2, #0]
 8000d52:	6912      	ldr	r2, [r2, #16]
 8000d54:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f000 fb93 	bl	800148c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d120      	bne.n	8000db0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000d78:	f022 010f 	bic.w	r1, r2, #15
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	6992      	ldr	r2, [r2, #24]
 8000d80:	3a01      	subs	r2, #1
 8000d82:	430a      	orrs	r2, r1
 8000d84:	631a      	str	r2, [r3, #48]	; 0x30
 8000d86:	e01b      	b.n	8000dc0 <HAL_ADC_Init+0x314>
 8000d88:	24000010 	.word	0x24000010
 8000d8c:	053e2d63 	.word	0x053e2d63
 8000d90:	40022000 	.word	0x40022000
 8000d94:	40022100 	.word	0x40022100
 8000d98:	58026000 	.word	0x58026000
 8000d9c:	40022300 	.word	0x40022300
 8000da0:	58026300 	.word	0x58026300
 8000da4:	fff0c003 	.word	0xfff0c003
 8000da8:	ffffbffc 	.word	0xffffbffc
 8000dac:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	6812      	ldr	r2, [r2, #0]
 8000db8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000dba:	f022 020f 	bic.w	r2, r2, #15
 8000dbe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dc4:	f023 0303 	bic.w	r3, r3, #3
 8000dc8:	f043 0201 	orr.w	r2, r3, #1
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	655a      	str	r2, [r3, #84]	; 0x54
 8000dd0:	e007      	b.n	8000de2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd6:	f043 0210 	orr.w	r2, r3, #16
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000de2:	7ffb      	ldrb	r3, [r7, #31]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3724      	adds	r7, #36	; 0x24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd90      	pop	{r4, r7, pc}

08000dec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b0a1      	sub	sp, #132	; 0x84
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	4a9d      	ldr	r2, [pc, #628]	; (800107c <HAL_ADC_ConfigChannel+0x290>)
 8000e06:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d101      	bne.n	8000e16 <HAL_ADC_ConfigChannel+0x2a>
 8000e12:	2302      	movs	r3, #2
 8000e14:	e321      	b.n	800145a <HAL_ADC_ConfigChannel+0x66e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fe1b 	bl	8000a5e <LL_ADC_REG_IsConversionOngoing>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f040 8306 	bne.w	800143c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d108      	bne.n	8000e4e <HAL_ADC_ConfigChannel+0x62>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	0e9b      	lsrs	r3, r3, #26
 8000e42:	f003 031f 	and.w	r3, r3, #31
 8000e46:	2201      	movs	r2, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	e016      	b.n	8000e7c <HAL_ADC_ConfigChannel+0x90>
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e56:	fa93 f3a3 	rbit	r3, r3
 8000e5a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e5e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000e60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8000e66:	2320      	movs	r3, #32
 8000e68:	e003      	b.n	8000e72 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8000e6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e6c:	fab3 f383 	clz	r3, r3
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	f003 031f 	and.w	r3, r3, #31
 8000e76:	2201      	movs	r2, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	6812      	ldr	r2, [r2, #0]
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	6809      	ldr	r1, [r1, #0]
 8000e84:	69c9      	ldr	r1, [r1, #28]
 8000e86:	430b      	orrs	r3, r1
 8000e88:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6818      	ldr	r0, [r3, #0]
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	6859      	ldr	r1, [r3, #4]
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	f7ff fd04 	bl	80008a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fddc 	bl	8000a5e <LL_ADC_REG_IsConversionOngoing>
 8000ea6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fde9 	bl	8000a84 <LL_ADC_INJ_IsConversionOngoing>
 8000eb2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f040 80b3 	bne.w	8001022 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 80af 	bne.w	8001022 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	6819      	ldr	r1, [r3, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	f7ff fd13 	bl	80008fc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000ed6:	4b6a      	ldr	r3, [pc, #424]	; (8001080 <HAL_ADC_ConfigChannel+0x294>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ee2:	d10b      	bne.n	8000efc <HAL_ADC_ConfigChannel+0x110>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	e01d      	b.n	8000f38 <HAL_ADC_ConfigChannel+0x14c>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	f003 0310 	and.w	r3, r3, #16
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10b      	bne.n	8000f22 <HAL_ADC_ConfigChannel+0x136>
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	695a      	ldr	r2, [r3, #20]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	e00a      	b.n	8000f38 <HAL_ADC_ConfigChannel+0x14c>
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	695a      	ldr	r2, [r3, #20]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	d027      	beq.n	8000f92 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	6919      	ldr	r1, [r3, #16]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f50:	f7ff fc54 	bl	80007fc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	6919      	ldr	r1, [r3, #16]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	7e5b      	ldrb	r3, [r3, #25]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d102      	bne.n	8000f6a <HAL_ADC_ConfigChannel+0x17e>
 8000f64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000f68:	e000      	b.n	8000f6c <HAL_ADC_ConfigChannel+0x180>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	f7ff fc7e 	bl	800086e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	6919      	ldr	r1, [r3, #16]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	7e1b      	ldrb	r3, [r3, #24]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d102      	bne.n	8000f88 <HAL_ADC_ConfigChannel+0x19c>
 8000f82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f86:	e000      	b.n	8000f8a <HAL_ADC_ConfigChannel+0x19e>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f7ff fc56 	bl	800083c <LL_ADC_SetDataRightShift>
 8000f90:	e047      	b.n	8001022 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	069b      	lsls	r3, r3, #26
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d107      	bne.n	8000fb6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8000fb0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000fb4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	069b      	lsls	r3, r3, #26
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d107      	bne.n	8000fda <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8000fd4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000fd8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000fe0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	069b      	lsls	r3, r3, #26
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d107      	bne.n	8000ffe <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000ff8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ffc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001004:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	069b      	lsls	r3, r3, #26
 800100e:	429a      	cmp	r2, r3
 8001010:	d107      	bne.n	8001022 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	6812      	ldr	r2, [r2, #0]
 800101a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800101c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001020:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fd06 	bl	8000a38 <LL_ADC_IsEnabled>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	f040 820d 	bne.w	800144e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	6819      	ldr	r1, [r3, #0]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	461a      	mov	r2, r3
 8001042:	f7ff fc87 	bl	8000954 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	4a0c      	ldr	r2, [pc, #48]	; (800107c <HAL_ADC_ConfigChannel+0x290>)
 800104c:	4293      	cmp	r3, r2
 800104e:	f040 8133 	bne.w	80012b8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800105e:	2b00      	cmp	r3, #0
 8001060:	d110      	bne.n	8001084 <HAL_ADC_ConfigChannel+0x298>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	0e9b      	lsrs	r3, r3, #26
 8001068:	3301      	adds	r3, #1
 800106a:	f003 031f 	and.w	r3, r3, #31
 800106e:	2b09      	cmp	r3, #9
 8001070:	bf94      	ite	ls
 8001072:	2301      	movls	r3, #1
 8001074:	2300      	movhi	r3, #0
 8001076:	b2db      	uxtb	r3, r3
 8001078:	e01e      	b.n	80010b8 <HAL_ADC_ConfigChannel+0x2cc>
 800107a:	bf00      	nop
 800107c:	47ff0000 	.word	0x47ff0000
 8001080:	5c001000 	.word	0x5c001000
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800108c:	fa93 f3a3 	rbit	r3, r3
 8001090:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001094:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800109c:	2320      	movs	r3, #32
 800109e:	e003      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80010a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010a2:	fab3 f383 	clz	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	3301      	adds	r3, #1
 80010aa:	f003 031f 	and.w	r3, r3, #31
 80010ae:	2b09      	cmp	r3, #9
 80010b0:	bf94      	ite	ls
 80010b2:	2301      	movls	r3, #1
 80010b4:	2300      	movhi	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d079      	beq.n	80011b0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d107      	bne.n	80010d8 <HAL_ADC_ConfigChannel+0x2ec>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	0e9b      	lsrs	r3, r3, #26
 80010ce:	3301      	adds	r3, #1
 80010d0:	069b      	lsls	r3, r3, #26
 80010d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010d6:	e015      	b.n	8001104 <HAL_ADC_ConfigChannel+0x318>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e0:	fa93 f3a3 	rbit	r3, r3
 80010e4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80010e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010e8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80010ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80010f0:	2320      	movs	r3, #32
 80010f2:	e003      	b.n	80010fc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80010f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	3301      	adds	r3, #1
 80010fe:	069b      	lsls	r3, r3, #26
 8001100:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800110c:	2b00      	cmp	r3, #0
 800110e:	d109      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x338>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	0e9b      	lsrs	r3, r3, #26
 8001116:	3301      	adds	r3, #1
 8001118:	f003 031f 	and.w	r3, r3, #31
 800111c:	2101      	movs	r1, #1
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	e017      	b.n	8001154 <HAL_ADC_ConfigChannel+0x368>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800112c:	fa93 f3a3 	rbit	r3, r3
 8001130:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001134:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800113c:	2320      	movs	r3, #32
 800113e:	e003      	b.n	8001148 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001142:	fab3 f383 	clz	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	3301      	adds	r3, #1
 800114a:	f003 031f 	and.w	r3, r3, #31
 800114e:	2101      	movs	r1, #1
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	ea42 0103 	orr.w	r1, r2, r3
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10a      	bne.n	800117a <HAL_ADC_ConfigChannel+0x38e>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	0e9b      	lsrs	r3, r3, #26
 800116a:	3301      	adds	r3, #1
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	051b      	lsls	r3, r3, #20
 8001178:	e018      	b.n	80011ac <HAL_ADC_ConfigChannel+0x3c0>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001182:	fa93 f3a3 	rbit	r3, r3
 8001186:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800118c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001192:	2320      	movs	r3, #32
 8001194:	e003      	b.n	800119e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001198:	fab3 f383 	clz	r3, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	3301      	adds	r3, #1
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011ac:	430b      	orrs	r3, r1
 80011ae:	e07e      	b.n	80012ae <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d107      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x3e0>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	0e9b      	lsrs	r3, r3, #26
 80011c2:	3301      	adds	r3, #1
 80011c4:	069b      	lsls	r3, r3, #26
 80011c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011ca:	e015      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x40c>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80011de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80011e4:	2320      	movs	r3, #32
 80011e6:	e003      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80011e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	3301      	adds	r3, #1
 80011f2:	069b      	lsls	r3, r3, #26
 80011f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001200:	2b00      	cmp	r3, #0
 8001202:	d109      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x42c>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	0e9b      	lsrs	r3, r3, #26
 800120a:	3301      	adds	r3, #1
 800120c:	f003 031f 	and.w	r3, r3, #31
 8001210:	2101      	movs	r1, #1
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	e017      	b.n	8001248 <HAL_ADC_ConfigChannel+0x45c>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa93 f3a3 	rbit	r3, r3
 8001224:	61bb      	str	r3, [r7, #24]
  return result;
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001230:	2320      	movs	r3, #32
 8001232:	e003      	b.n	800123c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	3301      	adds	r3, #1
 800123e:	f003 031f 	and.w	r3, r3, #31
 8001242:	2101      	movs	r1, #1
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	ea42 0103 	orr.w	r1, r2, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10d      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x488>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	0e9b      	lsrs	r3, r3, #26
 800125e:	3301      	adds	r3, #1
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	3b1e      	subs	r3, #30
 800126c:	051b      	lsls	r3, r3, #20
 800126e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001272:	e01b      	b.n	80012ac <HAL_ADC_ConfigChannel+0x4c0>
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	fa93 f3a3 	rbit	r3, r3
 8001280:	60fb      	str	r3, [r7, #12]
  return result;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800128c:	2320      	movs	r3, #32
 800128e:	e003      	b.n	8001298 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fab3 f383 	clz	r3, r3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	3301      	adds	r3, #1
 800129a:	f003 021f 	and.w	r2, r3, #31
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	3b1e      	subs	r3, #30
 80012a6:	051b      	lsls	r3, r3, #20
 80012a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80012ac:	430b      	orrs	r3, r1
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	6892      	ldr	r2, [r2, #8]
 80012b2:	4619      	mov	r1, r3
 80012b4:	f7ff fb22 	bl	80008fc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f280 80c6 	bge.w	800144e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a67      	ldr	r2, [pc, #412]	; (8001464 <HAL_ADC_ConfigChannel+0x678>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d004      	beq.n	80012d6 <HAL_ADC_ConfigChannel+0x4ea>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a65      	ldr	r2, [pc, #404]	; (8001468 <HAL_ADC_ConfigChannel+0x67c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d101      	bne.n	80012da <HAL_ADC_ConfigChannel+0x4ee>
 80012d6:	4b65      	ldr	r3, [pc, #404]	; (800146c <HAL_ADC_ConfigChannel+0x680>)
 80012d8:	e000      	b.n	80012dc <HAL_ADC_ConfigChannel+0x4f0>
 80012da:	4b65      	ldr	r3, [pc, #404]	; (8001470 <HAL_ADC_ConfigChannel+0x684>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fa7f 	bl	80007e0 <LL_ADC_GetCommonPathInternalCh>
 80012e2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a5e      	ldr	r2, [pc, #376]	; (8001464 <HAL_ADC_ConfigChannel+0x678>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d004      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x50c>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a5d      	ldr	r2, [pc, #372]	; (8001468 <HAL_ADC_ConfigChannel+0x67c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d10e      	bne.n	8001316 <HAL_ADC_ConfigChannel+0x52a>
 80012f8:	485a      	ldr	r0, [pc, #360]	; (8001464 <HAL_ADC_ConfigChannel+0x678>)
 80012fa:	f7ff fb9d 	bl	8000a38 <LL_ADC_IsEnabled>
 80012fe:	4604      	mov	r4, r0
 8001300:	4859      	ldr	r0, [pc, #356]	; (8001468 <HAL_ADC_ConfigChannel+0x67c>)
 8001302:	f7ff fb99 	bl	8000a38 <LL_ADC_IsEnabled>
 8001306:	4603      	mov	r3, r0
 8001308:	4323      	orrs	r3, r4
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf0c      	ite	eq
 800130e:	2301      	moveq	r3, #1
 8001310:	2300      	movne	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	e008      	b.n	8001328 <HAL_ADC_ConfigChannel+0x53c>
 8001316:	4857      	ldr	r0, [pc, #348]	; (8001474 <HAL_ADC_ConfigChannel+0x688>)
 8001318:	f7ff fb8e 	bl	8000a38 <LL_ADC_IsEnabled>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	bf0c      	ite	eq
 8001322:	2301      	moveq	r3, #1
 8001324:	2300      	movne	r3, #0
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	d07d      	beq.n	8001428 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a51      	ldr	r2, [pc, #324]	; (8001478 <HAL_ADC_ConfigChannel+0x68c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d130      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x5ac>
 8001336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001338:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d12b      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a4b      	ldr	r2, [pc, #300]	; (8001474 <HAL_ADC_ConfigChannel+0x688>)
 8001346:	4293      	cmp	r3, r2
 8001348:	f040 8081 	bne.w	800144e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a44      	ldr	r2, [pc, #272]	; (8001464 <HAL_ADC_ConfigChannel+0x678>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d004      	beq.n	8001360 <HAL_ADC_ConfigChannel+0x574>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a43      	ldr	r2, [pc, #268]	; (8001468 <HAL_ADC_ConfigChannel+0x67c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d101      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x578>
 8001360:	4a42      	ldr	r2, [pc, #264]	; (800146c <HAL_ADC_ConfigChannel+0x680>)
 8001362:	e000      	b.n	8001366 <HAL_ADC_ConfigChannel+0x57a>
 8001364:	4a42      	ldr	r2, [pc, #264]	; (8001470 <HAL_ADC_ConfigChannel+0x684>)
 8001366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001368:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800136c:	4619      	mov	r1, r3
 800136e:	4610      	mov	r0, r2
 8001370:	f7ff fa23 	bl	80007ba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001374:	4b41      	ldr	r3, [pc, #260]	; (800147c <HAL_ADC_ConfigChannel+0x690>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	099b      	lsrs	r3, r3, #6
 800137a:	4a41      	ldr	r2, [pc, #260]	; (8001480 <HAL_ADC_ConfigChannel+0x694>)
 800137c:	fba2 2303 	umull	r2, r3, r2, r3
 8001380:	099b      	lsrs	r3, r3, #6
 8001382:	3301      	adds	r3, #1
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001388:	e002      	b.n	8001390 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3b01      	subs	r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f9      	bne.n	800138a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001396:	e05a      	b.n	800144e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a39      	ldr	r2, [pc, #228]	; (8001484 <HAL_ADC_ConfigChannel+0x698>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d11e      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x5f4>
 80013a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d119      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a30      	ldr	r2, [pc, #192]	; (8001474 <HAL_ADC_ConfigChannel+0x688>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d14b      	bne.n	800144e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a2a      	ldr	r2, [pc, #168]	; (8001464 <HAL_ADC_ConfigChannel+0x678>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d004      	beq.n	80013ca <HAL_ADC_ConfigChannel+0x5de>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a28      	ldr	r2, [pc, #160]	; (8001468 <HAL_ADC_ConfigChannel+0x67c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d101      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x5e2>
 80013ca:	4a28      	ldr	r2, [pc, #160]	; (800146c <HAL_ADC_ConfigChannel+0x680>)
 80013cc:	e000      	b.n	80013d0 <HAL_ADC_ConfigChannel+0x5e4>
 80013ce:	4a28      	ldr	r2, [pc, #160]	; (8001470 <HAL_ADC_ConfigChannel+0x684>)
 80013d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013d6:	4619      	mov	r1, r3
 80013d8:	4610      	mov	r0, r2
 80013da:	f7ff f9ee 	bl	80007ba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80013de:	e036      	b.n	800144e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a28      	ldr	r2, [pc, #160]	; (8001488 <HAL_ADC_ConfigChannel+0x69c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d131      	bne.n	800144e <HAL_ADC_ConfigChannel+0x662>
 80013ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d12c      	bne.n	800144e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1e      	ldr	r2, [pc, #120]	; (8001474 <HAL_ADC_ConfigChannel+0x688>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d127      	bne.n	800144e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a18      	ldr	r2, [pc, #96]	; (8001464 <HAL_ADC_ConfigChannel+0x678>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d004      	beq.n	8001412 <HAL_ADC_ConfigChannel+0x626>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a16      	ldr	r2, [pc, #88]	; (8001468 <HAL_ADC_ConfigChannel+0x67c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d101      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x62a>
 8001412:	4a16      	ldr	r2, [pc, #88]	; (800146c <HAL_ADC_ConfigChannel+0x680>)
 8001414:	e000      	b.n	8001418 <HAL_ADC_ConfigChannel+0x62c>
 8001416:	4a16      	ldr	r2, [pc, #88]	; (8001470 <HAL_ADC_ConfigChannel+0x684>)
 8001418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800141a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800141e:	4619      	mov	r1, r3
 8001420:	4610      	mov	r0, r2
 8001422:	f7ff f9ca 	bl	80007ba <LL_ADC_SetCommonPathInternalCh>
 8001426:	e012      	b.n	800144e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142c:	f043 0220 	orr.w	r2, r3, #32
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800143a:	e008      	b.n	800144e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001440:	f043 0220 	orr.w	r2, r3, #32
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001456:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800145a:	4618      	mov	r0, r3
 800145c:	3784      	adds	r7, #132	; 0x84
 800145e:	46bd      	mov	sp, r7
 8001460:	bd90      	pop	{r4, r7, pc}
 8001462:	bf00      	nop
 8001464:	40022000 	.word	0x40022000
 8001468:	40022100 	.word	0x40022100
 800146c:	40022300 	.word	0x40022300
 8001470:	58026300 	.word	0x58026300
 8001474:	58026000 	.word	0x58026000
 8001478:	cb840000 	.word	0xcb840000
 800147c:	24000010 	.word	0x24000010
 8001480:	053e2d63 	.word	0x053e2d63
 8001484:	c7520000 	.word	0xc7520000
 8001488:	cfb80000 	.word	0xcfb80000

0800148c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a70      	ldr	r2, [pc, #448]	; (800165c <ADC_ConfigureBoostMode+0x1d0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d004      	beq.n	80014a8 <ADC_ConfigureBoostMode+0x1c>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a6f      	ldr	r2, [pc, #444]	; (8001660 <ADC_ConfigureBoostMode+0x1d4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d109      	bne.n	80014bc <ADC_ConfigureBoostMode+0x30>
 80014a8:	4b6e      	ldr	r3, [pc, #440]	; (8001664 <ADC_ConfigureBoostMode+0x1d8>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf14      	ite	ne
 80014b4:	2301      	movne	r3, #1
 80014b6:	2300      	moveq	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	e008      	b.n	80014ce <ADC_ConfigureBoostMode+0x42>
 80014bc:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <ADC_ConfigureBoostMode+0x1dc>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf14      	ite	ne
 80014c8:	2301      	movne	r3, #1
 80014ca:	2300      	moveq	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d01a      	beq.n	8001508 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80014d2:	f003 ffb1 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 80014d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014e0:	d006      	beq.n	80014f0 <ADC_ConfigureBoostMode+0x64>
 80014e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80014e6:	d00b      	beq.n	8001500 <ADC_ConfigureBoostMode+0x74>
 80014e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ec:	d000      	beq.n	80014f0 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80014ee:	e05d      	b.n	80015ac <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	0c1b      	lsrs	r3, r3, #16
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fc:	60fb      	str	r3, [r7, #12]
        break;
 80014fe:	e055      	b.n	80015ac <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	60fb      	str	r3, [r7, #12]
        break;
 8001506:	e051      	b.n	80015ac <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001508:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800150c:	f004 feee 	bl	80062ec <HAL_RCCEx_GetPeriphCLKFreq>
 8001510:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800151a:	d02a      	beq.n	8001572 <ADC_ConfigureBoostMode+0xe6>
 800151c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001520:	d813      	bhi.n	800154a <ADC_ConfigureBoostMode+0xbe>
 8001522:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001526:	d024      	beq.n	8001572 <ADC_ConfigureBoostMode+0xe6>
 8001528:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800152c:	d806      	bhi.n	800153c <ADC_ConfigureBoostMode+0xb0>
 800152e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001532:	d01e      	beq.n	8001572 <ADC_ConfigureBoostMode+0xe6>
 8001534:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001538:	d01b      	beq.n	8001572 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800153a:	e037      	b.n	80015ac <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 800153c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001540:	d017      	beq.n	8001572 <ADC_ConfigureBoostMode+0xe6>
 8001542:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001546:	d014      	beq.n	8001572 <ADC_ConfigureBoostMode+0xe6>
        break;
 8001548:	e030      	b.n	80015ac <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 800154a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800154e:	d021      	beq.n	8001594 <ADC_ConfigureBoostMode+0x108>
 8001550:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001554:	d806      	bhi.n	8001564 <ADC_ConfigureBoostMode+0xd8>
 8001556:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800155a:	d013      	beq.n	8001584 <ADC_ConfigureBoostMode+0xf8>
 800155c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001560:	d014      	beq.n	800158c <ADC_ConfigureBoostMode+0x100>
        break;
 8001562:	e023      	b.n	80015ac <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8001564:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001568:	d018      	beq.n	800159c <ADC_ConfigureBoostMode+0x110>
 800156a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800156e:	d019      	beq.n	80015a4 <ADC_ConfigureBoostMode+0x118>
        break;
 8001570:	e01c      	b.n	80015ac <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	0c9b      	lsrs	r3, r3, #18
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001580:	60fb      	str	r3, [r7, #12]
        break;
 8001582:	e013      	b.n	80015ac <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	60fb      	str	r3, [r7, #12]
        break;
 800158a:	e00f      	b.n	80015ac <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	60fb      	str	r3, [r7, #12]
        break;
 8001592:	e00b      	b.n	80015ac <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	099b      	lsrs	r3, r3, #6
 8001598:	60fb      	str	r3, [r7, #12]
        break;
 800159a:	e007      	b.n	80015ac <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	09db      	lsrs	r3, r3, #7
 80015a0:	60fb      	str	r3, [r7, #12]
        break;
 80015a2:	e003      	b.n	80015ac <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	0a1b      	lsrs	r3, r3, #8
 80015a8:	60fb      	str	r3, [r7, #12]
        break;
 80015aa:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80015ac:	f7ff f8d0 	bl	8000750 <HAL_GetREVID>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d815      	bhi.n	80015e6 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4a2b      	ldr	r2, [pc, #172]	; (800166c <ADC_ConfigureBoostMode+0x1e0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d908      	bls.n	80015d4 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	6892      	ldr	r2, [r2, #8]
 80015cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015d0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80015d2:	e03e      	b.n	8001652 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	6892      	ldr	r2, [r2, #8]
 80015de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015e2:	609a      	str	r2, [r3, #8]
}
 80015e4:	e035      	b.n	8001652 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	085b      	lsrs	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4a20      	ldr	r2, [pc, #128]	; (8001670 <ADC_ConfigureBoostMode+0x1e4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d808      	bhi.n	8001606 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	6892      	ldr	r2, [r2, #8]
 80015fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001602:	609a      	str	r2, [r3, #8]
}
 8001604:	e025      	b.n	8001652 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4a1a      	ldr	r2, [pc, #104]	; (8001674 <ADC_ConfigureBoostMode+0x1e8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d80a      	bhi.n	8001624 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	6892      	ldr	r2, [r2, #8]
 8001618:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800161c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001620:	609a      	str	r2, [r3, #8]
}
 8001622:	e016      	b.n	8001652 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4a14      	ldr	r2, [pc, #80]	; (8001678 <ADC_ConfigureBoostMode+0x1ec>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d80a      	bhi.n	8001642 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	6892      	ldr	r2, [r2, #8]
 8001636:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800163a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800163e:	609a      	str	r2, [r3, #8]
}
 8001640:	e007      	b.n	8001652 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	6892      	ldr	r2, [r2, #8]
 800164c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001650:	609a      	str	r2, [r3, #8]
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40022000 	.word	0x40022000
 8001660:	40022100 	.word	0x40022100
 8001664:	40022300 	.word	0x40022300
 8001668:	58026300 	.word	0x58026300
 800166c:	01312d00 	.word	0x01312d00
 8001670:	005f5e10 	.word	0x005f5e10
 8001674:	00bebc20 	.word	0x00bebc20
 8001678:	017d7840 	.word	0x017d7840

0800167c <LL_ADC_IsEnabled>:
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <LL_ADC_IsEnabled+0x18>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <LL_ADC_IsEnabled+0x1a>
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d101      	bne.n	80016ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b09f      	sub	sp, #124	; 0x7c
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e0be      	b.n	8001864 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a5c      	ldr	r2, [pc, #368]	; (800186c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d102      	bne.n	8001706 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001700:	4b5b      	ldr	r3, [pc, #364]	; (8001870 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	e001      	b.n	800170a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10b      	bne.n	8001728 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001714:	f043 0220 	orr.w	r2, r3, #32
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e09d      	b.n	8001864 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ffb9 	bl	80016a2 <LL_ADC_REG_IsConversionOngoing>
 8001730:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ffb3 	bl	80016a2 <LL_ADC_REG_IsConversionOngoing>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d17f      	bne.n	8001842 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001744:	2b00      	cmp	r3, #0
 8001746:	d17c      	bne.n	8001842 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a47      	ldr	r2, [pc, #284]	; (800186c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d004      	beq.n	800175c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a46      	ldr	r2, [pc, #280]	; (8001870 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d101      	bne.n	8001760 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800175c:	4b45      	ldr	r3, [pc, #276]	; (8001874 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800175e:	e000      	b.n	8001762 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8001760:	4b45      	ldr	r3, [pc, #276]	; (8001878 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001762:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d039      	beq.n	80017e0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800176c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	431a      	orrs	r2, r3
 800177a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800177c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a3a      	ldr	r2, [pc, #232]	; (800186c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d004      	beq.n	8001792 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a38      	ldr	r2, [pc, #224]	; (8001870 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d10e      	bne.n	80017b0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8001792:	4836      	ldr	r0, [pc, #216]	; (800186c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001794:	f7ff ff72 	bl	800167c <LL_ADC_IsEnabled>
 8001798:	4604      	mov	r4, r0
 800179a:	4835      	ldr	r0, [pc, #212]	; (8001870 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800179c:	f7ff ff6e 	bl	800167c <LL_ADC_IsEnabled>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4323      	orrs	r3, r4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf0c      	ite	eq
 80017a8:	2301      	moveq	r3, #1
 80017aa:	2300      	movne	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	e008      	b.n	80017c2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80017b0:	4832      	ldr	r0, [pc, #200]	; (800187c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80017b2:	f7ff ff63 	bl	800167c <LL_ADC_IsEnabled>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf0c      	ite	eq
 80017bc:	2301      	moveq	r3, #1
 80017be:	2300      	movne	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d047      	beq.n	8001856 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80017c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	6811      	ldr	r1, [r2, #0]
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	6892      	ldr	r2, [r2, #8]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	431a      	orrs	r2, r3
 80017da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017dc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80017de:	e03a      	b.n	8001856 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80017e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80017e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1e      	ldr	r2, [pc, #120]	; (800186c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d004      	beq.n	8001800 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a1d      	ldr	r2, [pc, #116]	; (8001870 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d10e      	bne.n	800181e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8001800:	481a      	ldr	r0, [pc, #104]	; (800186c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001802:	f7ff ff3b 	bl	800167c <LL_ADC_IsEnabled>
 8001806:	4604      	mov	r4, r0
 8001808:	4819      	ldr	r0, [pc, #100]	; (8001870 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800180a:	f7ff ff37 	bl	800167c <LL_ADC_IsEnabled>
 800180e:	4603      	mov	r3, r0
 8001810:	4323      	orrs	r3, r4
 8001812:	2b00      	cmp	r3, #0
 8001814:	bf0c      	ite	eq
 8001816:	2301      	moveq	r3, #1
 8001818:	2300      	movne	r3, #0
 800181a:	b2db      	uxtb	r3, r3
 800181c:	e008      	b.n	8001830 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800181e:	4817      	ldr	r0, [pc, #92]	; (800187c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8001820:	f7ff ff2c 	bl	800167c <LL_ADC_IsEnabled>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf0c      	ite	eq
 800182a:	2301      	moveq	r3, #1
 800182c:	2300      	movne	r3, #0
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d010      	beq.n	8001856 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800183a:	4013      	ands	r3, r2
 800183c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800183e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001840:	e009      	b.n	8001856 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001846:	f043 0220 	orr.w	r2, r3, #32
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001854:	e000      	b.n	8001858 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001856:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001860:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001864:	4618      	mov	r0, r3
 8001866:	377c      	adds	r7, #124	; 0x7c
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	40022000 	.word	0x40022000
 8001870:	40022100 	.word	0x40022100
 8001874:	40022300 	.word	0x40022300
 8001878:	58026300 	.word	0x58026300
 800187c:	58026000 	.word	0x58026000
 8001880:	fffff0e0 	.word	0xfffff0e0

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x40>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00
 80018c8:	05fa0000 	.word	0x05fa0000

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	4909      	ldr	r1, [pc, #36]	; (8001920 <__NVIC_EnableIRQ+0x38>)
 80018fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001900:	095b      	lsrs	r3, r3, #5
 8001902:	88fa      	ldrh	r2, [r7, #6]
 8001904:	f002 021f 	and.w	r2, r2, #31
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001930:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001934:	2b00      	cmp	r3, #0
 8001936:	db0a      	blt.n	800194e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	490d      	ldr	r1, [pc, #52]	; (8001970 <__NVIC_SetPriority+0x4c>)
 800193a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	440b      	add	r3, r1
 8001948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800194c:	e00a      	b.n	8001964 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	4909      	ldr	r1, [pc, #36]	; (8001974 <__NVIC_SetPriority+0x50>)
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	440b      	add	r3, r1
 8001962:	761a      	strb	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f1c3 0307 	rsb	r3, r3, #7
 8001992:	2b04      	cmp	r3, #4
 8001994:	bf28      	it	cs
 8001996:	2304      	movcs	r3, #4
 8001998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3304      	adds	r3, #4
 800199e:	2b06      	cmp	r3, #6
 80019a0:	d902      	bls.n	80019a8 <NVIC_EncodePriority+0x30>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b03      	subs	r3, #3
 80019a6:	e000      	b.n	80019aa <NVIC_EncodePriority+0x32>
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	2201      	movs	r2, #1
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	1e5a      	subs	r2, r3, #1
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	401a      	ands	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019be:	2101      	movs	r1, #1
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	1e59      	subs	r1, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ec:	d301      	bcc.n	80019f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00f      	b.n	8001a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <SysTick_Config+0x40>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fa:	210f      	movs	r1, #15
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f7ff ff90 	bl	8001924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <SysTick_Config+0x40>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SysTick_Config+0x40>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff2b 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a44:	f7ff ff42 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f7ff ff92 	bl	8001978 <NVIC_EncodePriority>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff61 	bl	8001924 <__NVIC_SetPriority>
}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff35 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffa4 	bl	80019dc <SysTick_Config>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e014      	b.n	8001ada <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	791b      	ldrb	r3, [r3, #4]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d105      	bne.n	8001ac6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f008 fd7d 	bl	800a5c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	795b      	ldrb	r3, [r3, #5]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_DAC_ConfigChannel+0x18>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e11d      	b.n	8001d38 <HAL_DAC_ConfigChannel+0x254>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2201      	movs	r2, #1
 8001b00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2202      	movs	r2, #2
 8001b06:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d174      	bne.n	8001bfa <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001b10:	f7fe fdf0 	bl	80006f4 <HAL_GetTick>
 8001b14:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d134      	bne.n	8001b86 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b1c:	e011      	b.n	8001b42 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b1e:	f7fe fde9 	bl	80006f4 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d90a      	bls.n	8001b42 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f043 0208 	orr.w	r2, r3, #8
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e0fa      	b.n	8001d38 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b48:	4b7d      	ldr	r3, [pc, #500]	; (8001d40 <HAL_DAC_ConfigChannel+0x25c>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1e6      	bne.n	8001b1e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f7fe fddb 	bl	800070c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	6992      	ldr	r2, [r2, #24]
 8001b5e:	641a      	str	r2, [r3, #64]	; 0x40
 8001b60:	e01e      	b.n	8001ba0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b62:	f7fe fdc7 	bl	80006f4 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d90a      	bls.n	8001b86 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	f043 0208 	orr.w	r2, r3, #8
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e0d8      	b.n	8001d38 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	dbe8      	blt.n	8001b62 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f7fe fdbb 	bl	800070c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	6992      	ldr	r2, [r2, #24]
 8001b9e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	f002 0210 	and.w	r2, r2, #16
 8001bb0:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8001bb4:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb8:	43d2      	mvns	r2, r2
 8001bba:	4011      	ands	r1, r2
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	69d0      	ldr	r0, [r2, #28]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	f002 0210 	and.w	r2, r2, #16
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	f002 0210 	and.w	r2, r2, #16
 8001bde:	20ff      	movs	r0, #255	; 0xff
 8001be0:	fa00 f202 	lsl.w	r2, r0, r2
 8001be4:	43d2      	mvns	r2, r2
 8001be6:	4011      	ands	r1, r2
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	6a10      	ldr	r0, [r2, #32]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	f002 0210 	and.w	r2, r2, #16
 8001bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d11d      	bne.n	8001c3e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c08:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	221f      	movs	r2, #31
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c44:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	4013      	ands	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d102      	bne.n	8001c68 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	e00f      	b.n	8001c88 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d102      	bne.n	8001c76 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001c70:	2301      	movs	r3, #1
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	e008      	b.n	8001c88 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	e001      	b.n	8001c88 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	6811      	ldr	r1, [r2, #0]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	f002 0210 	and.w	r2, r2, #16
 8001cc2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	43d2      	mvns	r2, r2
 8001ccc:	400a      	ands	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	4013      	ands	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	6811      	ldr	r1, [r2, #0]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	f002 0210 	and.w	r2, r2, #16
 8001d1e:	20c0      	movs	r0, #192	; 0xc0
 8001d20:	fa00 f202 	lsl.w	r2, r0, r2
 8001d24:	43d2      	mvns	r2, r2
 8001d26:	400a      	ands	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20008000 	.word	0x20008000

08001d44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7fe fcd2 	bl	80006f4 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e316      	b.n	800238a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a66      	ldr	r2, [pc, #408]	; (8001efc <HAL_DMA_Init+0x1b8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d04a      	beq.n	8001dfc <HAL_DMA_Init+0xb8>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a65      	ldr	r2, [pc, #404]	; (8001f00 <HAL_DMA_Init+0x1bc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d045      	beq.n	8001dfc <HAL_DMA_Init+0xb8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a63      	ldr	r2, [pc, #396]	; (8001f04 <HAL_DMA_Init+0x1c0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d040      	beq.n	8001dfc <HAL_DMA_Init+0xb8>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a62      	ldr	r2, [pc, #392]	; (8001f08 <HAL_DMA_Init+0x1c4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d03b      	beq.n	8001dfc <HAL_DMA_Init+0xb8>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a60      	ldr	r2, [pc, #384]	; (8001f0c <HAL_DMA_Init+0x1c8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d036      	beq.n	8001dfc <HAL_DMA_Init+0xb8>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a5f      	ldr	r2, [pc, #380]	; (8001f10 <HAL_DMA_Init+0x1cc>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d031      	beq.n	8001dfc <HAL_DMA_Init+0xb8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a5d      	ldr	r2, [pc, #372]	; (8001f14 <HAL_DMA_Init+0x1d0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d02c      	beq.n	8001dfc <HAL_DMA_Init+0xb8>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a5c      	ldr	r2, [pc, #368]	; (8001f18 <HAL_DMA_Init+0x1d4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d027      	beq.n	8001dfc <HAL_DMA_Init+0xb8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a5a      	ldr	r2, [pc, #360]	; (8001f1c <HAL_DMA_Init+0x1d8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d022      	beq.n	8001dfc <HAL_DMA_Init+0xb8>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a59      	ldr	r2, [pc, #356]	; (8001f20 <HAL_DMA_Init+0x1dc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d01d      	beq.n	8001dfc <HAL_DMA_Init+0xb8>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a57      	ldr	r2, [pc, #348]	; (8001f24 <HAL_DMA_Init+0x1e0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d018      	beq.n	8001dfc <HAL_DMA_Init+0xb8>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a56      	ldr	r2, [pc, #344]	; (8001f28 <HAL_DMA_Init+0x1e4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d013      	beq.n	8001dfc <HAL_DMA_Init+0xb8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a54      	ldr	r2, [pc, #336]	; (8001f2c <HAL_DMA_Init+0x1e8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00e      	beq.n	8001dfc <HAL_DMA_Init+0xb8>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a53      	ldr	r2, [pc, #332]	; (8001f30 <HAL_DMA_Init+0x1ec>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d009      	beq.n	8001dfc <HAL_DMA_Init+0xb8>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a51      	ldr	r2, [pc, #324]	; (8001f34 <HAL_DMA_Init+0x1f0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d004      	beq.n	8001dfc <HAL_DMA_Init+0xb8>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a50      	ldr	r2, [pc, #320]	; (8001f38 <HAL_DMA_Init+0x1f4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d101      	bne.n	8001e00 <HAL_DMA_Init+0xbc>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <HAL_DMA_Init+0xbe>
 8001e00:	2300      	movs	r3, #0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 813b 	beq.w	800207e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a37      	ldr	r2, [pc, #220]	; (8001efc <HAL_DMA_Init+0x1b8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d04a      	beq.n	8001eb8 <HAL_DMA_Init+0x174>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a36      	ldr	r2, [pc, #216]	; (8001f00 <HAL_DMA_Init+0x1bc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d045      	beq.n	8001eb8 <HAL_DMA_Init+0x174>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a34      	ldr	r2, [pc, #208]	; (8001f04 <HAL_DMA_Init+0x1c0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d040      	beq.n	8001eb8 <HAL_DMA_Init+0x174>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a33      	ldr	r2, [pc, #204]	; (8001f08 <HAL_DMA_Init+0x1c4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d03b      	beq.n	8001eb8 <HAL_DMA_Init+0x174>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a31      	ldr	r2, [pc, #196]	; (8001f0c <HAL_DMA_Init+0x1c8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d036      	beq.n	8001eb8 <HAL_DMA_Init+0x174>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a30      	ldr	r2, [pc, #192]	; (8001f10 <HAL_DMA_Init+0x1cc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d031      	beq.n	8001eb8 <HAL_DMA_Init+0x174>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a2e      	ldr	r2, [pc, #184]	; (8001f14 <HAL_DMA_Init+0x1d0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d02c      	beq.n	8001eb8 <HAL_DMA_Init+0x174>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a2d      	ldr	r2, [pc, #180]	; (8001f18 <HAL_DMA_Init+0x1d4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d027      	beq.n	8001eb8 <HAL_DMA_Init+0x174>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a2b      	ldr	r2, [pc, #172]	; (8001f1c <HAL_DMA_Init+0x1d8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d022      	beq.n	8001eb8 <HAL_DMA_Init+0x174>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a2a      	ldr	r2, [pc, #168]	; (8001f20 <HAL_DMA_Init+0x1dc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d01d      	beq.n	8001eb8 <HAL_DMA_Init+0x174>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a28      	ldr	r2, [pc, #160]	; (8001f24 <HAL_DMA_Init+0x1e0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d018      	beq.n	8001eb8 <HAL_DMA_Init+0x174>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a27      	ldr	r2, [pc, #156]	; (8001f28 <HAL_DMA_Init+0x1e4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d013      	beq.n	8001eb8 <HAL_DMA_Init+0x174>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a25      	ldr	r2, [pc, #148]	; (8001f2c <HAL_DMA_Init+0x1e8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00e      	beq.n	8001eb8 <HAL_DMA_Init+0x174>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a24      	ldr	r2, [pc, #144]	; (8001f30 <HAL_DMA_Init+0x1ec>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_DMA_Init+0x174>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a22      	ldr	r2, [pc, #136]	; (8001f34 <HAL_DMA_Init+0x1f0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_DMA_Init+0x174>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a21      	ldr	r2, [pc, #132]	; (8001f38 <HAL_DMA_Init+0x1f4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d108      	bne.n	8001eca <HAL_DMA_Init+0x186>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	e007      	b.n	8001eda <HAL_DMA_Init+0x196>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	f022 0201 	bic.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001eda:	e02f      	b.n	8001f3c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001edc:	f7fe fc0a 	bl	80006f4 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b05      	cmp	r3, #5
 8001ee8:	d928      	bls.n	8001f3c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2220      	movs	r2, #32
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e246      	b.n	800238a <HAL_DMA_Init+0x646>
 8001efc:	40020010 	.word	0x40020010
 8001f00:	40020028 	.word	0x40020028
 8001f04:	40020040 	.word	0x40020040
 8001f08:	40020058 	.word	0x40020058
 8001f0c:	40020070 	.word	0x40020070
 8001f10:	40020088 	.word	0x40020088
 8001f14:	400200a0 	.word	0x400200a0
 8001f18:	400200b8 	.word	0x400200b8
 8001f1c:	40020410 	.word	0x40020410
 8001f20:	40020428 	.word	0x40020428
 8001f24:	40020440 	.word	0x40020440
 8001f28:	40020458 	.word	0x40020458
 8001f2c:	40020470 	.word	0x40020470
 8001f30:	40020488 	.word	0x40020488
 8001f34:	400204a0 	.word	0x400204a0
 8001f38:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1c8      	bne.n	8001edc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4b83      	ldr	r3, [pc, #524]	; (8002164 <HAL_DMA_Init+0x420>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f62:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f7a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d107      	bne.n	8001fa0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001fa0:	4b71      	ldr	r3, [pc, #452]	; (8002168 <HAL_DMA_Init+0x424>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b71      	ldr	r3, [pc, #452]	; (800216c <HAL_DMA_Init+0x428>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fac:	d328      	bcc.n	8002000 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b28      	cmp	r3, #40	; 0x28
 8001fb4:	d903      	bls.n	8001fbe <HAL_DMA_Init+0x27a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b2e      	cmp	r3, #46	; 0x2e
 8001fbc:	d917      	bls.n	8001fee <HAL_DMA_Init+0x2aa>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b3e      	cmp	r3, #62	; 0x3e
 8001fc4:	d903      	bls.n	8001fce <HAL_DMA_Init+0x28a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b42      	cmp	r3, #66	; 0x42
 8001fcc:	d90f      	bls.n	8001fee <HAL_DMA_Init+0x2aa>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b46      	cmp	r3, #70	; 0x46
 8001fd4:	d903      	bls.n	8001fde <HAL_DMA_Init+0x29a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b48      	cmp	r3, #72	; 0x48
 8001fdc:	d907      	bls.n	8001fee <HAL_DMA_Init+0x2aa>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b4e      	cmp	r3, #78	; 0x4e
 8001fe4:	d905      	bls.n	8001ff2 <HAL_DMA_Init+0x2ae>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b52      	cmp	r3, #82	; 0x52
 8001fec:	d801      	bhi.n	8001ff2 <HAL_DMA_Init+0x2ae>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_DMA_Init+0x2b0>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ffe:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f023 0307 	bic.w	r3, r3, #7
 8002016:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	4313      	orrs	r3, r2
 8002020:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	2b04      	cmp	r3, #4
 8002028:	d117      	bne.n	800205a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00e      	beq.n	800205a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f001 ff1b 	bl	8003e78 <DMA_CheckFifoParam>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2240      	movs	r2, #64	; 0x40
 800204c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e197      	b.n	800238a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f001 fe56 	bl	8003d14 <DMA_CalcBaseAndBitshift>
 8002068:	4603      	mov	r3, r0
 800206a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	223f      	movs	r2, #63	; 0x3f
 8002076:	409a      	lsls	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	e0cd      	b.n	800221a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a3b      	ldr	r2, [pc, #236]	; (8002170 <HAL_DMA_Init+0x42c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d022      	beq.n	80020ce <HAL_DMA_Init+0x38a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a39      	ldr	r2, [pc, #228]	; (8002174 <HAL_DMA_Init+0x430>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01d      	beq.n	80020ce <HAL_DMA_Init+0x38a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a38      	ldr	r2, [pc, #224]	; (8002178 <HAL_DMA_Init+0x434>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d018      	beq.n	80020ce <HAL_DMA_Init+0x38a>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a36      	ldr	r2, [pc, #216]	; (800217c <HAL_DMA_Init+0x438>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <HAL_DMA_Init+0x38a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a35      	ldr	r2, [pc, #212]	; (8002180 <HAL_DMA_Init+0x43c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00e      	beq.n	80020ce <HAL_DMA_Init+0x38a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a33      	ldr	r2, [pc, #204]	; (8002184 <HAL_DMA_Init+0x440>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d009      	beq.n	80020ce <HAL_DMA_Init+0x38a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a32      	ldr	r2, [pc, #200]	; (8002188 <HAL_DMA_Init+0x444>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d004      	beq.n	80020ce <HAL_DMA_Init+0x38a>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a30      	ldr	r2, [pc, #192]	; (800218c <HAL_DMA_Init+0x448>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d101      	bne.n	80020d2 <HAL_DMA_Init+0x38e>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <HAL_DMA_Init+0x390>
 80020d2:	2300      	movs	r3, #0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 8097 	beq.w	8002208 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a24      	ldr	r2, [pc, #144]	; (8002170 <HAL_DMA_Init+0x42c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d021      	beq.n	8002128 <HAL_DMA_Init+0x3e4>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a22      	ldr	r2, [pc, #136]	; (8002174 <HAL_DMA_Init+0x430>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d01c      	beq.n	8002128 <HAL_DMA_Init+0x3e4>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a21      	ldr	r2, [pc, #132]	; (8002178 <HAL_DMA_Init+0x434>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d017      	beq.n	8002128 <HAL_DMA_Init+0x3e4>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1f      	ldr	r2, [pc, #124]	; (800217c <HAL_DMA_Init+0x438>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d012      	beq.n	8002128 <HAL_DMA_Init+0x3e4>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <HAL_DMA_Init+0x43c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00d      	beq.n	8002128 <HAL_DMA_Init+0x3e4>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <HAL_DMA_Init+0x440>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d008      	beq.n	8002128 <HAL_DMA_Init+0x3e4>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1b      	ldr	r2, [pc, #108]	; (8002188 <HAL_DMA_Init+0x444>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d003      	beq.n	8002128 <HAL_DMA_Init+0x3e4>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a19      	ldr	r2, [pc, #100]	; (800218c <HAL_DMA_Init+0x448>)
 8002126:	4293      	cmp	r3, r2
 8002128:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_DMA_Init+0x44c>)
 8002146:	4013      	ands	r3, r2
 8002148:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b40      	cmp	r3, #64	; 0x40
 8002150:	d020      	beq.n	8002194 <HAL_DMA_Init+0x450>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b80      	cmp	r3, #128	; 0x80
 8002158:	d102      	bne.n	8002160 <HAL_DMA_Init+0x41c>
 800215a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800215e:	e01a      	b.n	8002196 <HAL_DMA_Init+0x452>
 8002160:	2300      	movs	r3, #0
 8002162:	e018      	b.n	8002196 <HAL_DMA_Init+0x452>
 8002164:	fe10803f 	.word	0xfe10803f
 8002168:	5c001000 	.word	0x5c001000
 800216c:	ffff0000 	.word	0xffff0000
 8002170:	58025408 	.word	0x58025408
 8002174:	5802541c 	.word	0x5802541c
 8002178:	58025430 	.word	0x58025430
 800217c:	58025444 	.word	0x58025444
 8002180:	58025458 	.word	0x58025458
 8002184:	5802546c 	.word	0x5802546c
 8002188:	58025480 	.word	0x58025480
 800218c:	58025494 	.word	0x58025494
 8002190:	fffe000f 	.word	0xfffe000f
 8002194:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68d2      	ldr	r2, [r2, #12]
 800219a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800219c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80021a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80021ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80021b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80021c4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b6e      	ldr	r3, [pc, #440]	; (8002394 <HAL_DMA_Init+0x650>)
 80021dc:	4413      	add	r3, r2
 80021de:	4a6e      	ldr	r2, [pc, #440]	; (8002398 <HAL_DMA_Init+0x654>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	009a      	lsls	r2, r3, #2
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f001 fd91 	bl	8003d14 <DMA_CalcBaseAndBitshift>
 80021f2:	4603      	mov	r3, r0
 80021f4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	2201      	movs	r2, #1
 8002200:	409a      	lsls	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	e008      	b.n	800221a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2240      	movs	r2, #64	; 0x40
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2203      	movs	r2, #3
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0b7      	b.n	800238a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a5f      	ldr	r2, [pc, #380]	; (800239c <HAL_DMA_Init+0x658>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d072      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a5d      	ldr	r2, [pc, #372]	; (80023a0 <HAL_DMA_Init+0x65c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d06d      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a5c      	ldr	r2, [pc, #368]	; (80023a4 <HAL_DMA_Init+0x660>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d068      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a5a      	ldr	r2, [pc, #360]	; (80023a8 <HAL_DMA_Init+0x664>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d063      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a59      	ldr	r2, [pc, #356]	; (80023ac <HAL_DMA_Init+0x668>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d05e      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a57      	ldr	r2, [pc, #348]	; (80023b0 <HAL_DMA_Init+0x66c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d059      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a56      	ldr	r2, [pc, #344]	; (80023b4 <HAL_DMA_Init+0x670>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d054      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a54      	ldr	r2, [pc, #336]	; (80023b8 <HAL_DMA_Init+0x674>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d04f      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a53      	ldr	r2, [pc, #332]	; (80023bc <HAL_DMA_Init+0x678>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d04a      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a51      	ldr	r2, [pc, #324]	; (80023c0 <HAL_DMA_Init+0x67c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d045      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a50      	ldr	r2, [pc, #320]	; (80023c4 <HAL_DMA_Init+0x680>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d040      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a4e      	ldr	r2, [pc, #312]	; (80023c8 <HAL_DMA_Init+0x684>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d03b      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a4d      	ldr	r2, [pc, #308]	; (80023cc <HAL_DMA_Init+0x688>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d036      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a4b      	ldr	r2, [pc, #300]	; (80023d0 <HAL_DMA_Init+0x68c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d031      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a4a      	ldr	r2, [pc, #296]	; (80023d4 <HAL_DMA_Init+0x690>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d02c      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a48      	ldr	r2, [pc, #288]	; (80023d8 <HAL_DMA_Init+0x694>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d027      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a47      	ldr	r2, [pc, #284]	; (80023dc <HAL_DMA_Init+0x698>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d022      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a45      	ldr	r2, [pc, #276]	; (80023e0 <HAL_DMA_Init+0x69c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01d      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a44      	ldr	r2, [pc, #272]	; (80023e4 <HAL_DMA_Init+0x6a0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d018      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a42      	ldr	r2, [pc, #264]	; (80023e8 <HAL_DMA_Init+0x6a4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a41      	ldr	r2, [pc, #260]	; (80023ec <HAL_DMA_Init+0x6a8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d00e      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a3f      	ldr	r2, [pc, #252]	; (80023f0 <HAL_DMA_Init+0x6ac>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d009      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a3e      	ldr	r2, [pc, #248]	; (80023f4 <HAL_DMA_Init+0x6b0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d004      	beq.n	800230a <HAL_DMA_Init+0x5c6>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a3c      	ldr	r2, [pc, #240]	; (80023f8 <HAL_DMA_Init+0x6b4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d101      	bne.n	800230e <HAL_DMA_Init+0x5ca>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_DMA_Init+0x5cc>
 800230e:	2300      	movs	r3, #0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d032      	beq.n	800237a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f001 fe2b 	bl	8003f70 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b80      	cmp	r3, #128	; 0x80
 8002320:	d102      	bne.n	8002328 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6852      	ldr	r2, [r2, #4]
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800233c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d010      	beq.n	8002368 <HAL_DMA_Init+0x624>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b08      	cmp	r3, #8
 800234c:	d80c      	bhi.n	8002368 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f001 fea8 	bl	80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	e008      	b.n	800237a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	a7fdabf8 	.word	0xa7fdabf8
 8002398:	cccccccd 	.word	0xcccccccd
 800239c:	40020010 	.word	0x40020010
 80023a0:	40020028 	.word	0x40020028
 80023a4:	40020040 	.word	0x40020040
 80023a8:	40020058 	.word	0x40020058
 80023ac:	40020070 	.word	0x40020070
 80023b0:	40020088 	.word	0x40020088
 80023b4:	400200a0 	.word	0x400200a0
 80023b8:	400200b8 	.word	0x400200b8
 80023bc:	40020410 	.word	0x40020410
 80023c0:	40020428 	.word	0x40020428
 80023c4:	40020440 	.word	0x40020440
 80023c8:	40020458 	.word	0x40020458
 80023cc:	40020470 	.word	0x40020470
 80023d0:	40020488 	.word	0x40020488
 80023d4:	400204a0 	.word	0x400204a0
 80023d8:	400204b8 	.word	0x400204b8
 80023dc:	58025408 	.word	0x58025408
 80023e0:	5802541c 	.word	0x5802541c
 80023e4:	58025430 	.word	0x58025430
 80023e8:	58025444 	.word	0x58025444
 80023ec:	58025458 	.word	0x58025458
 80023f0:	5802546c 	.word	0x5802546c
 80023f4:	58025480 	.word	0x58025480
 80023f8:	58025494 	.word	0x58025494

080023fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002404:	f7fe f976 	bl	80006f4 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e2dc      	b.n	80029ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d008      	beq.n	8002432 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2280      	movs	r2, #128	; 0x80
 8002424:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e2cd      	b.n	80029ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a76      	ldr	r2, [pc, #472]	; (8002610 <HAL_DMA_Abort+0x214>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d04a      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a74      	ldr	r2, [pc, #464]	; (8002614 <HAL_DMA_Abort+0x218>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d045      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a73      	ldr	r2, [pc, #460]	; (8002618 <HAL_DMA_Abort+0x21c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d040      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a71      	ldr	r2, [pc, #452]	; (800261c <HAL_DMA_Abort+0x220>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d03b      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a70      	ldr	r2, [pc, #448]	; (8002620 <HAL_DMA_Abort+0x224>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d036      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a6e      	ldr	r2, [pc, #440]	; (8002624 <HAL_DMA_Abort+0x228>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d031      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a6d      	ldr	r2, [pc, #436]	; (8002628 <HAL_DMA_Abort+0x22c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d02c      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a6b      	ldr	r2, [pc, #428]	; (800262c <HAL_DMA_Abort+0x230>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d027      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6a      	ldr	r2, [pc, #424]	; (8002630 <HAL_DMA_Abort+0x234>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d022      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a68      	ldr	r2, [pc, #416]	; (8002634 <HAL_DMA_Abort+0x238>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01d      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a67      	ldr	r2, [pc, #412]	; (8002638 <HAL_DMA_Abort+0x23c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d018      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a65      	ldr	r2, [pc, #404]	; (800263c <HAL_DMA_Abort+0x240>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a64      	ldr	r2, [pc, #400]	; (8002640 <HAL_DMA_Abort+0x244>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d00e      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a62      	ldr	r2, [pc, #392]	; (8002644 <HAL_DMA_Abort+0x248>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a61      	ldr	r2, [pc, #388]	; (8002648 <HAL_DMA_Abort+0x24c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d004      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a5f      	ldr	r2, [pc, #380]	; (800264c <HAL_DMA_Abort+0x250>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_DMA_Abort+0xda>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <HAL_DMA_Abort+0xdc>
 80024d6:	2300      	movs	r3, #0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	f022 021e 	bic.w	r2, r2, #30
 80024ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	6952      	ldr	r2, [r2, #20]
 80024f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e00a      	b.n	800251a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	f022 020e 	bic.w	r2, r2, #14
 8002512:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a3c      	ldr	r2, [pc, #240]	; (8002610 <HAL_DMA_Abort+0x214>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d072      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a3a      	ldr	r2, [pc, #232]	; (8002614 <HAL_DMA_Abort+0x218>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d06d      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a39      	ldr	r2, [pc, #228]	; (8002618 <HAL_DMA_Abort+0x21c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d068      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a37      	ldr	r2, [pc, #220]	; (800261c <HAL_DMA_Abort+0x220>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d063      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a36      	ldr	r2, [pc, #216]	; (8002620 <HAL_DMA_Abort+0x224>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d05e      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a34      	ldr	r2, [pc, #208]	; (8002624 <HAL_DMA_Abort+0x228>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d059      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a33      	ldr	r2, [pc, #204]	; (8002628 <HAL_DMA_Abort+0x22c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d054      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a31      	ldr	r2, [pc, #196]	; (800262c <HAL_DMA_Abort+0x230>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d04f      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a30      	ldr	r2, [pc, #192]	; (8002630 <HAL_DMA_Abort+0x234>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d04a      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a2e      	ldr	r2, [pc, #184]	; (8002634 <HAL_DMA_Abort+0x238>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d045      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a2d      	ldr	r2, [pc, #180]	; (8002638 <HAL_DMA_Abort+0x23c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d040      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a2b      	ldr	r2, [pc, #172]	; (800263c <HAL_DMA_Abort+0x240>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d03b      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a2a      	ldr	r2, [pc, #168]	; (8002640 <HAL_DMA_Abort+0x244>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d036      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a28      	ldr	r2, [pc, #160]	; (8002644 <HAL_DMA_Abort+0x248>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d031      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a27      	ldr	r2, [pc, #156]	; (8002648 <HAL_DMA_Abort+0x24c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d02c      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a25      	ldr	r2, [pc, #148]	; (800264c <HAL_DMA_Abort+0x250>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d027      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a24      	ldr	r2, [pc, #144]	; (8002650 <HAL_DMA_Abort+0x254>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a22      	ldr	r2, [pc, #136]	; (8002654 <HAL_DMA_Abort+0x258>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01d      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a21      	ldr	r2, [pc, #132]	; (8002658 <HAL_DMA_Abort+0x25c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d018      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1f      	ldr	r2, [pc, #124]	; (800265c <HAL_DMA_Abort+0x260>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1e      	ldr	r2, [pc, #120]	; (8002660 <HAL_DMA_Abort+0x264>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00e      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1c      	ldr	r2, [pc, #112]	; (8002664 <HAL_DMA_Abort+0x268>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d009      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1b      	ldr	r2, [pc, #108]	; (8002668 <HAL_DMA_Abort+0x26c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d004      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a19      	ldr	r2, [pc, #100]	; (800266c <HAL_DMA_Abort+0x270>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d132      	bne.n	8002670 <HAL_DMA_Abort+0x274>
 800260a:	2301      	movs	r3, #1
 800260c:	e031      	b.n	8002672 <HAL_DMA_Abort+0x276>
 800260e:	bf00      	nop
 8002610:	40020010 	.word	0x40020010
 8002614:	40020028 	.word	0x40020028
 8002618:	40020040 	.word	0x40020040
 800261c:	40020058 	.word	0x40020058
 8002620:	40020070 	.word	0x40020070
 8002624:	40020088 	.word	0x40020088
 8002628:	400200a0 	.word	0x400200a0
 800262c:	400200b8 	.word	0x400200b8
 8002630:	40020410 	.word	0x40020410
 8002634:	40020428 	.word	0x40020428
 8002638:	40020440 	.word	0x40020440
 800263c:	40020458 	.word	0x40020458
 8002640:	40020470 	.word	0x40020470
 8002644:	40020488 	.word	0x40020488
 8002648:	400204a0 	.word	0x400204a0
 800264c:	400204b8 	.word	0x400204b8
 8002650:	58025408 	.word	0x58025408
 8002654:	5802541c 	.word	0x5802541c
 8002658:	58025430 	.word	0x58025430
 800265c:	58025444 	.word	0x58025444
 8002660:	58025458 	.word	0x58025458
 8002664:	5802546c 	.word	0x5802546c
 8002668:	58025480 	.word	0x58025480
 800266c:	58025494 	.word	0x58025494
 8002670:	2300      	movs	r3, #0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002684:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a6d      	ldr	r2, [pc, #436]	; (8002840 <HAL_DMA_Abort+0x444>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d04a      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a6b      	ldr	r2, [pc, #428]	; (8002844 <HAL_DMA_Abort+0x448>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d045      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6a      	ldr	r2, [pc, #424]	; (8002848 <HAL_DMA_Abort+0x44c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d040      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a68      	ldr	r2, [pc, #416]	; (800284c <HAL_DMA_Abort+0x450>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d03b      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a67      	ldr	r2, [pc, #412]	; (8002850 <HAL_DMA_Abort+0x454>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d036      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a65      	ldr	r2, [pc, #404]	; (8002854 <HAL_DMA_Abort+0x458>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d031      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a64      	ldr	r2, [pc, #400]	; (8002858 <HAL_DMA_Abort+0x45c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d02c      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a62      	ldr	r2, [pc, #392]	; (800285c <HAL_DMA_Abort+0x460>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d027      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a61      	ldr	r2, [pc, #388]	; (8002860 <HAL_DMA_Abort+0x464>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d022      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a5f      	ldr	r2, [pc, #380]	; (8002864 <HAL_DMA_Abort+0x468>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01d      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a5e      	ldr	r2, [pc, #376]	; (8002868 <HAL_DMA_Abort+0x46c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d018      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a5c      	ldr	r2, [pc, #368]	; (800286c <HAL_DMA_Abort+0x470>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a5b      	ldr	r2, [pc, #364]	; (8002870 <HAL_DMA_Abort+0x474>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d00e      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a59      	ldr	r2, [pc, #356]	; (8002874 <HAL_DMA_Abort+0x478>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d009      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a58      	ldr	r2, [pc, #352]	; (8002878 <HAL_DMA_Abort+0x47c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d004      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a56      	ldr	r2, [pc, #344]	; (800287c <HAL_DMA_Abort+0x480>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d108      	bne.n	8002738 <HAL_DMA_Abort+0x33c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	f022 0201 	bic.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e007      	b.n	8002748 <HAL_DMA_Abort+0x34c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002748:	e013      	b.n	8002772 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800274a:	f7fd ffd3 	bl	80006f4 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b05      	cmp	r3, #5
 8002756:	d90c      	bls.n	8002772 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2220      	movs	r2, #32
 800275c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2203      	movs	r2, #3
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e12d      	b.n	80029ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1e5      	bne.n	800274a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2f      	ldr	r2, [pc, #188]	; (8002840 <HAL_DMA_Abort+0x444>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d04a      	beq.n	800281e <HAL_DMA_Abort+0x422>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a2d      	ldr	r2, [pc, #180]	; (8002844 <HAL_DMA_Abort+0x448>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d045      	beq.n	800281e <HAL_DMA_Abort+0x422>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a2c      	ldr	r2, [pc, #176]	; (8002848 <HAL_DMA_Abort+0x44c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d040      	beq.n	800281e <HAL_DMA_Abort+0x422>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a2a      	ldr	r2, [pc, #168]	; (800284c <HAL_DMA_Abort+0x450>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d03b      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a29      	ldr	r2, [pc, #164]	; (8002850 <HAL_DMA_Abort+0x454>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d036      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a27      	ldr	r2, [pc, #156]	; (8002854 <HAL_DMA_Abort+0x458>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d031      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a26      	ldr	r2, [pc, #152]	; (8002858 <HAL_DMA_Abort+0x45c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d02c      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a24      	ldr	r2, [pc, #144]	; (800285c <HAL_DMA_Abort+0x460>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d027      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a23      	ldr	r2, [pc, #140]	; (8002860 <HAL_DMA_Abort+0x464>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d022      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a21      	ldr	r2, [pc, #132]	; (8002864 <HAL_DMA_Abort+0x468>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d01d      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a20      	ldr	r2, [pc, #128]	; (8002868 <HAL_DMA_Abort+0x46c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d018      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1e      	ldr	r2, [pc, #120]	; (800286c <HAL_DMA_Abort+0x470>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_DMA_Abort+0x474>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00e      	beq.n	800281e <HAL_DMA_Abort+0x422>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1b      	ldr	r2, [pc, #108]	; (8002874 <HAL_DMA_Abort+0x478>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d009      	beq.n	800281e <HAL_DMA_Abort+0x422>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1a      	ldr	r2, [pc, #104]	; (8002878 <HAL_DMA_Abort+0x47c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d004      	beq.n	800281e <HAL_DMA_Abort+0x422>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a18      	ldr	r2, [pc, #96]	; (800287c <HAL_DMA_Abort+0x480>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_DMA_Abort+0x426>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_DMA_Abort+0x428>
 8002822:	2300      	movs	r3, #0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d02b      	beq.n	8002880 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	60fb      	str	r3, [r7, #12]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	223f      	movs	r2, #63	; 0x3f
 8002838:	409a      	lsls	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	e02a      	b.n	8002896 <HAL_DMA_Abort+0x49a>
 8002840:	40020010 	.word	0x40020010
 8002844:	40020028 	.word	0x40020028
 8002848:	40020040 	.word	0x40020040
 800284c:	40020058 	.word	0x40020058
 8002850:	40020070 	.word	0x40020070
 8002854:	40020088 	.word	0x40020088
 8002858:	400200a0 	.word	0x400200a0
 800285c:	400200b8 	.word	0x400200b8
 8002860:	40020410 	.word	0x40020410
 8002864:	40020428 	.word	0x40020428
 8002868:	40020440 	.word	0x40020440
 800286c:	40020458 	.word	0x40020458
 8002870:	40020470 	.word	0x40020470
 8002874:	40020488 	.word	0x40020488
 8002878:	400204a0 	.word	0x400204a0
 800287c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	60bb      	str	r3, [r7, #8]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	2201      	movs	r2, #1
 8002890:	409a      	lsls	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a4f      	ldr	r2, [pc, #316]	; (80029d8 <HAL_DMA_Abort+0x5dc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d072      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a4d      	ldr	r2, [pc, #308]	; (80029dc <HAL_DMA_Abort+0x5e0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d06d      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a4c      	ldr	r2, [pc, #304]	; (80029e0 <HAL_DMA_Abort+0x5e4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d068      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a4a      	ldr	r2, [pc, #296]	; (80029e4 <HAL_DMA_Abort+0x5e8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d063      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a49      	ldr	r2, [pc, #292]	; (80029e8 <HAL_DMA_Abort+0x5ec>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d05e      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a47      	ldr	r2, [pc, #284]	; (80029ec <HAL_DMA_Abort+0x5f0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d059      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a46      	ldr	r2, [pc, #280]	; (80029f0 <HAL_DMA_Abort+0x5f4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d054      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a44      	ldr	r2, [pc, #272]	; (80029f4 <HAL_DMA_Abort+0x5f8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d04f      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a43      	ldr	r2, [pc, #268]	; (80029f8 <HAL_DMA_Abort+0x5fc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d04a      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a41      	ldr	r2, [pc, #260]	; (80029fc <HAL_DMA_Abort+0x600>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d045      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a40      	ldr	r2, [pc, #256]	; (8002a00 <HAL_DMA_Abort+0x604>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d040      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a3e      	ldr	r2, [pc, #248]	; (8002a04 <HAL_DMA_Abort+0x608>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d03b      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a3d      	ldr	r2, [pc, #244]	; (8002a08 <HAL_DMA_Abort+0x60c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d036      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a3b      	ldr	r2, [pc, #236]	; (8002a0c <HAL_DMA_Abort+0x610>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d031      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a3a      	ldr	r2, [pc, #232]	; (8002a10 <HAL_DMA_Abort+0x614>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d02c      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a38      	ldr	r2, [pc, #224]	; (8002a14 <HAL_DMA_Abort+0x618>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d027      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a37      	ldr	r2, [pc, #220]	; (8002a18 <HAL_DMA_Abort+0x61c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d022      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a35      	ldr	r2, [pc, #212]	; (8002a1c <HAL_DMA_Abort+0x620>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d01d      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a34      	ldr	r2, [pc, #208]	; (8002a20 <HAL_DMA_Abort+0x624>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d018      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a32      	ldr	r2, [pc, #200]	; (8002a24 <HAL_DMA_Abort+0x628>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d013      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a31      	ldr	r2, [pc, #196]	; (8002a28 <HAL_DMA_Abort+0x62c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00e      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a2f      	ldr	r2, [pc, #188]	; (8002a2c <HAL_DMA_Abort+0x630>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d009      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2e      	ldr	r2, [pc, #184]	; (8002a30 <HAL_DMA_Abort+0x634>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d004      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a2c      	ldr	r2, [pc, #176]	; (8002a34 <HAL_DMA_Abort+0x638>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d101      	bne.n	800298a <HAL_DMA_Abort+0x58e>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <HAL_DMA_Abort+0x590>
 800298a:	2300      	movs	r3, #0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d015      	beq.n	80029bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002998:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00c      	beq.n	80029bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80029ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40020010 	.word	0x40020010
 80029dc:	40020028 	.word	0x40020028
 80029e0:	40020040 	.word	0x40020040
 80029e4:	40020058 	.word	0x40020058
 80029e8:	40020070 	.word	0x40020070
 80029ec:	40020088 	.word	0x40020088
 80029f0:	400200a0 	.word	0x400200a0
 80029f4:	400200b8 	.word	0x400200b8
 80029f8:	40020410 	.word	0x40020410
 80029fc:	40020428 	.word	0x40020428
 8002a00:	40020440 	.word	0x40020440
 8002a04:	40020458 	.word	0x40020458
 8002a08:	40020470 	.word	0x40020470
 8002a0c:	40020488 	.word	0x40020488
 8002a10:	400204a0 	.word	0x400204a0
 8002a14:	400204b8 	.word	0x400204b8
 8002a18:	58025408 	.word	0x58025408
 8002a1c:	5802541c 	.word	0x5802541c
 8002a20:	58025430 	.word	0x58025430
 8002a24:	58025444 	.word	0x58025444
 8002a28:	58025458 	.word	0x58025458
 8002a2c:	5802546c 	.word	0x5802546c
 8002a30:	58025480 	.word	0x58025480
 8002a34:	58025494 	.word	0x58025494

08002a38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e205      	b.n	8002e56 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d004      	beq.n	8002a60 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e1fa      	b.n	8002e56 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a8c      	ldr	r2, [pc, #560]	; (8002c98 <HAL_DMA_Abort_IT+0x260>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d04a      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a8b      	ldr	r2, [pc, #556]	; (8002c9c <HAL_DMA_Abort_IT+0x264>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d045      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a89      	ldr	r2, [pc, #548]	; (8002ca0 <HAL_DMA_Abort_IT+0x268>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d040      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a88      	ldr	r2, [pc, #544]	; (8002ca4 <HAL_DMA_Abort_IT+0x26c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d03b      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a86      	ldr	r2, [pc, #536]	; (8002ca8 <HAL_DMA_Abort_IT+0x270>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d036      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a85      	ldr	r2, [pc, #532]	; (8002cac <HAL_DMA_Abort_IT+0x274>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d031      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a83      	ldr	r2, [pc, #524]	; (8002cb0 <HAL_DMA_Abort_IT+0x278>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d02c      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a82      	ldr	r2, [pc, #520]	; (8002cb4 <HAL_DMA_Abort_IT+0x27c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d027      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a80      	ldr	r2, [pc, #512]	; (8002cb8 <HAL_DMA_Abort_IT+0x280>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d022      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a7f      	ldr	r2, [pc, #508]	; (8002cbc <HAL_DMA_Abort_IT+0x284>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d01d      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a7d      	ldr	r2, [pc, #500]	; (8002cc0 <HAL_DMA_Abort_IT+0x288>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d018      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a7c      	ldr	r2, [pc, #496]	; (8002cc4 <HAL_DMA_Abort_IT+0x28c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d013      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a7a      	ldr	r2, [pc, #488]	; (8002cc8 <HAL_DMA_Abort_IT+0x290>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00e      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a79      	ldr	r2, [pc, #484]	; (8002ccc <HAL_DMA_Abort_IT+0x294>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d009      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a77      	ldr	r2, [pc, #476]	; (8002cd0 <HAL_DMA_Abort_IT+0x298>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a76      	ldr	r2, [pc, #472]	; (8002cd4 <HAL_DMA_Abort_IT+0x29c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d101      	bne.n	8002b04 <HAL_DMA_Abort_IT+0xcc>
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <HAL_DMA_Abort_IT+0xce>
 8002b04:	2300      	movs	r3, #0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d065      	beq.n	8002bd6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a60      	ldr	r2, [pc, #384]	; (8002c98 <HAL_DMA_Abort_IT+0x260>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d04a      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x17a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a5e      	ldr	r2, [pc, #376]	; (8002c9c <HAL_DMA_Abort_IT+0x264>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d045      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x17a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a5d      	ldr	r2, [pc, #372]	; (8002ca0 <HAL_DMA_Abort_IT+0x268>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d040      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x17a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a5b      	ldr	r2, [pc, #364]	; (8002ca4 <HAL_DMA_Abort_IT+0x26c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d03b      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x17a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a5a      	ldr	r2, [pc, #360]	; (8002ca8 <HAL_DMA_Abort_IT+0x270>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d036      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x17a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a58      	ldr	r2, [pc, #352]	; (8002cac <HAL_DMA_Abort_IT+0x274>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d031      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x17a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a57      	ldr	r2, [pc, #348]	; (8002cb0 <HAL_DMA_Abort_IT+0x278>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d02c      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x17a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a55      	ldr	r2, [pc, #340]	; (8002cb4 <HAL_DMA_Abort_IT+0x27c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d027      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x17a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a54      	ldr	r2, [pc, #336]	; (8002cb8 <HAL_DMA_Abort_IT+0x280>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d022      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x17a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <HAL_DMA_Abort_IT+0x284>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d01d      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x17a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a51      	ldr	r2, [pc, #324]	; (8002cc0 <HAL_DMA_Abort_IT+0x288>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d018      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x17a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a4f      	ldr	r2, [pc, #316]	; (8002cc4 <HAL_DMA_Abort_IT+0x28c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x17a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a4e      	ldr	r2, [pc, #312]	; (8002cc8 <HAL_DMA_Abort_IT+0x290>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00e      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x17a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a4c      	ldr	r2, [pc, #304]	; (8002ccc <HAL_DMA_Abort_IT+0x294>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d009      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x17a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a4b      	ldr	r2, [pc, #300]	; (8002cd0 <HAL_DMA_Abort_IT+0x298>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d004      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0x17a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a49      	ldr	r2, [pc, #292]	; (8002cd4 <HAL_DMA_Abort_IT+0x29c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d108      	bne.n	8002bc4 <HAL_DMA_Abort_IT+0x18c>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	f022 0201 	bic.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e147      	b.n	8002e54 <HAL_DMA_Abort_IT+0x41c>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e13e      	b.n	8002e54 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	f022 020e 	bic.w	r2, r2, #14
 8002be4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2b      	ldr	r2, [pc, #172]	; (8002c98 <HAL_DMA_Abort_IT+0x260>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d04a      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x24e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a29      	ldr	r2, [pc, #164]	; (8002c9c <HAL_DMA_Abort_IT+0x264>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d045      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x24e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a28      	ldr	r2, [pc, #160]	; (8002ca0 <HAL_DMA_Abort_IT+0x268>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d040      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x24e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a26      	ldr	r2, [pc, #152]	; (8002ca4 <HAL_DMA_Abort_IT+0x26c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d03b      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x24e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a25      	ldr	r2, [pc, #148]	; (8002ca8 <HAL_DMA_Abort_IT+0x270>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d036      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x24e>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a23      	ldr	r2, [pc, #140]	; (8002cac <HAL_DMA_Abort_IT+0x274>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d031      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x24e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a22      	ldr	r2, [pc, #136]	; (8002cb0 <HAL_DMA_Abort_IT+0x278>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d02c      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x24e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a20      	ldr	r2, [pc, #128]	; (8002cb4 <HAL_DMA_Abort_IT+0x27c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d027      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x24e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1f      	ldr	r2, [pc, #124]	; (8002cb8 <HAL_DMA_Abort_IT+0x280>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d022      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x24e>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <HAL_DMA_Abort_IT+0x284>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01d      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x24e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <HAL_DMA_Abort_IT+0x288>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d018      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x24e>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1a      	ldr	r2, [pc, #104]	; (8002cc4 <HAL_DMA_Abort_IT+0x28c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x24e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a19      	ldr	r2, [pc, #100]	; (8002cc8 <HAL_DMA_Abort_IT+0x290>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00e      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x24e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a17      	ldr	r2, [pc, #92]	; (8002ccc <HAL_DMA_Abort_IT+0x294>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d009      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x24e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a16      	ldr	r2, [pc, #88]	; (8002cd0 <HAL_DMA_Abort_IT+0x298>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d004      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x24e>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a14      	ldr	r2, [pc, #80]	; (8002cd4 <HAL_DMA_Abort_IT+0x29c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d128      	bne.n	8002cd8 <HAL_DMA_Abort_IT+0x2a0>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	f022 0201 	bic.w	r2, r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	e027      	b.n	8002ce8 <HAL_DMA_Abort_IT+0x2b0>
 8002c98:	40020010 	.word	0x40020010
 8002c9c:	40020028 	.word	0x40020028
 8002ca0:	40020040 	.word	0x40020040
 8002ca4:	40020058 	.word	0x40020058
 8002ca8:	40020070 	.word	0x40020070
 8002cac:	40020088 	.word	0x40020088
 8002cb0:	400200a0 	.word	0x400200a0
 8002cb4:	400200b8 	.word	0x400200b8
 8002cb8:	40020410 	.word	0x40020410
 8002cbc:	40020428 	.word	0x40020428
 8002cc0:	40020440 	.word	0x40020440
 8002cc4:	40020458 	.word	0x40020458
 8002cc8:	40020470 	.word	0x40020470
 8002ccc:	40020488 	.word	0x40020488
 8002cd0:	400204a0 	.word	0x400204a0
 8002cd4:	400204b8 	.word	0x400204b8
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a5c      	ldr	r2, [pc, #368]	; (8002e60 <HAL_DMA_Abort_IT+0x428>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d072      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a5b      	ldr	r2, [pc, #364]	; (8002e64 <HAL_DMA_Abort_IT+0x42c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d06d      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a59      	ldr	r2, [pc, #356]	; (8002e68 <HAL_DMA_Abort_IT+0x430>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d068      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <HAL_DMA_Abort_IT+0x434>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d063      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a56      	ldr	r2, [pc, #344]	; (8002e70 <HAL_DMA_Abort_IT+0x438>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d05e      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a55      	ldr	r2, [pc, #340]	; (8002e74 <HAL_DMA_Abort_IT+0x43c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d059      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a53      	ldr	r2, [pc, #332]	; (8002e78 <HAL_DMA_Abort_IT+0x440>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d054      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a52      	ldr	r2, [pc, #328]	; (8002e7c <HAL_DMA_Abort_IT+0x444>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d04f      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a50      	ldr	r2, [pc, #320]	; (8002e80 <HAL_DMA_Abort_IT+0x448>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d04a      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a4f      	ldr	r2, [pc, #316]	; (8002e84 <HAL_DMA_Abort_IT+0x44c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d045      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a4d      	ldr	r2, [pc, #308]	; (8002e88 <HAL_DMA_Abort_IT+0x450>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d040      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a4c      	ldr	r2, [pc, #304]	; (8002e8c <HAL_DMA_Abort_IT+0x454>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d03b      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a4a      	ldr	r2, [pc, #296]	; (8002e90 <HAL_DMA_Abort_IT+0x458>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d036      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a49      	ldr	r2, [pc, #292]	; (8002e94 <HAL_DMA_Abort_IT+0x45c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d031      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a47      	ldr	r2, [pc, #284]	; (8002e98 <HAL_DMA_Abort_IT+0x460>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d02c      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a46      	ldr	r2, [pc, #280]	; (8002e9c <HAL_DMA_Abort_IT+0x464>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d027      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a44      	ldr	r2, [pc, #272]	; (8002ea0 <HAL_DMA_Abort_IT+0x468>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d022      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a43      	ldr	r2, [pc, #268]	; (8002ea4 <HAL_DMA_Abort_IT+0x46c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d01d      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a41      	ldr	r2, [pc, #260]	; (8002ea8 <HAL_DMA_Abort_IT+0x470>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d018      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a40      	ldr	r2, [pc, #256]	; (8002eac <HAL_DMA_Abort_IT+0x474>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d013      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a3e      	ldr	r2, [pc, #248]	; (8002eb0 <HAL_DMA_Abort_IT+0x478>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00e      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a3d      	ldr	r2, [pc, #244]	; (8002eb4 <HAL_DMA_Abort_IT+0x47c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d009      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a3b      	ldr	r2, [pc, #236]	; (8002eb8 <HAL_DMA_Abort_IT+0x480>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d004      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x3a0>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a3a      	ldr	r2, [pc, #232]	; (8002ebc <HAL_DMA_Abort_IT+0x484>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d101      	bne.n	8002ddc <HAL_DMA_Abort_IT+0x3a4>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <HAL_DMA_Abort_IT+0x3a6>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d028      	beq.n	8002e34 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002df0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	2201      	movs	r2, #1
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e10:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00c      	beq.n	8002e34 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e28:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e32:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40020010 	.word	0x40020010
 8002e64:	40020028 	.word	0x40020028
 8002e68:	40020040 	.word	0x40020040
 8002e6c:	40020058 	.word	0x40020058
 8002e70:	40020070 	.word	0x40020070
 8002e74:	40020088 	.word	0x40020088
 8002e78:	400200a0 	.word	0x400200a0
 8002e7c:	400200b8 	.word	0x400200b8
 8002e80:	40020410 	.word	0x40020410
 8002e84:	40020428 	.word	0x40020428
 8002e88:	40020440 	.word	0x40020440
 8002e8c:	40020458 	.word	0x40020458
 8002e90:	40020470 	.word	0x40020470
 8002e94:	40020488 	.word	0x40020488
 8002e98:	400204a0 	.word	0x400204a0
 8002e9c:	400204b8 	.word	0x400204b8
 8002ea0:	58025408 	.word	0x58025408
 8002ea4:	5802541c 	.word	0x5802541c
 8002ea8:	58025430 	.word	0x58025430
 8002eac:	58025444 	.word	0x58025444
 8002eb0:	58025458 	.word	0x58025458
 8002eb4:	5802546c 	.word	0x5802546c
 8002eb8:	58025480 	.word	0x58025480
 8002ebc:	58025494 	.word	0x58025494

08002ec0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ecc:	4b67      	ldr	r3, [pc, #412]	; (800306c <HAL_DMA_IRQHandler+0x1ac>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a67      	ldr	r2, [pc, #412]	; (8003070 <HAL_DMA_IRQHandler+0x1b0>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0a9b      	lsrs	r3, r3, #10
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ede:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a5f      	ldr	r2, [pc, #380]	; (8003074 <HAL_DMA_IRQHandler+0x1b4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d04a      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a5d      	ldr	r2, [pc, #372]	; (8003078 <HAL_DMA_IRQHandler+0x1b8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d045      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a5c      	ldr	r2, [pc, #368]	; (800307c <HAL_DMA_IRQHandler+0x1bc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d040      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a5a      	ldr	r2, [pc, #360]	; (8003080 <HAL_DMA_IRQHandler+0x1c0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d03b      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a59      	ldr	r2, [pc, #356]	; (8003084 <HAL_DMA_IRQHandler+0x1c4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d036      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a57      	ldr	r2, [pc, #348]	; (8003088 <HAL_DMA_IRQHandler+0x1c8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d031      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a56      	ldr	r2, [pc, #344]	; (800308c <HAL_DMA_IRQHandler+0x1cc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d02c      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a54      	ldr	r2, [pc, #336]	; (8003090 <HAL_DMA_IRQHandler+0x1d0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d027      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a53      	ldr	r2, [pc, #332]	; (8003094 <HAL_DMA_IRQHandler+0x1d4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d022      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a51      	ldr	r2, [pc, #324]	; (8003098 <HAL_DMA_IRQHandler+0x1d8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d01d      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a50      	ldr	r2, [pc, #320]	; (800309c <HAL_DMA_IRQHandler+0x1dc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d018      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a4e      	ldr	r2, [pc, #312]	; (80030a0 <HAL_DMA_IRQHandler+0x1e0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a4d      	ldr	r2, [pc, #308]	; (80030a4 <HAL_DMA_IRQHandler+0x1e4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00e      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a4b      	ldr	r2, [pc, #300]	; (80030a8 <HAL_DMA_IRQHandler+0x1e8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d009      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a4a      	ldr	r2, [pc, #296]	; (80030ac <HAL_DMA_IRQHandler+0x1ec>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xd2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a48      	ldr	r2, [pc, #288]	; (80030b0 <HAL_DMA_IRQHandler+0x1f0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <HAL_DMA_IRQHandler+0xd6>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_DMA_IRQHandler+0xd8>
 8002f96:	2300      	movs	r3, #0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 842b 	beq.w	80037f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80a2 	beq.w	80030f8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a2e      	ldr	r2, [pc, #184]	; (8003074 <HAL_DMA_IRQHandler+0x1b4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d04a      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2d      	ldr	r2, [pc, #180]	; (8003078 <HAL_DMA_IRQHandler+0x1b8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d045      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2b      	ldr	r2, [pc, #172]	; (800307c <HAL_DMA_IRQHandler+0x1bc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d040      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2a      	ldr	r2, [pc, #168]	; (8003080 <HAL_DMA_IRQHandler+0x1c0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d03b      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a28      	ldr	r2, [pc, #160]	; (8003084 <HAL_DMA_IRQHandler+0x1c4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d036      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a27      	ldr	r2, [pc, #156]	; (8003088 <HAL_DMA_IRQHandler+0x1c8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d031      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a25      	ldr	r2, [pc, #148]	; (800308c <HAL_DMA_IRQHandler+0x1cc>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d02c      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a24      	ldr	r2, [pc, #144]	; (8003090 <HAL_DMA_IRQHandler+0x1d0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d027      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a22      	ldr	r2, [pc, #136]	; (8003094 <HAL_DMA_IRQHandler+0x1d4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d022      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a21      	ldr	r2, [pc, #132]	; (8003098 <HAL_DMA_IRQHandler+0x1d8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d01d      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1f      	ldr	r2, [pc, #124]	; (800309c <HAL_DMA_IRQHandler+0x1dc>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d018      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1e      	ldr	r2, [pc, #120]	; (80030a0 <HAL_DMA_IRQHandler+0x1e0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1c      	ldr	r2, [pc, #112]	; (80030a4 <HAL_DMA_IRQHandler+0x1e4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00e      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <HAL_DMA_IRQHandler+0x1e8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d009      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a19      	ldr	r2, [pc, #100]	; (80030ac <HAL_DMA_IRQHandler+0x1ec>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d004      	beq.n	8003054 <HAL_DMA_IRQHandler+0x194>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a18      	ldr	r2, [pc, #96]	; (80030b0 <HAL_DMA_IRQHandler+0x1f0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d12f      	bne.n	80030b4 <HAL_DMA_IRQHandler+0x1f4>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	e02e      	b.n	80030c8 <HAL_DMA_IRQHandler+0x208>
 800306a:	bf00      	nop
 800306c:	24000010 	.word	0x24000010
 8003070:	1b4e81b5 	.word	0x1b4e81b5
 8003074:	40020010 	.word	0x40020010
 8003078:	40020028 	.word	0x40020028
 800307c:	40020040 	.word	0x40020040
 8003080:	40020058 	.word	0x40020058
 8003084:	40020070 	.word	0x40020070
 8003088:	40020088 	.word	0x40020088
 800308c:	400200a0 	.word	0x400200a0
 8003090:	400200b8 	.word	0x400200b8
 8003094:	40020410 	.word	0x40020410
 8003098:	40020428 	.word	0x40020428
 800309c:	40020440 	.word	0x40020440
 80030a0:	40020458 	.word	0x40020458
 80030a4:	40020470 	.word	0x40020470
 80030a8:	40020488 	.word	0x40020488
 80030ac:	400204a0 	.word	0x400204a0
 80030b0:	400204b8 	.word	0x400204b8
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bf14      	ite	ne
 80030c2:	2301      	movne	r3, #1
 80030c4:	2300      	moveq	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d015      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	f022 0204 	bic.w	r2, r2, #4
 80030da:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2208      	movs	r2, #8
 80030e6:	409a      	lsls	r2, r3
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f0:	f043 0201 	orr.w	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	fa22 f303 	lsr.w	r3, r2, r3
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d06e      	beq.n	80031ec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a69      	ldr	r2, [pc, #420]	; (80032b8 <HAL_DMA_IRQHandler+0x3f8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d04a      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a67      	ldr	r2, [pc, #412]	; (80032bc <HAL_DMA_IRQHandler+0x3fc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d045      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a66      	ldr	r2, [pc, #408]	; (80032c0 <HAL_DMA_IRQHandler+0x400>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d040      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a64      	ldr	r2, [pc, #400]	; (80032c4 <HAL_DMA_IRQHandler+0x404>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d03b      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a63      	ldr	r2, [pc, #396]	; (80032c8 <HAL_DMA_IRQHandler+0x408>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d036      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a61      	ldr	r2, [pc, #388]	; (80032cc <HAL_DMA_IRQHandler+0x40c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d031      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a60      	ldr	r2, [pc, #384]	; (80032d0 <HAL_DMA_IRQHandler+0x410>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d02c      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a5e      	ldr	r2, [pc, #376]	; (80032d4 <HAL_DMA_IRQHandler+0x414>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d027      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a5d      	ldr	r2, [pc, #372]	; (80032d8 <HAL_DMA_IRQHandler+0x418>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d022      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a5b      	ldr	r2, [pc, #364]	; (80032dc <HAL_DMA_IRQHandler+0x41c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d01d      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a5a      	ldr	r2, [pc, #360]	; (80032e0 <HAL_DMA_IRQHandler+0x420>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d018      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a58      	ldr	r2, [pc, #352]	; (80032e4 <HAL_DMA_IRQHandler+0x424>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a57      	ldr	r2, [pc, #348]	; (80032e8 <HAL_DMA_IRQHandler+0x428>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00e      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a55      	ldr	r2, [pc, #340]	; (80032ec <HAL_DMA_IRQHandler+0x42c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d009      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a54      	ldr	r2, [pc, #336]	; (80032f0 <HAL_DMA_IRQHandler+0x430>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d004      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2ee>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a52      	ldr	r2, [pc, #328]	; (80032f4 <HAL_DMA_IRQHandler+0x434>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d10a      	bne.n	80031c4 <HAL_DMA_IRQHandler+0x304>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf14      	ite	ne
 80031bc:	2301      	movne	r3, #1
 80031be:	2300      	moveq	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	e003      	b.n	80031cc <HAL_DMA_IRQHandler+0x30c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2300      	movs	r3, #0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00d      	beq.n	80031ec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	2201      	movs	r2, #1
 80031da:	409a      	lsls	r2, r3
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	f043 0202 	orr.w	r2, r3, #2
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	2204      	movs	r2, #4
 80031f6:	409a      	lsls	r2, r3
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 808f 	beq.w	8003320 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a2c      	ldr	r2, [pc, #176]	; (80032b8 <HAL_DMA_IRQHandler+0x3f8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d04a      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2a      	ldr	r2, [pc, #168]	; (80032bc <HAL_DMA_IRQHandler+0x3fc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d045      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a29      	ldr	r2, [pc, #164]	; (80032c0 <HAL_DMA_IRQHandler+0x400>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d040      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a27      	ldr	r2, [pc, #156]	; (80032c4 <HAL_DMA_IRQHandler+0x404>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d03b      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a26      	ldr	r2, [pc, #152]	; (80032c8 <HAL_DMA_IRQHandler+0x408>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d036      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a24      	ldr	r2, [pc, #144]	; (80032cc <HAL_DMA_IRQHandler+0x40c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d031      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a23      	ldr	r2, [pc, #140]	; (80032d0 <HAL_DMA_IRQHandler+0x410>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d02c      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a21      	ldr	r2, [pc, #132]	; (80032d4 <HAL_DMA_IRQHandler+0x414>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d027      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a20      	ldr	r2, [pc, #128]	; (80032d8 <HAL_DMA_IRQHandler+0x418>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d022      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1e      	ldr	r2, [pc, #120]	; (80032dc <HAL_DMA_IRQHandler+0x41c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01d      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1d      	ldr	r2, [pc, #116]	; (80032e0 <HAL_DMA_IRQHandler+0x420>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d018      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1b      	ldr	r2, [pc, #108]	; (80032e4 <HAL_DMA_IRQHandler+0x424>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1a      	ldr	r2, [pc, #104]	; (80032e8 <HAL_DMA_IRQHandler+0x428>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00e      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a18      	ldr	r2, [pc, #96]	; (80032ec <HAL_DMA_IRQHandler+0x42c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d009      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a17      	ldr	r2, [pc, #92]	; (80032f0 <HAL_DMA_IRQHandler+0x430>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x3e2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <HAL_DMA_IRQHandler+0x434>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d12a      	bne.n	80032f8 <HAL_DMA_IRQHandler+0x438>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	e023      	b.n	8003300 <HAL_DMA_IRQHandler+0x440>
 80032b8:	40020010 	.word	0x40020010
 80032bc:	40020028 	.word	0x40020028
 80032c0:	40020040 	.word	0x40020040
 80032c4:	40020058 	.word	0x40020058
 80032c8:	40020070 	.word	0x40020070
 80032cc:	40020088 	.word	0x40020088
 80032d0:	400200a0 	.word	0x400200a0
 80032d4:	400200b8 	.word	0x400200b8
 80032d8:	40020410 	.word	0x40020410
 80032dc:	40020428 	.word	0x40020428
 80032e0:	40020440 	.word	0x40020440
 80032e4:	40020458 	.word	0x40020458
 80032e8:	40020470 	.word	0x40020470
 80032ec:	40020488 	.word	0x40020488
 80032f0:	400204a0 	.word	0x400204a0
 80032f4:	400204b8 	.word	0x400204b8
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2300      	movs	r3, #0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00d      	beq.n	8003320 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	2204      	movs	r2, #4
 800330e:	409a      	lsls	r2, r3
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	f043 0204 	orr.w	r2, r3, #4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	2210      	movs	r2, #16
 800332a:	409a      	lsls	r2, r3
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80a6 	beq.w	8003482 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a85      	ldr	r2, [pc, #532]	; (8003550 <HAL_DMA_IRQHandler+0x690>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d04a      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a83      	ldr	r2, [pc, #524]	; (8003554 <HAL_DMA_IRQHandler+0x694>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d045      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a82      	ldr	r2, [pc, #520]	; (8003558 <HAL_DMA_IRQHandler+0x698>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d040      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a80      	ldr	r2, [pc, #512]	; (800355c <HAL_DMA_IRQHandler+0x69c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d03b      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a7f      	ldr	r2, [pc, #508]	; (8003560 <HAL_DMA_IRQHandler+0x6a0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d036      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a7d      	ldr	r2, [pc, #500]	; (8003564 <HAL_DMA_IRQHandler+0x6a4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d031      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a7c      	ldr	r2, [pc, #496]	; (8003568 <HAL_DMA_IRQHandler+0x6a8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d02c      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a7a      	ldr	r2, [pc, #488]	; (800356c <HAL_DMA_IRQHandler+0x6ac>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d027      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a79      	ldr	r2, [pc, #484]	; (8003570 <HAL_DMA_IRQHandler+0x6b0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d022      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a77      	ldr	r2, [pc, #476]	; (8003574 <HAL_DMA_IRQHandler+0x6b4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d01d      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a76      	ldr	r2, [pc, #472]	; (8003578 <HAL_DMA_IRQHandler+0x6b8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d018      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a74      	ldr	r2, [pc, #464]	; (800357c <HAL_DMA_IRQHandler+0x6bc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a73      	ldr	r2, [pc, #460]	; (8003580 <HAL_DMA_IRQHandler+0x6c0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00e      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a71      	ldr	r2, [pc, #452]	; (8003584 <HAL_DMA_IRQHandler+0x6c4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d009      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a70      	ldr	r2, [pc, #448]	; (8003588 <HAL_DMA_IRQHandler+0x6c8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d004      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x516>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6e      	ldr	r2, [pc, #440]	; (800358c <HAL_DMA_IRQHandler+0x6cc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10a      	bne.n	80033ec <HAL_DMA_IRQHandler+0x52c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf14      	ite	ne
 80033e4:	2301      	movne	r3, #1
 80033e6:	2300      	moveq	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	e009      	b.n	8003400 <HAL_DMA_IRQHandler+0x540>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf14      	ite	ne
 80033fa:	2301      	movne	r3, #1
 80033fc:	2300      	moveq	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d03e      	beq.n	8003482 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	2210      	movs	r2, #16
 800340e:	409a      	lsls	r2, r3
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d018      	beq.n	8003454 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d108      	bne.n	8003442 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d024      	beq.n	8003482 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
 8003440:	e01f      	b.n	8003482 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003446:	2b00      	cmp	r3, #0
 8003448:	d01b      	beq.n	8003482 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
 8003452:	e016      	b.n	8003482 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	f022 0208 	bic.w	r2, r2, #8
 8003470:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	2220      	movs	r2, #32
 800348c:	409a      	lsls	r2, r3
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8110 	beq.w	80036b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a2c      	ldr	r2, [pc, #176]	; (8003550 <HAL_DMA_IRQHandler+0x690>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d04a      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a2b      	ldr	r2, [pc, #172]	; (8003554 <HAL_DMA_IRQHandler+0x694>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d045      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a29      	ldr	r2, [pc, #164]	; (8003558 <HAL_DMA_IRQHandler+0x698>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d040      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a28      	ldr	r2, [pc, #160]	; (800355c <HAL_DMA_IRQHandler+0x69c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d03b      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a26      	ldr	r2, [pc, #152]	; (8003560 <HAL_DMA_IRQHandler+0x6a0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d036      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a25      	ldr	r2, [pc, #148]	; (8003564 <HAL_DMA_IRQHandler+0x6a4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d031      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a23      	ldr	r2, [pc, #140]	; (8003568 <HAL_DMA_IRQHandler+0x6a8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d02c      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a22      	ldr	r2, [pc, #136]	; (800356c <HAL_DMA_IRQHandler+0x6ac>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d027      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a20      	ldr	r2, [pc, #128]	; (8003570 <HAL_DMA_IRQHandler+0x6b0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d022      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1f      	ldr	r2, [pc, #124]	; (8003574 <HAL_DMA_IRQHandler+0x6b4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d01d      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1d      	ldr	r2, [pc, #116]	; (8003578 <HAL_DMA_IRQHandler+0x6b8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d018      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1c      	ldr	r2, [pc, #112]	; (800357c <HAL_DMA_IRQHandler+0x6bc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d013      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <HAL_DMA_IRQHandler+0x6c0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00e      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a19      	ldr	r2, [pc, #100]	; (8003584 <HAL_DMA_IRQHandler+0x6c4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a17      	ldr	r2, [pc, #92]	; (8003588 <HAL_DMA_IRQHandler+0x6c8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_DMA_IRQHandler+0x678>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a16      	ldr	r2, [pc, #88]	; (800358c <HAL_DMA_IRQHandler+0x6cc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d12b      	bne.n	8003590 <HAL_DMA_IRQHandler+0x6d0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0310 	and.w	r3, r3, #16
 8003542:	2b00      	cmp	r3, #0
 8003544:	bf14      	ite	ne
 8003546:	2301      	movne	r3, #1
 8003548:	2300      	moveq	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e02a      	b.n	80035a4 <HAL_DMA_IRQHandler+0x6e4>
 800354e:	bf00      	nop
 8003550:	40020010 	.word	0x40020010
 8003554:	40020028 	.word	0x40020028
 8003558:	40020040 	.word	0x40020040
 800355c:	40020058 	.word	0x40020058
 8003560:	40020070 	.word	0x40020070
 8003564:	40020088 	.word	0x40020088
 8003568:	400200a0 	.word	0x400200a0
 800356c:	400200b8 	.word	0x400200b8
 8003570:	40020410 	.word	0x40020410
 8003574:	40020428 	.word	0x40020428
 8003578:	40020440 	.word	0x40020440
 800357c:	40020458 	.word	0x40020458
 8003580:	40020470 	.word	0x40020470
 8003584:	40020488 	.word	0x40020488
 8003588:	400204a0 	.word	0x400204a0
 800358c:	400204b8 	.word	0x400204b8
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf14      	ite	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	2300      	moveq	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8087 	beq.w	80036b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	2220      	movs	r2, #32
 80035b4:	409a      	lsls	r2, r3
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d139      	bne.n	800363a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	f022 0216 	bic.w	r2, r2, #22
 80035d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	6952      	ldr	r2, [r2, #20]
 80035e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d103      	bne.n	80035f6 <HAL_DMA_IRQHandler+0x736>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d007      	beq.n	8003606 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	f022 0208 	bic.w	r2, r2, #8
 8003604:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	223f      	movs	r2, #63	; 0x3f
 8003610:	409a      	lsls	r2, r3
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 834a 	beq.w	8003cc4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4798      	blx	r3
          }
          return;
 8003638:	e344      	b.n	8003cc4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d018      	beq.n	800367a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d108      	bne.n	8003668 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	2b00      	cmp	r3, #0
 800365c:	d02c      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
 8003666:	e027      	b.n	80036b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d023      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
 8003678:	e01e      	b.n	80036b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10f      	bne.n	80036a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	f022 0210 	bic.w	r2, r2, #16
 8003696:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8306 	beq.w	8003cce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8088 	beq.w	80037e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2204      	movs	r2, #4
 80036d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a7a      	ldr	r2, [pc, #488]	; (80038c8 <HAL_DMA_IRQHandler+0xa08>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d04a      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a79      	ldr	r2, [pc, #484]	; (80038cc <HAL_DMA_IRQHandler+0xa0c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d045      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a77      	ldr	r2, [pc, #476]	; (80038d0 <HAL_DMA_IRQHandler+0xa10>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d040      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a76      	ldr	r2, [pc, #472]	; (80038d4 <HAL_DMA_IRQHandler+0xa14>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d03b      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a74      	ldr	r2, [pc, #464]	; (80038d8 <HAL_DMA_IRQHandler+0xa18>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d036      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a73      	ldr	r2, [pc, #460]	; (80038dc <HAL_DMA_IRQHandler+0xa1c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d031      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a71      	ldr	r2, [pc, #452]	; (80038e0 <HAL_DMA_IRQHandler+0xa20>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d02c      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a70      	ldr	r2, [pc, #448]	; (80038e4 <HAL_DMA_IRQHandler+0xa24>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d027      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a6e      	ldr	r2, [pc, #440]	; (80038e8 <HAL_DMA_IRQHandler+0xa28>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d022      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a6d      	ldr	r2, [pc, #436]	; (80038ec <HAL_DMA_IRQHandler+0xa2c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d01d      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a6b      	ldr	r2, [pc, #428]	; (80038f0 <HAL_DMA_IRQHandler+0xa30>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d018      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a6a      	ldr	r2, [pc, #424]	; (80038f4 <HAL_DMA_IRQHandler+0xa34>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d013      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a68      	ldr	r2, [pc, #416]	; (80038f8 <HAL_DMA_IRQHandler+0xa38>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00e      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a67      	ldr	r2, [pc, #412]	; (80038fc <HAL_DMA_IRQHandler+0xa3c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d009      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a65      	ldr	r2, [pc, #404]	; (8003900 <HAL_DMA_IRQHandler+0xa40>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <HAL_DMA_IRQHandler+0x8b8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a64      	ldr	r2, [pc, #400]	; (8003904 <HAL_DMA_IRQHandler+0xa44>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d108      	bne.n	800378a <HAL_DMA_IRQHandler+0x8ca>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	e007      	b.n	800379a <HAL_DMA_IRQHandler+0x8da>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3301      	adds	r3, #1
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d807      	bhi.n	80037b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f2      	bne.n	800379a <HAL_DMA_IRQHandler+0x8da>
 80037b4:	e000      	b.n	80037b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80037b6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2203      	movs	r2, #3
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80037d6:	e003      	b.n	80037e0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8272 	beq.w	8003cce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
 80037f2:	e26c      	b.n	8003cce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a43      	ldr	r2, [pc, #268]	; (8003908 <HAL_DMA_IRQHandler+0xa48>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d022      	beq.n	8003844 <HAL_DMA_IRQHandler+0x984>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a42      	ldr	r2, [pc, #264]	; (800390c <HAL_DMA_IRQHandler+0xa4c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d01d      	beq.n	8003844 <HAL_DMA_IRQHandler+0x984>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a40      	ldr	r2, [pc, #256]	; (8003910 <HAL_DMA_IRQHandler+0xa50>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d018      	beq.n	8003844 <HAL_DMA_IRQHandler+0x984>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a3f      	ldr	r2, [pc, #252]	; (8003914 <HAL_DMA_IRQHandler+0xa54>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <HAL_DMA_IRQHandler+0x984>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a3d      	ldr	r2, [pc, #244]	; (8003918 <HAL_DMA_IRQHandler+0xa58>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00e      	beq.n	8003844 <HAL_DMA_IRQHandler+0x984>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a3c      	ldr	r2, [pc, #240]	; (800391c <HAL_DMA_IRQHandler+0xa5c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d009      	beq.n	8003844 <HAL_DMA_IRQHandler+0x984>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a3a      	ldr	r2, [pc, #232]	; (8003920 <HAL_DMA_IRQHandler+0xa60>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_DMA_IRQHandler+0x984>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a39      	ldr	r2, [pc, #228]	; (8003924 <HAL_DMA_IRQHandler+0xa64>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d101      	bne.n	8003848 <HAL_DMA_IRQHandler+0x988>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <HAL_DMA_IRQHandler+0x98a>
 8003848:	2300      	movs	r3, #0
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 823f 	beq.w	8003cce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	2204      	movs	r2, #4
 8003862:	409a      	lsls	r2, r3
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80cd 	beq.w	8003a08 <HAL_DMA_IRQHandler+0xb48>
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80c7 	beq.w	8003a08 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387e:	f003 031f 	and.w	r3, r3, #31
 8003882:	2204      	movs	r2, #4
 8003884:	409a      	lsls	r2, r3
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d049      	beq.n	8003928 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8210 	beq.w	8003cc8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038b0:	e20a      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8206 	beq.w	8003cc8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038c4:	e200      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xe08>
 80038c6:	bf00      	nop
 80038c8:	40020010 	.word	0x40020010
 80038cc:	40020028 	.word	0x40020028
 80038d0:	40020040 	.word	0x40020040
 80038d4:	40020058 	.word	0x40020058
 80038d8:	40020070 	.word	0x40020070
 80038dc:	40020088 	.word	0x40020088
 80038e0:	400200a0 	.word	0x400200a0
 80038e4:	400200b8 	.word	0x400200b8
 80038e8:	40020410 	.word	0x40020410
 80038ec:	40020428 	.word	0x40020428
 80038f0:	40020440 	.word	0x40020440
 80038f4:	40020458 	.word	0x40020458
 80038f8:	40020470 	.word	0x40020470
 80038fc:	40020488 	.word	0x40020488
 8003900:	400204a0 	.word	0x400204a0
 8003904:	400204b8 	.word	0x400204b8
 8003908:	58025408 	.word	0x58025408
 800390c:	5802541c 	.word	0x5802541c
 8003910:	58025430 	.word	0x58025430
 8003914:	58025444 	.word	0x58025444
 8003918:	58025458 	.word	0x58025458
 800391c:	5802546c 	.word	0x5802546c
 8003920:	58025480 	.word	0x58025480
 8003924:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d160      	bne.n	80039f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a8c      	ldr	r2, [pc, #560]	; (8003b68 <HAL_DMA_IRQHandler+0xca8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d04a      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a8a      	ldr	r2, [pc, #552]	; (8003b6c <HAL_DMA_IRQHandler+0xcac>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d045      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a89      	ldr	r2, [pc, #548]	; (8003b70 <HAL_DMA_IRQHandler+0xcb0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d040      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a87      	ldr	r2, [pc, #540]	; (8003b74 <HAL_DMA_IRQHandler+0xcb4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d03b      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a86      	ldr	r2, [pc, #536]	; (8003b78 <HAL_DMA_IRQHandler+0xcb8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d036      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a84      	ldr	r2, [pc, #528]	; (8003b7c <HAL_DMA_IRQHandler+0xcbc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d031      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a83      	ldr	r2, [pc, #524]	; (8003b80 <HAL_DMA_IRQHandler+0xcc0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d02c      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a81      	ldr	r2, [pc, #516]	; (8003b84 <HAL_DMA_IRQHandler+0xcc4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d027      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a80      	ldr	r2, [pc, #512]	; (8003b88 <HAL_DMA_IRQHandler+0xcc8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d022      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a7e      	ldr	r2, [pc, #504]	; (8003b8c <HAL_DMA_IRQHandler+0xccc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01d      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a7d      	ldr	r2, [pc, #500]	; (8003b90 <HAL_DMA_IRQHandler+0xcd0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d018      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a7b      	ldr	r2, [pc, #492]	; (8003b94 <HAL_DMA_IRQHandler+0xcd4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a7a      	ldr	r2, [pc, #488]	; (8003b98 <HAL_DMA_IRQHandler+0xcd8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00e      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a78      	ldr	r2, [pc, #480]	; (8003b9c <HAL_DMA_IRQHandler+0xcdc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d009      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a77      	ldr	r2, [pc, #476]	; (8003ba0 <HAL_DMA_IRQHandler+0xce0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d004      	beq.n	80039d2 <HAL_DMA_IRQHandler+0xb12>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a75      	ldr	r2, [pc, #468]	; (8003ba4 <HAL_DMA_IRQHandler+0xce4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d108      	bne.n	80039e4 <HAL_DMA_IRQHandler+0xb24>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	f022 0208 	bic.w	r2, r2, #8
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e007      	b.n	80039f4 <HAL_DMA_IRQHandler+0xb34>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	f022 0204 	bic.w	r2, r2, #4
 80039f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8165 	beq.w	8003cc8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a06:	e15f      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	2202      	movs	r2, #2
 8003a12:	409a      	lsls	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80c5 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0xce8>
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80bf 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2202      	movs	r2, #2
 8003a34:	409a      	lsls	r2, r3
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d018      	beq.n	8003a76 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 813a 	beq.w	8003ccc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a60:	e134      	b.n	8003ccc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 8130 	beq.w	8003ccc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a74:	e12a      	b.n	8003ccc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d168      	bne.n	8003b52 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a38      	ldr	r2, [pc, #224]	; (8003b68 <HAL_DMA_IRQHandler+0xca8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d04a      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc60>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a37      	ldr	r2, [pc, #220]	; (8003b6c <HAL_DMA_IRQHandler+0xcac>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d045      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc60>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a35      	ldr	r2, [pc, #212]	; (8003b70 <HAL_DMA_IRQHandler+0xcb0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d040      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc60>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a34      	ldr	r2, [pc, #208]	; (8003b74 <HAL_DMA_IRQHandler+0xcb4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d03b      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc60>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a32      	ldr	r2, [pc, #200]	; (8003b78 <HAL_DMA_IRQHandler+0xcb8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d036      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc60>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a31      	ldr	r2, [pc, #196]	; (8003b7c <HAL_DMA_IRQHandler+0xcbc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d031      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc60>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a2f      	ldr	r2, [pc, #188]	; (8003b80 <HAL_DMA_IRQHandler+0xcc0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d02c      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc60>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a2e      	ldr	r2, [pc, #184]	; (8003b84 <HAL_DMA_IRQHandler+0xcc4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d027      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc60>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a2c      	ldr	r2, [pc, #176]	; (8003b88 <HAL_DMA_IRQHandler+0xcc8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d022      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc60>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a2b      	ldr	r2, [pc, #172]	; (8003b8c <HAL_DMA_IRQHandler+0xccc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d01d      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc60>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a29      	ldr	r2, [pc, #164]	; (8003b90 <HAL_DMA_IRQHandler+0xcd0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d018      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc60>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a28      	ldr	r2, [pc, #160]	; (8003b94 <HAL_DMA_IRQHandler+0xcd4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc60>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <HAL_DMA_IRQHandler+0xcd8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00e      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc60>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a25      	ldr	r2, [pc, #148]	; (8003b9c <HAL_DMA_IRQHandler+0xcdc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d009      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc60>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a23      	ldr	r2, [pc, #140]	; (8003ba0 <HAL_DMA_IRQHandler+0xce0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xc60>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a22      	ldr	r2, [pc, #136]	; (8003ba4 <HAL_DMA_IRQHandler+0xce4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d108      	bne.n	8003b32 <HAL_DMA_IRQHandler+0xc72>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	f022 0214 	bic.w	r2, r2, #20
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	e007      	b.n	8003b42 <HAL_DMA_IRQHandler+0xc82>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	f022 020a 	bic.w	r2, r2, #10
 8003b40:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80b8 	beq.w	8003ccc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b64:	e0b2      	b.n	8003ccc <HAL_DMA_IRQHandler+0xe0c>
 8003b66:	bf00      	nop
 8003b68:	40020010 	.word	0x40020010
 8003b6c:	40020028 	.word	0x40020028
 8003b70:	40020040 	.word	0x40020040
 8003b74:	40020058 	.word	0x40020058
 8003b78:	40020070 	.word	0x40020070
 8003b7c:	40020088 	.word	0x40020088
 8003b80:	400200a0 	.word	0x400200a0
 8003b84:	400200b8 	.word	0x400200b8
 8003b88:	40020410 	.word	0x40020410
 8003b8c:	40020428 	.word	0x40020428
 8003b90:	40020440 	.word	0x40020440
 8003b94:	40020458 	.word	0x40020458
 8003b98:	40020470 	.word	0x40020470
 8003b9c:	40020488 	.word	0x40020488
 8003ba0:	400204a0 	.word	0x400204a0
 8003ba4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8088 	beq.w	8003cce <HAL_DMA_IRQHandler+0xe0e>
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8082 	beq.w	8003cce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a41      	ldr	r2, [pc, #260]	; (8003cd4 <HAL_DMA_IRQHandler+0xe14>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d04a      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a3f      	ldr	r2, [pc, #252]	; (8003cd8 <HAL_DMA_IRQHandler+0xe18>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d045      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a3e      	ldr	r2, [pc, #248]	; (8003cdc <HAL_DMA_IRQHandler+0xe1c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d040      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a3c      	ldr	r2, [pc, #240]	; (8003ce0 <HAL_DMA_IRQHandler+0xe20>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d03b      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a3b      	ldr	r2, [pc, #236]	; (8003ce4 <HAL_DMA_IRQHandler+0xe24>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d036      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a39      	ldr	r2, [pc, #228]	; (8003ce8 <HAL_DMA_IRQHandler+0xe28>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d031      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a38      	ldr	r2, [pc, #224]	; (8003cec <HAL_DMA_IRQHandler+0xe2c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d02c      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a36      	ldr	r2, [pc, #216]	; (8003cf0 <HAL_DMA_IRQHandler+0xe30>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d027      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a35      	ldr	r2, [pc, #212]	; (8003cf4 <HAL_DMA_IRQHandler+0xe34>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d022      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a33      	ldr	r2, [pc, #204]	; (8003cf8 <HAL_DMA_IRQHandler+0xe38>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d01d      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a32      	ldr	r2, [pc, #200]	; (8003cfc <HAL_DMA_IRQHandler+0xe3c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d018      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a30      	ldr	r2, [pc, #192]	; (8003d00 <HAL_DMA_IRQHandler+0xe40>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d013      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2f      	ldr	r2, [pc, #188]	; (8003d04 <HAL_DMA_IRQHandler+0xe44>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00e      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2d      	ldr	r2, [pc, #180]	; (8003d08 <HAL_DMA_IRQHandler+0xe48>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d009      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2c      	ldr	r2, [pc, #176]	; (8003d0c <HAL_DMA_IRQHandler+0xe4c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xdaa>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a2a      	ldr	r2, [pc, #168]	; (8003d10 <HAL_DMA_IRQHandler+0xe50>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d108      	bne.n	8003c7c <HAL_DMA_IRQHandler+0xdbc>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	f022 021c 	bic.w	r2, r2, #28
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	e007      	b.n	8003c8c <HAL_DMA_IRQHandler+0xdcc>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	f022 020e 	bic.w	r2, r2, #14
 8003c8a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	2201      	movs	r2, #1
 8003c96:	409a      	lsls	r2, r3
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
 8003cc2:	e004      	b.n	8003cce <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003cc4:	bf00      	nop
 8003cc6:	e002      	b.n	8003cce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cc8:	bf00      	nop
 8003cca:	e000      	b.n	8003cce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ccc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003cce:	3728      	adds	r7, #40	; 0x28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40020010 	.word	0x40020010
 8003cd8:	40020028 	.word	0x40020028
 8003cdc:	40020040 	.word	0x40020040
 8003ce0:	40020058 	.word	0x40020058
 8003ce4:	40020070 	.word	0x40020070
 8003ce8:	40020088 	.word	0x40020088
 8003cec:	400200a0 	.word	0x400200a0
 8003cf0:	400200b8 	.word	0x400200b8
 8003cf4:	40020410 	.word	0x40020410
 8003cf8:	40020428 	.word	0x40020428
 8003cfc:	40020440 	.word	0x40020440
 8003d00:	40020458 	.word	0x40020458
 8003d04:	40020470 	.word	0x40020470
 8003d08:	40020488 	.word	0x40020488
 8003d0c:	400204a0 	.word	0x400204a0
 8003d10:	400204b8 	.word	0x400204b8

08003d14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a42      	ldr	r2, [pc, #264]	; (8003e2c <DMA_CalcBaseAndBitshift+0x118>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d04a      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a41      	ldr	r2, [pc, #260]	; (8003e30 <DMA_CalcBaseAndBitshift+0x11c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d045      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a3f      	ldr	r2, [pc, #252]	; (8003e34 <DMA_CalcBaseAndBitshift+0x120>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d040      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a3e      	ldr	r2, [pc, #248]	; (8003e38 <DMA_CalcBaseAndBitshift+0x124>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d03b      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a3c      	ldr	r2, [pc, #240]	; (8003e3c <DMA_CalcBaseAndBitshift+0x128>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d036      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a3b      	ldr	r2, [pc, #236]	; (8003e40 <DMA_CalcBaseAndBitshift+0x12c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d031      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a39      	ldr	r2, [pc, #228]	; (8003e44 <DMA_CalcBaseAndBitshift+0x130>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d02c      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a38      	ldr	r2, [pc, #224]	; (8003e48 <DMA_CalcBaseAndBitshift+0x134>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d027      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a36      	ldr	r2, [pc, #216]	; (8003e4c <DMA_CalcBaseAndBitshift+0x138>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d022      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a35      	ldr	r2, [pc, #212]	; (8003e50 <DMA_CalcBaseAndBitshift+0x13c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d01d      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a33      	ldr	r2, [pc, #204]	; (8003e54 <DMA_CalcBaseAndBitshift+0x140>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d018      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a32      	ldr	r2, [pc, #200]	; (8003e58 <DMA_CalcBaseAndBitshift+0x144>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d013      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a30      	ldr	r2, [pc, #192]	; (8003e5c <DMA_CalcBaseAndBitshift+0x148>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00e      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a2f      	ldr	r2, [pc, #188]	; (8003e60 <DMA_CalcBaseAndBitshift+0x14c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d009      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2d      	ldr	r2, [pc, #180]	; (8003e64 <DMA_CalcBaseAndBitshift+0x150>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <DMA_CalcBaseAndBitshift+0xa8>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a2c      	ldr	r2, [pc, #176]	; (8003e68 <DMA_CalcBaseAndBitshift+0x154>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d101      	bne.n	8003dc0 <DMA_CalcBaseAndBitshift+0xac>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <DMA_CalcBaseAndBitshift+0xae>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d024      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	3b10      	subs	r3, #16
 8003dce:	4a27      	ldr	r2, [pc, #156]	; (8003e6c <DMA_CalcBaseAndBitshift+0x158>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	4a24      	ldr	r2, [pc, #144]	; (8003e70 <DMA_CalcBaseAndBitshift+0x15c>)
 8003de0:	5cd3      	ldrb	r3, [r2, r3]
 8003de2:	461a      	mov	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d908      	bls.n	8003e00 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	4b1f      	ldr	r3, [pc, #124]	; (8003e74 <DMA_CalcBaseAndBitshift+0x160>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	1d1a      	adds	r2, r3, #4
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	659a      	str	r2, [r3, #88]	; 0x58
 8003dfe:	e00d      	b.n	8003e1c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b1b      	ldr	r3, [pc, #108]	; (8003e74 <DMA_CalcBaseAndBitshift+0x160>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e0e:	e005      	b.n	8003e1c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40020010 	.word	0x40020010
 8003e30:	40020028 	.word	0x40020028
 8003e34:	40020040 	.word	0x40020040
 8003e38:	40020058 	.word	0x40020058
 8003e3c:	40020070 	.word	0x40020070
 8003e40:	40020088 	.word	0x40020088
 8003e44:	400200a0 	.word	0x400200a0
 8003e48:	400200b8 	.word	0x400200b8
 8003e4c:	40020410 	.word	0x40020410
 8003e50:	40020428 	.word	0x40020428
 8003e54:	40020440 	.word	0x40020440
 8003e58:	40020458 	.word	0x40020458
 8003e5c:	40020470 	.word	0x40020470
 8003e60:	40020488 	.word	0x40020488
 8003e64:	400204a0 	.word	0x400204a0
 8003e68:	400204b8 	.word	0x400204b8
 8003e6c:	aaaaaaab 	.word	0xaaaaaaab
 8003e70:	0800bac4 	.word	0x0800bac4
 8003e74:	fffffc00 	.word	0xfffffc00

08003e78 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d120      	bne.n	8003ece <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d858      	bhi.n	8003f46 <DMA_CheckFifoParam+0xce>
 8003e94:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <DMA_CheckFifoParam+0x24>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	08003ead 	.word	0x08003ead
 8003ea0:	08003ebf 	.word	0x08003ebf
 8003ea4:	08003ead 	.word	0x08003ead
 8003ea8:	08003f47 	.word	0x08003f47
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d048      	beq.n	8003f4a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ebc:	e045      	b.n	8003f4a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ec6:	d142      	bne.n	8003f4e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ecc:	e03f      	b.n	8003f4e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed6:	d123      	bne.n	8003f20 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d838      	bhi.n	8003f52 <DMA_CheckFifoParam+0xda>
 8003ee0:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <DMA_CheckFifoParam+0x70>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003ef9 	.word	0x08003ef9
 8003eec:	08003eff 	.word	0x08003eff
 8003ef0:	08003ef9 	.word	0x08003ef9
 8003ef4:	08003f11 	.word	0x08003f11
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
        break;
 8003efc:	e030      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d025      	beq.n	8003f56 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f0e:	e022      	b.n	8003f56 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f18:	d11f      	bne.n	8003f5a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f1e:	e01c      	b.n	8003f5a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d902      	bls.n	8003f2e <DMA_CheckFifoParam+0xb6>
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d003      	beq.n	8003f34 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003f2c:	e018      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]
        break;
 8003f32:	e015      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00e      	beq.n	8003f5e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	73fb      	strb	r3, [r7, #15]
    break;
 8003f44:	e00b      	b.n	8003f5e <DMA_CheckFifoParam+0xe6>
        break;
 8003f46:	bf00      	nop
 8003f48:	e00a      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>
        break;
 8003f4a:	bf00      	nop
 8003f4c:	e008      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>
        break;
 8003f4e:	bf00      	nop
 8003f50:	e006      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>
        break;
 8003f52:	bf00      	nop
 8003f54:	e004      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>
        break;
 8003f56:	bf00      	nop
 8003f58:	e002      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>
        break;
 8003f5a:	bf00      	nop
 8003f5c:	e000      	b.n	8003f60 <DMA_CheckFifoParam+0xe8>
    break;
 8003f5e:	bf00      	nop
    }
  }

  return status;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop

08003f70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a38      	ldr	r2, [pc, #224]	; (8004064 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d022      	beq.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a36      	ldr	r2, [pc, #216]	; (8004068 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01d      	beq.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a35      	ldr	r2, [pc, #212]	; (800406c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d018      	beq.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a33      	ldr	r2, [pc, #204]	; (8004070 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d013      	beq.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a32      	ldr	r2, [pc, #200]	; (8004074 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00e      	beq.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a30      	ldr	r2, [pc, #192]	; (8004078 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d009      	beq.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2f      	ldr	r2, [pc, #188]	; (800407c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d004      	beq.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a2d      	ldr	r2, [pc, #180]	; (8004080 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d101      	bne.n	8003fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01a      	beq.n	800400e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	3b08      	subs	r3, #8
 8003fe0:	4a28      	ldr	r2, [pc, #160]	; (8004084 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	091b      	lsrs	r3, r3, #4
 8003fe8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4b26      	ldr	r3, [pc, #152]	; (8004088 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a24      	ldr	r2, [pc, #144]	; (800408c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003ffc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	2201      	movs	r2, #1
 8004006:	409a      	lsls	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800400c:	e024      	b.n	8004058 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	3b10      	subs	r3, #16
 8004016:	4a1e      	ldr	r2, [pc, #120]	; (8004090 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4a1c      	ldr	r2, [pc, #112]	; (8004094 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d806      	bhi.n	8004036 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4a1b      	ldr	r2, [pc, #108]	; (8004098 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d902      	bls.n	8004036 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3308      	adds	r3, #8
 8004034:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4b18      	ldr	r3, [pc, #96]	; (800409c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	461a      	mov	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a16      	ldr	r2, [pc, #88]	; (80040a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004048:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	2201      	movs	r2, #1
 8004052:	409a      	lsls	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	58025408 	.word	0x58025408
 8004068:	5802541c 	.word	0x5802541c
 800406c:	58025430 	.word	0x58025430
 8004070:	58025444 	.word	0x58025444
 8004074:	58025458 	.word	0x58025458
 8004078:	5802546c 	.word	0x5802546c
 800407c:	58025480 	.word	0x58025480
 8004080:	58025494 	.word	0x58025494
 8004084:	cccccccd 	.word	0xcccccccd
 8004088:	16009600 	.word	0x16009600
 800408c:	58025880 	.word	0x58025880
 8004090:	aaaaaaab 	.word	0xaaaaaaab
 8004094:	400204b8 	.word	0x400204b8
 8004098:	4002040f 	.word	0x4002040f
 800409c:	10008200 	.word	0x10008200
 80040a0:	40020880 	.word	0x40020880

080040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d04a      	beq.n	8004150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d847      	bhi.n	8004150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a25      	ldr	r2, [pc, #148]	; (800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d022      	beq.n	8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a24      	ldr	r2, [pc, #144]	; (8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d01d      	beq.n	8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a22      	ldr	r2, [pc, #136]	; (8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d018      	beq.n	8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a21      	ldr	r2, [pc, #132]	; (8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d013      	beq.n	8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1f      	ldr	r2, [pc, #124]	; (800416c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00e      	beq.n	8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d009      	beq.n	8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1c      	ldr	r2, [pc, #112]	; (8004174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d004      	beq.n	8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1b      	ldr	r2, [pc, #108]	; (8004178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d101      	bne.n	8004114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004114:	2300      	movs	r3, #0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4b17      	ldr	r3, [pc, #92]	; (800417c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	461a      	mov	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a15      	ldr	r2, [pc, #84]	; (8004180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800412c:	671a      	str	r2, [r3, #112]	; 0x70
 800412e:	e009      	b.n	8004144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4b14      	ldr	r3, [pc, #80]	; (8004184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	461a      	mov	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a11      	ldr	r2, [pc, #68]	; (8004188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004142:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3b01      	subs	r3, #1
 8004148:	2201      	movs	r2, #1
 800414a:	409a      	lsls	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	58025408 	.word	0x58025408
 8004160:	5802541c 	.word	0x5802541c
 8004164:	58025430 	.word	0x58025430
 8004168:	58025444 	.word	0x58025444
 800416c:	58025458 	.word	0x58025458
 8004170:	5802546c 	.word	0x5802546c
 8004174:	58025480 	.word	0x58025480
 8004178:	58025494 	.word	0x58025494
 800417c:	1600963f 	.word	0x1600963f
 8004180:	58025940 	.word	0x58025940
 8004184:	1000823f 	.word	0x1000823f
 8004188:	40020940 	.word	0x40020940

0800418c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800418c:	b480      	push	{r7}
 800418e:	b089      	sub	sp, #36	; 0x24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800419a:	4b89      	ldr	r3, [pc, #548]	; (80043c0 <HAL_GPIO_Init+0x234>)
 800419c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800419e:	e194      	b.n	80044ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	2101      	movs	r1, #1
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	4013      	ands	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 8186 	beq.w	80044c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d00b      	beq.n	80041d8 <HAL_GPIO_Init+0x4c>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d007      	beq.n	80041d8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041cc:	2b11      	cmp	r3, #17
 80041ce:	d003      	beq.n	80041d8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b12      	cmp	r3, #18
 80041d6:	d130      	bne.n	800423a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	2203      	movs	r2, #3
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	4013      	ands	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4313      	orrs	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800420e:	2201      	movs	r2, #1
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4013      	ands	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	091b      	lsrs	r3, r3, #4
 8004224:	f003 0201 	and.w	r2, r3, #1
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	2203      	movs	r2, #3
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d003      	beq.n	800427a <HAL_GPIO_Init+0xee>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b12      	cmp	r3, #18
 8004278:	d123      	bne.n	80042c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	08da      	lsrs	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3208      	adds	r2, #8
 8004282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	220f      	movs	r2, #15
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	08da      	lsrs	r2, r3, #3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3208      	adds	r2, #8
 80042bc:	69b9      	ldr	r1, [r7, #24]
 80042be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	2203      	movs	r2, #3
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43db      	mvns	r3, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4013      	ands	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 0203 	and.w	r2, r3, #3
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 80e0 	beq.w	80044c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004304:	4a2f      	ldr	r2, [pc, #188]	; (80043c4 <HAL_GPIO_Init+0x238>)
 8004306:	4b2f      	ldr	r3, [pc, #188]	; (80043c4 <HAL_GPIO_Init+0x238>)
 8004308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800430c:	f043 0302 	orr.w	r3, r3, #2
 8004310:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004314:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <HAL_GPIO_Init+0x238>)
 8004316:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004322:	4a29      	ldr	r2, [pc, #164]	; (80043c8 <HAL_GPIO_Init+0x23c>)
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	089b      	lsrs	r3, r3, #2
 8004328:	3302      	adds	r3, #2
 800432a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	220f      	movs	r2, #15
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4013      	ands	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a20      	ldr	r2, [pc, #128]	; (80043cc <HAL_GPIO_Init+0x240>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d052      	beq.n	80043f4 <HAL_GPIO_Init+0x268>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a1f      	ldr	r2, [pc, #124]	; (80043d0 <HAL_GPIO_Init+0x244>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d031      	beq.n	80043ba <HAL_GPIO_Init+0x22e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a1e      	ldr	r2, [pc, #120]	; (80043d4 <HAL_GPIO_Init+0x248>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d02b      	beq.n	80043b6 <HAL_GPIO_Init+0x22a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <HAL_GPIO_Init+0x24c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d025      	beq.n	80043b2 <HAL_GPIO_Init+0x226>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <HAL_GPIO_Init+0x250>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d01f      	beq.n	80043ae <HAL_GPIO_Init+0x222>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a1b      	ldr	r2, [pc, #108]	; (80043e0 <HAL_GPIO_Init+0x254>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d019      	beq.n	80043aa <HAL_GPIO_Init+0x21e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a1a      	ldr	r2, [pc, #104]	; (80043e4 <HAL_GPIO_Init+0x258>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <HAL_GPIO_Init+0x21a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a19      	ldr	r2, [pc, #100]	; (80043e8 <HAL_GPIO_Init+0x25c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00d      	beq.n	80043a2 <HAL_GPIO_Init+0x216>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a18      	ldr	r2, [pc, #96]	; (80043ec <HAL_GPIO_Init+0x260>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d007      	beq.n	800439e <HAL_GPIO_Init+0x212>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <HAL_GPIO_Init+0x264>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d101      	bne.n	800439a <HAL_GPIO_Init+0x20e>
 8004396:	2309      	movs	r3, #9
 8004398:	e02d      	b.n	80043f6 <HAL_GPIO_Init+0x26a>
 800439a:	230a      	movs	r3, #10
 800439c:	e02b      	b.n	80043f6 <HAL_GPIO_Init+0x26a>
 800439e:	2308      	movs	r3, #8
 80043a0:	e029      	b.n	80043f6 <HAL_GPIO_Init+0x26a>
 80043a2:	2307      	movs	r3, #7
 80043a4:	e027      	b.n	80043f6 <HAL_GPIO_Init+0x26a>
 80043a6:	2306      	movs	r3, #6
 80043a8:	e025      	b.n	80043f6 <HAL_GPIO_Init+0x26a>
 80043aa:	2305      	movs	r3, #5
 80043ac:	e023      	b.n	80043f6 <HAL_GPIO_Init+0x26a>
 80043ae:	2304      	movs	r3, #4
 80043b0:	e021      	b.n	80043f6 <HAL_GPIO_Init+0x26a>
 80043b2:	2303      	movs	r3, #3
 80043b4:	e01f      	b.n	80043f6 <HAL_GPIO_Init+0x26a>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e01d      	b.n	80043f6 <HAL_GPIO_Init+0x26a>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e01b      	b.n	80043f6 <HAL_GPIO_Init+0x26a>
 80043be:	bf00      	nop
 80043c0:	58000080 	.word	0x58000080
 80043c4:	58024400 	.word	0x58024400
 80043c8:	58000400 	.word	0x58000400
 80043cc:	58020000 	.word	0x58020000
 80043d0:	58020400 	.word	0x58020400
 80043d4:	58020800 	.word	0x58020800
 80043d8:	58020c00 	.word	0x58020c00
 80043dc:	58021000 	.word	0x58021000
 80043e0:	58021400 	.word	0x58021400
 80043e4:	58021800 	.word	0x58021800
 80043e8:	58021c00 	.word	0x58021c00
 80043ec:	58022000 	.word	0x58022000
 80043f0:	58022400 	.word	0x58022400
 80043f4:	2300      	movs	r3, #0
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	f002 0203 	and.w	r2, r2, #3
 80043fc:	0092      	lsls	r2, r2, #2
 80043fe:	4093      	lsls	r3, r2
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4313      	orrs	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004406:	4938      	ldr	r1, [pc, #224]	; (80044e8 <HAL_GPIO_Init+0x35c>)
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	089b      	lsrs	r3, r3, #2
 800440c:	3302      	adds	r3, #2
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	43db      	mvns	r3, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4013      	ands	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	43db      	mvns	r3, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4013      	ands	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800448e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	43db      	mvns	r3, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4013      	ands	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80044bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	3301      	adds	r3, #1
 80044c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f47f ae63 	bne.w	80041a0 <HAL_GPIO_Init+0x14>
  }
}
 80044da:	bf00      	nop
 80044dc:	3724      	adds	r7, #36	; 0x24
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	58000400 	.word	0x58000400

080044ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	807b      	strh	r3, [r7, #2]
 80044f8:	4613      	mov	r3, r2
 80044fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044fc:	787b      	ldrb	r3, [r7, #1]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004502:	887a      	ldrh	r2, [r7, #2]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004508:	e003      	b.n	8004512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800450a:	887b      	ldrh	r3, [r7, #2]
 800450c:	041a      	lsls	r2, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	619a      	str	r2, [r3, #24]
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800451e:	b480      	push	{r7}
 8004520:	b085      	sub	sp, #20
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	460b      	mov	r3, r1
 8004528:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004530:	887a      	ldrh	r2, [r7, #2]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4013      	ands	r3, r2
 8004536:	041a      	lsls	r2, r3, #16
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	43d9      	mvns	r1, r3
 800453c:	887b      	ldrh	r3, [r7, #2]
 800453e:	400b      	ands	r3, r1
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	619a      	str	r2, [r3, #24]
}
 8004546:	bf00      	nop
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
	...

08004554 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800455c:	4b19      	ldr	r3, [pc, #100]	; (80045c4 <HAL_PWREx_ConfigSupply+0x70>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b04      	cmp	r3, #4
 8004566:	d00a      	beq.n	800457e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004568:	4b16      	ldr	r3, [pc, #88]	; (80045c4 <HAL_PWREx_ConfigSupply+0x70>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0207 	and.w	r2, r3, #7
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	429a      	cmp	r2, r3
 8004574:	d001      	beq.n	800457a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e01f      	b.n	80045ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	e01d      	b.n	80045ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800457e:	4911      	ldr	r1, [pc, #68]	; (80045c4 <HAL_PWREx_ConfigSupply+0x70>)
 8004580:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <HAL_PWREx_ConfigSupply+0x70>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f023 0207 	bic.w	r2, r3, #7
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4313      	orrs	r3, r2
 800458c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800458e:	f7fc f8b1 	bl	80006f4 <HAL_GetTick>
 8004592:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004594:	e009      	b.n	80045aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004596:	f7fc f8ad 	bl	80006f4 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045a4:	d901      	bls.n	80045aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e007      	b.n	80045ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045aa:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <HAL_PWREx_ConfigSupply+0x70>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b6:	d1ee      	bne.n	8004596 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	58024800 	.word	0x58024800

080045c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08c      	sub	sp, #48	; 0x30
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e3ff      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 8087 	beq.w	80046f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045e8:	4b99      	ldr	r3, [pc, #612]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045f2:	4b97      	ldr	r3, [pc, #604]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	2b10      	cmp	r3, #16
 80045fc:	d007      	beq.n	800460e <HAL_RCC_OscConfig+0x46>
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	2b18      	cmp	r3, #24
 8004602:	d110      	bne.n	8004626 <HAL_RCC_OscConfig+0x5e>
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d10b      	bne.n	8004626 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460e:	4b90      	ldr	r3, [pc, #576]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d06c      	beq.n	80046f4 <HAL_RCC_OscConfig+0x12c>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d168      	bne.n	80046f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e3d9      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800462e:	d106      	bne.n	800463e <HAL_RCC_OscConfig+0x76>
 8004630:	4a87      	ldr	r2, [pc, #540]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004632:	4b87      	ldr	r3, [pc, #540]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	e02e      	b.n	800469c <HAL_RCC_OscConfig+0xd4>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10c      	bne.n	8004660 <HAL_RCC_OscConfig+0x98>
 8004646:	4a82      	ldr	r2, [pc, #520]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004648:	4b81      	ldr	r3, [pc, #516]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	4a7f      	ldr	r2, [pc, #508]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004654:	4b7e      	ldr	r3, [pc, #504]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	e01d      	b.n	800469c <HAL_RCC_OscConfig+0xd4>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004668:	d10c      	bne.n	8004684 <HAL_RCC_OscConfig+0xbc>
 800466a:	4a79      	ldr	r2, [pc, #484]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 800466c:	4b78      	ldr	r3, [pc, #480]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	4a76      	ldr	r2, [pc, #472]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004678:	4b75      	ldr	r3, [pc, #468]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	e00b      	b.n	800469c <HAL_RCC_OscConfig+0xd4>
 8004684:	4a72      	ldr	r2, [pc, #456]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004686:	4b72      	ldr	r3, [pc, #456]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	4a6f      	ldr	r2, [pc, #444]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004692:	4b6f      	ldr	r3, [pc, #444]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800469a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d013      	beq.n	80046cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fc f826 	bl	80006f4 <HAL_GetTick>
 80046a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046ac:	f7fc f822 	bl	80006f4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	; 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e38d      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046be:	4b64      	ldr	r3, [pc, #400]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0xe4>
 80046ca:	e014      	b.n	80046f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fc f812 	bl	80006f4 <HAL_GetTick>
 80046d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d4:	f7fc f80e 	bl	80006f4 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	; 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e379      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046e6:	4b5a      	ldr	r3, [pc, #360]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x10c>
 80046f2:	e000      	b.n	80046f6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 80ae 	beq.w	8004860 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004704:	4b52      	ldr	r3, [pc, #328]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800470c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800470e:	4b50      	ldr	r3, [pc, #320]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d007      	beq.n	800472a <HAL_RCC_OscConfig+0x162>
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	2b18      	cmp	r3, #24
 800471e:	d13a      	bne.n	8004796 <HAL_RCC_OscConfig+0x1ce>
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d135      	bne.n	8004796 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800472a:	4b49      	ldr	r3, [pc, #292]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_RCC_OscConfig+0x17a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e34b      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004742:	f7fc f805 	bl	8000750 <HAL_GetREVID>
 8004746:	4602      	mov	r2, r0
 8004748:	f241 0303 	movw	r3, #4099	; 0x1003
 800474c:	429a      	cmp	r2, r3
 800474e:	d817      	bhi.n	8004780 <HAL_RCC_OscConfig+0x1b8>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b40      	cmp	r3, #64	; 0x40
 8004756:	d108      	bne.n	800476a <HAL_RCC_OscConfig+0x1a2>
 8004758:	4a3d      	ldr	r2, [pc, #244]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 800475a:	4b3d      	ldr	r3, [pc, #244]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004766:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004768:	e07a      	b.n	8004860 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476a:	4939      	ldr	r1, [pc, #228]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 800476c:	4b38      	ldr	r3, [pc, #224]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	031b      	lsls	r3, r3, #12
 800477a:	4313      	orrs	r3, r2
 800477c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800477e:	e06f      	b.n	8004860 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004780:	4933      	ldr	r1, [pc, #204]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004782:	4b33      	ldr	r3, [pc, #204]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	061b      	lsls	r3, r3, #24
 8004790:	4313      	orrs	r3, r2
 8004792:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004794:	e064      	b.n	8004860 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d045      	beq.n	800482a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800479e:	492c      	ldr	r1, [pc, #176]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 80047a0:	4b2b      	ldr	r3, [pc, #172]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f023 0219 	bic.w	r2, r3, #25
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fb ffa0 	bl	80006f4 <HAL_GetTick>
 80047b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b8:	f7fb ff9c 	bl	80006f4 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e307      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ca:	4b21      	ldr	r3, [pc, #132]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d6:	f7fb ffbb 	bl	8000750 <HAL_GetREVID>
 80047da:	4602      	mov	r2, r0
 80047dc:	f241 0303 	movw	r3, #4099	; 0x1003
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d817      	bhi.n	8004814 <HAL_RCC_OscConfig+0x24c>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b40      	cmp	r3, #64	; 0x40
 80047ea:	d108      	bne.n	80047fe <HAL_RCC_OscConfig+0x236>
 80047ec:	4a18      	ldr	r2, [pc, #96]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 80047ee:	4b18      	ldr	r3, [pc, #96]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80047f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047fa:	6053      	str	r3, [r2, #4]
 80047fc:	e030      	b.n	8004860 <HAL_RCC_OscConfig+0x298>
 80047fe:	4914      	ldr	r1, [pc, #80]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004800:	4b13      	ldr	r3, [pc, #76]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	031b      	lsls	r3, r3, #12
 800480e:	4313      	orrs	r3, r2
 8004810:	604b      	str	r3, [r1, #4]
 8004812:	e025      	b.n	8004860 <HAL_RCC_OscConfig+0x298>
 8004814:	490e      	ldr	r1, [pc, #56]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004816:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	061b      	lsls	r3, r3, #24
 8004824:	4313      	orrs	r3, r2
 8004826:	604b      	str	r3, [r1, #4]
 8004828:	e01a      	b.n	8004860 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800482a:	4a09      	ldr	r2, [pc, #36]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 800482c:	4b08      	ldr	r3, [pc, #32]	; (8004850 <HAL_RCC_OscConfig+0x288>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fb ff5d 	bl	80006f4 <HAL_GetTick>
 800483a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800483c:	e00a      	b.n	8004854 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800483e:	f7fb ff59 	bl	80006f4 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d903      	bls.n	8004854 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e2c4      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
 8004850:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004854:	4ba4      	ldr	r3, [pc, #656]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1ee      	bne.n	800483e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 80a9 	beq.w	80049c0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800486e:	4b9e      	ldr	r3, [pc, #632]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004876:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004878:	4b9b      	ldr	r3, [pc, #620]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b08      	cmp	r3, #8
 8004882:	d007      	beq.n	8004894 <HAL_RCC_OscConfig+0x2cc>
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b18      	cmp	r3, #24
 8004888:	d13a      	bne.n	8004900 <HAL_RCC_OscConfig+0x338>
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d135      	bne.n	8004900 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004894:	4b94      	ldr	r3, [pc, #592]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCC_OscConfig+0x2e4>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	2b80      	cmp	r3, #128	; 0x80
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e296      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048ac:	f7fb ff50 	bl	8000750 <HAL_GetREVID>
 80048b0:	4602      	mov	r2, r0
 80048b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d817      	bhi.n	80048ea <HAL_RCC_OscConfig+0x322>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d108      	bne.n	80048d4 <HAL_RCC_OscConfig+0x30c>
 80048c2:	4a89      	ldr	r2, [pc, #548]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 80048c4:	4b88      	ldr	r3, [pc, #544]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80048cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048d0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048d2:	e075      	b.n	80049c0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048d4:	4984      	ldr	r1, [pc, #528]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 80048d6:	4b84      	ldr	r3, [pc, #528]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	069b      	lsls	r3, r3, #26
 80048e4:	4313      	orrs	r3, r2
 80048e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048e8:	e06a      	b.n	80049c0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048ea:	497f      	ldr	r1, [pc, #508]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 80048ec:	4b7e      	ldr	r3, [pc, #504]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	061b      	lsls	r3, r3, #24
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048fe:	e05f      	b.n	80049c0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d042      	beq.n	800498e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004908:	4a77      	ldr	r2, [pc, #476]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 800490a:	4b77      	ldr	r3, [pc, #476]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004914:	f7fb feee 	bl	80006f4 <HAL_GetTick>
 8004918:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800491c:	f7fb feea 	bl	80006f4 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e255      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800492e:	4b6e      	ldr	r3, [pc, #440]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800493a:	f7fb ff09 	bl	8000750 <HAL_GetREVID>
 800493e:	4602      	mov	r2, r0
 8004940:	f241 0303 	movw	r3, #4099	; 0x1003
 8004944:	429a      	cmp	r2, r3
 8004946:	d817      	bhi.n	8004978 <HAL_RCC_OscConfig+0x3b0>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	2b20      	cmp	r3, #32
 800494e:	d108      	bne.n	8004962 <HAL_RCC_OscConfig+0x39a>
 8004950:	4a65      	ldr	r2, [pc, #404]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004952:	4b65      	ldr	r3, [pc, #404]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800495a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800495e:	6053      	str	r3, [r2, #4]
 8004960:	e02e      	b.n	80049c0 <HAL_RCC_OscConfig+0x3f8>
 8004962:	4961      	ldr	r1, [pc, #388]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004964:	4b60      	ldr	r3, [pc, #384]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	069b      	lsls	r3, r3, #26
 8004972:	4313      	orrs	r3, r2
 8004974:	604b      	str	r3, [r1, #4]
 8004976:	e023      	b.n	80049c0 <HAL_RCC_OscConfig+0x3f8>
 8004978:	495b      	ldr	r1, [pc, #364]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 800497a:	4b5b      	ldr	r3, [pc, #364]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	061b      	lsls	r3, r3, #24
 8004988:	4313      	orrs	r3, r2
 800498a:	60cb      	str	r3, [r1, #12]
 800498c:	e018      	b.n	80049c0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800498e:	4a56      	ldr	r2, [pc, #344]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004990:	4b55      	ldr	r3, [pc, #340]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fb feab 	bl	80006f4 <HAL_GetTick>
 800499e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80049a2:	f7fb fea7 	bl	80006f4 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e212      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049b4:	4b4c      	ldr	r3, [pc, #304]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f0      	bne.n	80049a2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d036      	beq.n	8004a3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d019      	beq.n	8004a08 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049d4:	4a44      	ldr	r2, [pc, #272]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 80049d6:	4b44      	ldr	r3, [pc, #272]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 80049d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e0:	f7fb fe88 	bl	80006f4 <HAL_GetTick>
 80049e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e8:	f7fb fe84 	bl	80006f4 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e1ef      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049fa:	4b3b      	ldr	r3, [pc, #236]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 80049fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCC_OscConfig+0x420>
 8004a06:	e018      	b.n	8004a3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a08:	4a37      	ldr	r2, [pc, #220]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004a0a:	4b37      	ldr	r3, [pc, #220]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fb fe6e 	bl	80006f4 <HAL_GetTick>
 8004a18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a1c:	f7fb fe6a 	bl	80006f4 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e1d5      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a2e:	4b2e      	ldr	r3, [pc, #184]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d036      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d019      	beq.n	8004a82 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a4e:	4a26      	ldr	r2, [pc, #152]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004a50:	4b25      	ldr	r3, [pc, #148]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a5a:	f7fb fe4b 	bl	80006f4 <HAL_GetTick>
 8004a5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004a62:	f7fb fe47 	bl	80006f4 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e1b2      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a74:	4b1c      	ldr	r3, [pc, #112]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0f0      	beq.n	8004a62 <HAL_RCC_OscConfig+0x49a>
 8004a80:	e018      	b.n	8004ab4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a82:	4a19      	ldr	r2, [pc, #100]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004a84:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a8e:	f7fb fe31 	bl	80006f4 <HAL_GetTick>
 8004a92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004a96:	f7fb fe2d 	bl	80006f4 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e198      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004aa8:	4b0f      	ldr	r3, [pc, #60]	; (8004ae8 <HAL_RCC_OscConfig+0x520>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8085 	beq.w	8004bcc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ac2:	4a0a      	ldr	r2, [pc, #40]	; (8004aec <HAL_RCC_OscConfig+0x524>)
 8004ac4:	4b09      	ldr	r3, [pc, #36]	; (8004aec <HAL_RCC_OscConfig+0x524>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004acc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ace:	f7fb fe11 	bl	80006f4 <HAL_GetTick>
 8004ad2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ad4:	e00c      	b.n	8004af0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ad6:	f7fb fe0d 	bl	80006f4 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b64      	cmp	r3, #100	; 0x64
 8004ae2:	d905      	bls.n	8004af0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e178      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
 8004ae8:	58024400 	.word	0x58024400
 8004aec:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004af0:	4b96      	ldr	r3, [pc, #600]	; (8004d4c <HAL_RCC_OscConfig+0x784>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0ec      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d106      	bne.n	8004b12 <HAL_RCC_OscConfig+0x54a>
 8004b04:	4a92      	ldr	r2, [pc, #584]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004b06:	4b92      	ldr	r3, [pc, #584]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b10:	e02d      	b.n	8004b6e <HAL_RCC_OscConfig+0x5a6>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCC_OscConfig+0x56c>
 8004b1a:	4a8d      	ldr	r2, [pc, #564]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004b1c:	4b8c      	ldr	r3, [pc, #560]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	6713      	str	r3, [r2, #112]	; 0x70
 8004b26:	4a8a      	ldr	r2, [pc, #552]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004b28:	4b89      	ldr	r3, [pc, #548]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	f023 0304 	bic.w	r3, r3, #4
 8004b30:	6713      	str	r3, [r2, #112]	; 0x70
 8004b32:	e01c      	b.n	8004b6e <HAL_RCC_OscConfig+0x5a6>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b05      	cmp	r3, #5
 8004b3a:	d10c      	bne.n	8004b56 <HAL_RCC_OscConfig+0x58e>
 8004b3c:	4a84      	ldr	r2, [pc, #528]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004b3e:	4b84      	ldr	r3, [pc, #528]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b42:	f043 0304 	orr.w	r3, r3, #4
 8004b46:	6713      	str	r3, [r2, #112]	; 0x70
 8004b48:	4a81      	ldr	r2, [pc, #516]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004b4a:	4b81      	ldr	r3, [pc, #516]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	6713      	str	r3, [r2, #112]	; 0x70
 8004b54:	e00b      	b.n	8004b6e <HAL_RCC_OscConfig+0x5a6>
 8004b56:	4a7e      	ldr	r2, [pc, #504]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004b58:	4b7d      	ldr	r3, [pc, #500]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5c:	f023 0301 	bic.w	r3, r3, #1
 8004b60:	6713      	str	r3, [r2, #112]	; 0x70
 8004b62:	4a7b      	ldr	r2, [pc, #492]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004b64:	4b7a      	ldr	r3, [pc, #488]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b68:	f023 0304 	bic.w	r3, r3, #4
 8004b6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d015      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b76:	f7fb fdbd 	bl	80006f4 <HAL_GetTick>
 8004b7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b7c:	e00a      	b.n	8004b94 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b7e:	f7fb fdb9 	bl	80006f4 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e122      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b94:	4b6e      	ldr	r3, [pc, #440]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0ee      	beq.n	8004b7e <HAL_RCC_OscConfig+0x5b6>
 8004ba0:	e014      	b.n	8004bcc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba2:	f7fb fda7 	bl	80006f4 <HAL_GetTick>
 8004ba6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ba8:	e00a      	b.n	8004bc0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f7fb fda3 	bl	80006f4 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e10c      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bc0:	4b63      	ldr	r3, [pc, #396]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1ee      	bne.n	8004baa <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8101 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004bd6:	4b5e      	ldr	r3, [pc, #376]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bde:	2b18      	cmp	r3, #24
 8004be0:	f000 80bc 	beq.w	8004d5c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	f040 8095 	bne.w	8004d18 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bee:	4a58      	ldr	r2, [pc, #352]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004bf0:	4b57      	ldr	r3, [pc, #348]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfa:	f7fb fd7b 	bl	80006f4 <HAL_GetTick>
 8004bfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c02:	f7fb fd77 	bl	80006f4 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e0e2      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c14:	4b4e      	ldr	r3, [pc, #312]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f0      	bne.n	8004c02 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c20:	484b      	ldr	r0, [pc, #300]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004c22:	4b4b      	ldr	r3, [pc, #300]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c26:	4b4b      	ldr	r3, [pc, #300]	; (8004d54 <HAL_RCC_OscConfig+0x78c>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c32:	0112      	lsls	r2, r2, #4
 8004c34:	430a      	orrs	r2, r1
 8004c36:	4313      	orrs	r3, r2
 8004c38:	6283      	str	r3, [r0, #40]	; 0x28
 8004c3a:	4945      	ldr	r1, [pc, #276]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	3b01      	subs	r3, #1
 8004c42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	025b      	lsls	r3, r3, #9
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	3b01      	subs	r3, #1
 8004c58:	041b      	lsls	r3, r3, #16
 8004c5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c64:	3b01      	subs	r3, #1
 8004c66:	061b      	lsls	r3, r3, #24
 8004c68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004c70:	4a37      	ldr	r2, [pc, #220]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004c72:	4b37      	ldr	r3, [pc, #220]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	f023 0301 	bic.w	r3, r3, #1
 8004c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c7c:	4934      	ldr	r1, [pc, #208]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004c7e:	4b34      	ldr	r3, [pc, #208]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c82:	4b35      	ldr	r3, [pc, #212]	; (8004d58 <HAL_RCC_OscConfig+0x790>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c8a:	00d2      	lsls	r2, r2, #3
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c90:	492f      	ldr	r1, [pc, #188]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004c92:	4b2f      	ldr	r3, [pc, #188]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	f023 020c 	bic.w	r2, r3, #12
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ca2:	492b      	ldr	r1, [pc, #172]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004ca4:	4b2a      	ldr	r3, [pc, #168]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	f023 0202 	bic.w	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004cb4:	4a26      	ldr	r2, [pc, #152]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004cb6:	4b26      	ldr	r3, [pc, #152]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc0:	4a23      	ldr	r2, [pc, #140]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004cc2:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ccc:	4a20      	ldr	r2, [pc, #128]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004cce:	4b20      	ldr	r3, [pc, #128]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004cd8:	4a1d      	ldr	r2, [pc, #116]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004cda:	4b1d      	ldr	r3, [pc, #116]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce4:	4a1a      	ldr	r2, [pc, #104]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004ce6:	4b1a      	ldr	r3, [pc, #104]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7fb fd00 	bl	80006f4 <HAL_GetTick>
 8004cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf8:	f7fb fcfc 	bl	80006f4 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e067      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d0a:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x730>
 8004d16:	e05f      	b.n	8004dd8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d18:	4a0d      	ldr	r2, [pc, #52]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fb fce6 	bl	80006f4 <HAL_GetTick>
 8004d28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fb fce2 	bl	80006f4 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e04d      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d3e:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <HAL_RCC_OscConfig+0x788>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x764>
 8004d4a:	e045      	b.n	8004dd8 <HAL_RCC_OscConfig+0x810>
 8004d4c:	58024800 	.word	0x58024800
 8004d50:	58024400 	.word	0x58024400
 8004d54:	fffffc0c 	.word	0xfffffc0c
 8004d58:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d5c:	4b21      	ldr	r3, [pc, #132]	; (8004de4 <HAL_RCC_OscConfig+0x81c>)
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d62:	4b20      	ldr	r3, [pc, #128]	; (8004de4 <HAL_RCC_OscConfig+0x81c>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d031      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f003 0203 	and.w	r2, r3, #3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d12a      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d122      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d11a      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	0a5b      	lsrs	r3, r3, #9
 8004da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004daa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d111      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	0c1b      	lsrs	r3, r3, #16
 8004db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d108      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	0e1b      	lsrs	r3, r3, #24
 8004dc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3730      	adds	r7, #48	; 0x30
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	58024400 	.word	0x58024400

08004de8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e19c      	b.n	8005136 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dfc:	4b8a      	ldr	r3, [pc, #552]	; (8005028 <HAL_RCC_ClockConfig+0x240>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 020f 	and.w	r2, r3, #15
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d210      	bcs.n	8004e2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0a:	4987      	ldr	r1, [pc, #540]	; (8005028 <HAL_RCC_ClockConfig+0x240>)
 8004e0c:	4b86      	ldr	r3, [pc, #536]	; (8005028 <HAL_RCC_ClockConfig+0x240>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f023 020f 	bic.w	r2, r3, #15
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1a:	4b83      	ldr	r3, [pc, #524]	; (8005028 <HAL_RCC_ClockConfig+0x240>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 020f 	and.w	r2, r3, #15
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e184      	b.n	8005136 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d010      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	4b7b      	ldr	r3, [pc, #492]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d908      	bls.n	8004e5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e48:	4978      	ldr	r1, [pc, #480]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004e4a:	4b78      	ldr	r3, [pc, #480]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d010      	beq.n	8004e88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695a      	ldr	r2, [r3, #20]
 8004e6a:	4b70      	ldr	r3, [pc, #448]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d908      	bls.n	8004e88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e76:	496d      	ldr	r1, [pc, #436]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004e78:	4b6c      	ldr	r3, [pc, #432]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d010      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699a      	ldr	r2, [r3, #24]
 8004e98:	4b64      	ldr	r3, [pc, #400]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d908      	bls.n	8004eb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ea4:	4961      	ldr	r1, [pc, #388]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004ea6:	4b61      	ldr	r3, [pc, #388]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d010      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	4b59      	ldr	r3, [pc, #356]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d908      	bls.n	8004ee4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004ed2:	4956      	ldr	r1, [pc, #344]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004ed4:	4b55      	ldr	r3, [pc, #340]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d010      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	4b4d      	ldr	r3, [pc, #308]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d908      	bls.n	8004f12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f00:	494a      	ldr	r1, [pc, #296]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f02:	4b4a      	ldr	r3, [pc, #296]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	f023 020f 	bic.w	r2, r3, #15
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d055      	beq.n	8004fca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f1e:	4943      	ldr	r1, [pc, #268]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f20:	4b42      	ldr	r3, [pc, #264]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d107      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f38:	4b3c      	ldr	r3, [pc, #240]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d121      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0f6      	b.n	8005136 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	d107      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f50:	4b36      	ldr	r3, [pc, #216]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d115      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0ea      	b.n	8005136 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d107      	bne.n	8004f78 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f68:	4b30      	ldr	r3, [pc, #192]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0de      	b.n	8005136 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f78:	4b2c      	ldr	r3, [pc, #176]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0d6      	b.n	8005136 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f88:	4928      	ldr	r1, [pc, #160]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f8a:	4b28      	ldr	r3, [pc, #160]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f023 0207 	bic.w	r2, r3, #7
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9a:	f7fb fbab 	bl	80006f4 <HAL_GetTick>
 8004f9e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa0:	e00a      	b.n	8004fb8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa2:	f7fb fba7 	bl	80006f4 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e0be      	b.n	8005136 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb8:	4b1c      	ldr	r3, [pc, #112]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d1eb      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d010      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	4b14      	ldr	r3, [pc, #80]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d208      	bcs.n	8004ff8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe6:	4911      	ldr	r1, [pc, #68]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004fe8:	4b10      	ldr	r3, [pc, #64]	; (800502c <HAL_RCC_ClockConfig+0x244>)
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	f023 020f 	bic.w	r2, r3, #15
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_RCC_ClockConfig+0x240>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 020f 	and.w	r2, r3, #15
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d914      	bls.n	8005030 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	4908      	ldr	r1, [pc, #32]	; (8005028 <HAL_RCC_ClockConfig+0x240>)
 8005008:	4b07      	ldr	r3, [pc, #28]	; (8005028 <HAL_RCC_ClockConfig+0x240>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f023 020f 	bic.w	r2, r3, #15
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	4313      	orrs	r3, r2
 8005014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005016:	4b04      	ldr	r3, [pc, #16]	; (8005028 <HAL_RCC_ClockConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 020f 	and.w	r2, r3, #15
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d005      	beq.n	8005030 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e086      	b.n	8005136 <HAL_RCC_ClockConfig+0x34e>
 8005028:	52002000 	.word	0x52002000
 800502c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d010      	beq.n	800505e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	4b3f      	ldr	r3, [pc, #252]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005048:	429a      	cmp	r2, r3
 800504a:	d208      	bcs.n	800505e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800504c:	493c      	ldr	r1, [pc, #240]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 800504e:	4b3c      	ldr	r3, [pc, #240]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d010      	beq.n	800508c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695a      	ldr	r2, [r3, #20]
 800506e:	4b34      	ldr	r3, [pc, #208]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005076:	429a      	cmp	r2, r3
 8005078:	d208      	bcs.n	800508c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800507a:	4931      	ldr	r1, [pc, #196]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 800507c:	4b30      	ldr	r3, [pc, #192]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b00      	cmp	r3, #0
 8005096:	d010      	beq.n	80050ba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699a      	ldr	r2, [r3, #24]
 800509c:	4b28      	ldr	r3, [pc, #160]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d208      	bcs.n	80050ba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050a8:	4925      	ldr	r1, [pc, #148]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 80050aa:	4b25      	ldr	r3, [pc, #148]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d010      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69da      	ldr	r2, [r3, #28]
 80050ca:	4b1d      	ldr	r3, [pc, #116]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d208      	bcs.n	80050e8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80050d6:	491a      	ldr	r1, [pc, #104]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 80050d8:	4b19      	ldr	r3, [pc, #100]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050e8:	f000 f834 	bl	8005154 <HAL_RCC_GetSysClockFreq>
 80050ec:	4601      	mov	r1, r0
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	0a1b      	lsrs	r3, r3, #8
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	4a12      	ldr	r2, [pc, #72]	; (8005144 <HAL_RCC_ClockConfig+0x35c>)
 80050fa:	5cd3      	ldrb	r3, [r2, r3]
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	fa21 f303 	lsr.w	r3, r1, r3
 8005104:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005106:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <HAL_RCC_ClockConfig+0x358>)
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	4a0d      	ldr	r2, [pc, #52]	; (8005144 <HAL_RCC_ClockConfig+0x35c>)
 8005110:	5cd3      	ldrb	r3, [r2, r3]
 8005112:	f003 031f 	and.w	r3, r3, #31
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
 800511c:	4a0a      	ldr	r2, [pc, #40]	; (8005148 <HAL_RCC_ClockConfig+0x360>)
 800511e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005120:	4a0a      	ldr	r2, [pc, #40]	; (800514c <HAL_RCC_ClockConfig+0x364>)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005126:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <HAL_RCC_ClockConfig+0x368>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fb fa98 	bl	8000660 <HAL_InitTick>
 8005130:	4603      	mov	r3, r0
 8005132:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	58024400 	.word	0x58024400
 8005144:	0800baf4 	.word	0x0800baf4
 8005148:	24000014 	.word	0x24000014
 800514c:	24000010 	.word	0x24000010
 8005150:	24000000 	.word	0x24000000

08005154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005154:	b480      	push	{r7}
 8005156:	b089      	sub	sp, #36	; 0x24
 8005158:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800515a:	4baf      	ldr	r3, [pc, #700]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005162:	2b18      	cmp	r3, #24
 8005164:	f200 814e 	bhi.w	8005404 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005168:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <HAL_RCC_GetSysClockFreq+0x1c>)
 800516a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516e:	bf00      	nop
 8005170:	080051d5 	.word	0x080051d5
 8005174:	08005405 	.word	0x08005405
 8005178:	08005405 	.word	0x08005405
 800517c:	08005405 	.word	0x08005405
 8005180:	08005405 	.word	0x08005405
 8005184:	08005405 	.word	0x08005405
 8005188:	08005405 	.word	0x08005405
 800518c:	08005405 	.word	0x08005405
 8005190:	080051fb 	.word	0x080051fb
 8005194:	08005405 	.word	0x08005405
 8005198:	08005405 	.word	0x08005405
 800519c:	08005405 	.word	0x08005405
 80051a0:	08005405 	.word	0x08005405
 80051a4:	08005405 	.word	0x08005405
 80051a8:	08005405 	.word	0x08005405
 80051ac:	08005405 	.word	0x08005405
 80051b0:	08005201 	.word	0x08005201
 80051b4:	08005405 	.word	0x08005405
 80051b8:	08005405 	.word	0x08005405
 80051bc:	08005405 	.word	0x08005405
 80051c0:	08005405 	.word	0x08005405
 80051c4:	08005405 	.word	0x08005405
 80051c8:	08005405 	.word	0x08005405
 80051cc:	08005405 	.word	0x08005405
 80051d0:	08005207 	.word	0x08005207
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051d4:	4b90      	ldr	r3, [pc, #576]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d009      	beq.n	80051f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051e0:	4b8d      	ldr	r3, [pc, #564]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	08db      	lsrs	r3, r3, #3
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	4a8c      	ldr	r2, [pc, #560]	; (800541c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
 80051f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80051f2:	e10a      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051f4:	4b89      	ldr	r3, [pc, #548]	; (800541c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80051f6:	61bb      	str	r3, [r7, #24]
    break;
 80051f8:	e107      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80051fa:	4b89      	ldr	r3, [pc, #548]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80051fc:	61bb      	str	r3, [r7, #24]
    break;
 80051fe:	e104      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005200:	4b88      	ldr	r3, [pc, #544]	; (8005424 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005202:	61bb      	str	r3, [r7, #24]
    break;
 8005204:	e101      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005206:	4b84      	ldr	r3, [pc, #528]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005210:	4b81      	ldr	r3, [pc, #516]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	091b      	lsrs	r3, r3, #4
 8005216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800521a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800521c:	4b7e      	ldr	r3, [pc, #504]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005226:	4b7c      	ldr	r3, [pc, #496]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522a:	08db      	lsrs	r3, r3, #3
 800522c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	fb02 f303 	mul.w	r3, r2, r3
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80da 	beq.w	80053fe <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d05a      	beq.n	8005306 <HAL_RCC_GetSysClockFreq+0x1b2>
 8005250:	2b01      	cmp	r3, #1
 8005252:	d302      	bcc.n	800525a <HAL_RCC_GetSysClockFreq+0x106>
 8005254:	2b02      	cmp	r3, #2
 8005256:	d078      	beq.n	800534a <HAL_RCC_GetSysClockFreq+0x1f6>
 8005258:	e099      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800525a:	4b6f      	ldr	r3, [pc, #444]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d02d      	beq.n	80052c2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005266:	4b6c      	ldr	r3, [pc, #432]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	08db      	lsrs	r3, r3, #3
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	4a6a      	ldr	r2, [pc, #424]	; (800541c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005272:	fa22 f303 	lsr.w	r3, r2, r3
 8005276:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	ee07 3a90 	vmov	s15, r3
 8005288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005290:	4b61      	ldr	r3, [pc, #388]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005298:	ee07 3a90 	vmov	s15, r3
 800529c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80052a4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005428 <HAL_RCC_GetSysClockFreq+0x2d4>
 80052a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052bc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80052c0:	e087      	b.n	80053d2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	ee07 3a90 	vmov	s15, r3
 80052c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052cc:	eddf 6a57 	vldr	s13, [pc, #348]	; 800542c <HAL_RCC_GetSysClockFreq+0x2d8>
 80052d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052d4:	4b50      	ldr	r3, [pc, #320]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80052d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052dc:	ee07 3a90 	vmov	s15, r3
 80052e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80052e8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005428 <HAL_RCC_GetSysClockFreq+0x2d4>
 80052ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005300:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005304:	e065      	b.n	80053d2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	ee07 3a90 	vmov	s15, r3
 800530c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005310:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005430 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005314:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005318:	4b3f      	ldr	r3, [pc, #252]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005320:	ee07 3a90 	vmov	s15, r3
 8005324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005328:	ed97 6a02 	vldr	s12, [r7, #8]
 800532c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005428 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005330:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005338:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800533c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005344:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005348:	e043      	b.n	80053d2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	ee07 3a90 	vmov	s15, r3
 8005350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005354:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005434 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800535c:	4b2e      	ldr	r3, [pc, #184]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005364:	ee07 3a90 	vmov	s15, r3
 8005368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800536c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005370:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005428 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005374:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005378:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800537c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005388:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800538c:	e021      	b.n	80053d2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005398:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005430 <HAL_RCC_GetSysClockFreq+0x2dc>
 800539c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053a0:	4b1d      	ldr	r3, [pc, #116]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a8:	ee07 3a90 	vmov	s15, r3
 80053ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80053b4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005428 <HAL_RCC_GetSysClockFreq+0x2d4>
 80053b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053d0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80053d2:	4b11      	ldr	r3, [pc, #68]	; (8005418 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	0a5b      	lsrs	r3, r3, #9
 80053d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053dc:	3301      	adds	r3, #1
 80053de:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	ee07 3a90 	vmov	s15, r3
 80053e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80053ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053f6:	ee17 3a90 	vmov	r3, s15
 80053fa:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80053fc:	e005      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	61bb      	str	r3, [r7, #24]
    break;
 8005402:	e002      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005404:	4b06      	ldr	r3, [pc, #24]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005406:	61bb      	str	r3, [r7, #24]
    break;
 8005408:	bf00      	nop
  }

  return sysclockfreq;
 800540a:	69bb      	ldr	r3, [r7, #24]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3724      	adds	r7, #36	; 0x24
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	58024400 	.word	0x58024400
 800541c:	03d09000 	.word	0x03d09000
 8005420:	003d0900 	.word	0x003d0900
 8005424:	007a1200 	.word	0x007a1200
 8005428:	46000000 	.word	0x46000000
 800542c:	4c742400 	.word	0x4c742400
 8005430:	4a742400 	.word	0x4a742400
 8005434:	4af42400 	.word	0x4af42400

08005438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800543e:	f7ff fe89 	bl	8005154 <HAL_RCC_GetSysClockFreq>
 8005442:	4601      	mov	r1, r0
 8005444:	4b10      	ldr	r3, [pc, #64]	; (8005488 <HAL_RCC_GetHCLKFreq+0x50>)
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	0a1b      	lsrs	r3, r3, #8
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	4a0f      	ldr	r2, [pc, #60]	; (800548c <HAL_RCC_GetHCLKFreq+0x54>)
 8005450:	5cd3      	ldrb	r3, [r2, r3]
 8005452:	f003 031f 	and.w	r3, r3, #31
 8005456:	fa21 f303 	lsr.w	r3, r1, r3
 800545a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <HAL_RCC_GetHCLKFreq+0x50>)
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	4a09      	ldr	r2, [pc, #36]	; (800548c <HAL_RCC_GetHCLKFreq+0x54>)
 8005466:	5cd3      	ldrb	r3, [r2, r3]
 8005468:	f003 031f 	and.w	r3, r3, #31
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	fa22 f303 	lsr.w	r3, r2, r3
 8005472:	4a07      	ldr	r2, [pc, #28]	; (8005490 <HAL_RCC_GetHCLKFreq+0x58>)
 8005474:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005476:	4a07      	ldr	r2, [pc, #28]	; (8005494 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800547c:	4b04      	ldr	r3, [pc, #16]	; (8005490 <HAL_RCC_GetHCLKFreq+0x58>)
 800547e:	681b      	ldr	r3, [r3, #0]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	58024400 	.word	0x58024400
 800548c:	0800baf4 	.word	0x0800baf4
 8005490:	24000014 	.word	0x24000014
 8005494:	24000010 	.word	0x24000010

08005498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800549c:	f7ff ffcc 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 80054a0:	4601      	mov	r1, r0
 80054a2:	4b06      	ldr	r3, [pc, #24]	; (80054bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	091b      	lsrs	r3, r3, #4
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	4a04      	ldr	r2, [pc, #16]	; (80054c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054ae:	5cd3      	ldrb	r3, [r2, r3]
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	58024400 	.word	0x58024400
 80054c0:	0800baf4 	.word	0x0800baf4

080054c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80054c8:	f7ff ffb6 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 80054cc:	4601      	mov	r1, r0
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	0a1b      	lsrs	r3, r3, #8
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	4a04      	ldr	r2, [pc, #16]	; (80054ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80054da:	5cd3      	ldrb	r3, [r2, r3]
 80054dc:	f003 031f 	and.w	r3, r3, #31
 80054e0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	58024400 	.word	0x58024400
 80054ec:	0800baf4 	.word	0x0800baf4

080054f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054f8:	2300      	movs	r3, #0
 80054fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054fc:	2300      	movs	r3, #0
 80054fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d03d      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005514:	d013      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800551a:	d802      	bhi.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800551c:	2b00      	cmp	r3, #0
 800551e:	d007      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005520:	e01f      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005526:	d013      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005528:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800552c:	d01c      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800552e:	e018      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005530:	4aaf      	ldr	r2, [pc, #700]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005532:	4baf      	ldr	r3, [pc, #700]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800553a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800553c:	e015      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3304      	adds	r3, #4
 8005542:	2102      	movs	r1, #2
 8005544:	4618      	mov	r0, r3
 8005546:	f001 ff41 	bl	80073cc <RCCEx_PLL2_Config>
 800554a:	4603      	mov	r3, r0
 800554c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800554e:	e00c      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3324      	adds	r3, #36	; 0x24
 8005554:	2102      	movs	r1, #2
 8005556:	4618      	mov	r0, r3
 8005558:	f001 ffea 	bl	8007530 <RCCEx_PLL3_Config>
 800555c:	4603      	mov	r3, r0
 800555e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005560:	e003      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	75fb      	strb	r3, [r7, #23]
      break;
 8005566:	e000      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800556a:	7dfb      	ldrb	r3, [r7, #23]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d109      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005570:	499f      	ldr	r1, [pc, #636]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005572:	4b9f      	ldr	r3, [pc, #636]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005576:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800557e:	4313      	orrs	r3, r2
 8005580:	650b      	str	r3, [r1, #80]	; 0x50
 8005582:	e001      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005590:	2b00      	cmp	r3, #0
 8005592:	d03d      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005598:	2b04      	cmp	r3, #4
 800559a:	d826      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800559c:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055b9 	.word	0x080055b9
 80055a8:	080055c7 	.word	0x080055c7
 80055ac:	080055d9 	.word	0x080055d9
 80055b0:	080055f1 	.word	0x080055f1
 80055b4:	080055f1 	.word	0x080055f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055b8:	4a8d      	ldr	r2, [pc, #564]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80055ba:	4b8d      	ldr	r3, [pc, #564]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055c4:	e015      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3304      	adds	r3, #4
 80055ca:	2100      	movs	r1, #0
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 fefd 	bl	80073cc <RCCEx_PLL2_Config>
 80055d2:	4603      	mov	r3, r0
 80055d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055d6:	e00c      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3324      	adds	r3, #36	; 0x24
 80055dc:	2100      	movs	r1, #0
 80055de:	4618      	mov	r0, r3
 80055e0:	f001 ffa6 	bl	8007530 <RCCEx_PLL3_Config>
 80055e4:	4603      	mov	r3, r0
 80055e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055e8:	e003      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	75fb      	strb	r3, [r7, #23]
      break;
 80055ee:	e000      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80055f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055f8:	497d      	ldr	r1, [pc, #500]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80055fa:	4b7d      	ldr	r3, [pc, #500]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80055fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fe:	f023 0207 	bic.w	r2, r3, #7
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005606:	4313      	orrs	r3, r2
 8005608:	650b      	str	r3, [r1, #80]	; 0x50
 800560a:	e001      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560c:	7dfb      	ldrb	r3, [r7, #23]
 800560e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005618:	2b00      	cmp	r3, #0
 800561a:	d03e      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005620:	2b80      	cmp	r3, #128	; 0x80
 8005622:	d01c      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005624:	2b80      	cmp	r3, #128	; 0x80
 8005626:	d804      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d008      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	d00d      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005630:	e01e      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005632:	2bc0      	cmp	r3, #192	; 0xc0
 8005634:	d01f      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563a:	d01e      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800563c:	e018      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800563e:	4a6c      	ldr	r2, [pc, #432]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005640:	4b6b      	ldr	r3, [pc, #428]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005648:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800564a:	e017      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3304      	adds	r3, #4
 8005650:	2100      	movs	r1, #0
 8005652:	4618      	mov	r0, r3
 8005654:	f001 feba 	bl	80073cc <RCCEx_PLL2_Config>
 8005658:	4603      	mov	r3, r0
 800565a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800565c:	e00e      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3324      	adds	r3, #36	; 0x24
 8005662:	2100      	movs	r1, #0
 8005664:	4618      	mov	r0, r3
 8005666:	f001 ff63 	bl	8007530 <RCCEx_PLL3_Config>
 800566a:	4603      	mov	r3, r0
 800566c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800566e:	e005      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	75fb      	strb	r3, [r7, #23]
      break;
 8005674:	e002      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005676:	bf00      	nop
 8005678:	e000      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800567a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800567c:	7dfb      	ldrb	r3, [r7, #23]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005682:	495b      	ldr	r1, [pc, #364]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005684:	4b5a      	ldr	r3, [pc, #360]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005688:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005690:	4313      	orrs	r3, r2
 8005692:	650b      	str	r3, [r1, #80]	; 0x50
 8005694:	e001      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005696:	7dfb      	ldrb	r3, [r7, #23]
 8005698:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d044      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80056ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056b0:	d01f      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80056b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056b6:	d805      	bhi.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80056bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056c0:	d00e      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80056c2:	e01f      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80056c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80056c8:	d01f      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80056ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056ce:	d01e      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80056d0:	e018      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d2:	4a47      	ldr	r2, [pc, #284]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80056d4:	4b46      	ldr	r3, [pc, #280]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056de:	e017      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3304      	adds	r3, #4
 80056e4:	2100      	movs	r1, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	f001 fe70 	bl	80073cc <RCCEx_PLL2_Config>
 80056ec:	4603      	mov	r3, r0
 80056ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80056f0:	e00e      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3324      	adds	r3, #36	; 0x24
 80056f6:	2100      	movs	r1, #0
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 ff19 	bl	8007530 <RCCEx_PLL3_Config>
 80056fe:	4603      	mov	r3, r0
 8005700:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005702:	e005      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	75fb      	strb	r3, [r7, #23]
      break;
 8005708:	e002      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800570a:	bf00      	nop
 800570c:	e000      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800570e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005710:	7dfb      	ldrb	r3, [r7, #23]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10a      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005716:	4936      	ldr	r1, [pc, #216]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005718:	4b35      	ldr	r3, [pc, #212]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800571a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005726:	4313      	orrs	r3, r2
 8005728:	658b      	str	r3, [r1, #88]	; 0x58
 800572a:	e001      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572c:	7dfb      	ldrb	r3, [r7, #23]
 800572e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005738:	2b00      	cmp	r3, #0
 800573a:	d044      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005742:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005746:	d01f      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005748:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800574c:	d805      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005752:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005756:	d00e      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005758:	e01f      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800575a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800575e:	d01f      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005764:	d01e      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005766:	e018      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005768:	4a21      	ldr	r2, [pc, #132]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800576a:	4b21      	ldr	r3, [pc, #132]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005772:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005774:	e017      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3304      	adds	r3, #4
 800577a:	2100      	movs	r1, #0
 800577c:	4618      	mov	r0, r3
 800577e:	f001 fe25 	bl	80073cc <RCCEx_PLL2_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005786:	e00e      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3324      	adds	r3, #36	; 0x24
 800578c:	2100      	movs	r1, #0
 800578e:	4618      	mov	r0, r3
 8005790:	f001 fece 	bl	8007530 <RCCEx_PLL3_Config>
 8005794:	4603      	mov	r3, r0
 8005796:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005798:	e005      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	75fb      	strb	r3, [r7, #23]
      break;
 800579e:	e002      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80057a0:	bf00      	nop
 80057a2:	e000      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80057a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057a6:	7dfb      	ldrb	r3, [r7, #23]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10a      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80057ac:	4910      	ldr	r1, [pc, #64]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80057ae:	4b10      	ldr	r3, [pc, #64]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80057b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057bc:	4313      	orrs	r3, r2
 80057be:	658b      	str	r3, [r1, #88]	; 0x58
 80057c0:	e001      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
 80057c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d035      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d00c      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80057da:	2b10      	cmp	r3, #16
 80057dc:	d802      	bhi.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01b      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80057e2:	e017      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d00c      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80057e8:	2b30      	cmp	r3, #48	; 0x30
 80057ea:	d018      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80057ec:	e012      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80057ee:	bf00      	nop
 80057f0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f4:	4aaf      	ldr	r2, [pc, #700]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80057f6:	4baf      	ldr	r3, [pc, #700]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80057f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005800:	e00e      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3304      	adds	r3, #4
 8005806:	2102      	movs	r1, #2
 8005808:	4618      	mov	r0, r3
 800580a:	f001 fddf 	bl	80073cc <RCCEx_PLL2_Config>
 800580e:	4603      	mov	r3, r0
 8005810:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005812:	e005      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	75fb      	strb	r3, [r7, #23]
      break;
 8005818:	e002      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800581a:	bf00      	nop
 800581c:	e000      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800581e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005820:	7dfb      	ldrb	r3, [r7, #23]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005826:	49a3      	ldr	r1, [pc, #652]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005828:	4ba2      	ldr	r3, [pc, #648]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800582a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005834:	4313      	orrs	r3, r2
 8005836:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005838:	e001      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583a:	7dfb      	ldrb	r3, [r7, #23]
 800583c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d042      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005852:	d01f      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005858:	d805      	bhi.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800585e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005862:	d00e      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005864:	e01f      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005866:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800586a:	d01f      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800586c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005870:	d01e      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005872:	e018      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005874:	4a8f      	ldr	r2, [pc, #572]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005876:	4b8f      	ldr	r3, [pc, #572]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800587e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005880:	e017      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	3304      	adds	r3, #4
 8005886:	2100      	movs	r1, #0
 8005888:	4618      	mov	r0, r3
 800588a:	f001 fd9f 	bl	80073cc <RCCEx_PLL2_Config>
 800588e:	4603      	mov	r3, r0
 8005890:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005892:	e00e      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3324      	adds	r3, #36	; 0x24
 8005898:	2100      	movs	r1, #0
 800589a:	4618      	mov	r0, r3
 800589c:	f001 fe48 	bl	8007530 <RCCEx_PLL3_Config>
 80058a0:	4603      	mov	r3, r0
 80058a2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058a4:	e005      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	75fb      	strb	r3, [r7, #23]
      break;
 80058aa:	e002      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80058ac:	bf00      	nop
 80058ae:	e000      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80058b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b2:	7dfb      	ldrb	r3, [r7, #23]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d109      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80058b8:	497e      	ldr	r1, [pc, #504]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80058ba:	4b7e      	ldr	r3, [pc, #504]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80058bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058be:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c6:	4313      	orrs	r3, r2
 80058c8:	650b      	str	r3, [r1, #80]	; 0x50
 80058ca:	e001      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058cc:	7dfb      	ldrb	r3, [r7, #23]
 80058ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d042      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058e4:	d01b      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80058e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058ea:	d805      	bhi.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d022      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80058f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f4:	d00a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80058f6:	e01b      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80058f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058fc:	d01d      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80058fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005902:	d01c      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005904:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005908:	d01b      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800590a:	e011      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3304      	adds	r3, #4
 8005910:	2101      	movs	r1, #1
 8005912:	4618      	mov	r0, r3
 8005914:	f001 fd5a 	bl	80073cc <RCCEx_PLL2_Config>
 8005918:	4603      	mov	r3, r0
 800591a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800591c:	e012      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3324      	adds	r3, #36	; 0x24
 8005922:	2101      	movs	r1, #1
 8005924:	4618      	mov	r0, r3
 8005926:	f001 fe03 	bl	8007530 <RCCEx_PLL3_Config>
 800592a:	4603      	mov	r3, r0
 800592c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800592e:	e009      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	75fb      	strb	r3, [r7, #23]
      break;
 8005934:	e006      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005936:	bf00      	nop
 8005938:	e004      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800593a:	bf00      	nop
 800593c:	e002      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005942:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005944:	7dfb      	ldrb	r3, [r7, #23]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800594a:	495a      	ldr	r1, [pc, #360]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800594c:	4b59      	ldr	r3, [pc, #356]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800594e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005950:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005958:	4313      	orrs	r3, r2
 800595a:	650b      	str	r3, [r1, #80]	; 0x50
 800595c:	e001      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595e:	7dfb      	ldrb	r3, [r7, #23]
 8005960:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d044      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005978:	d01b      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800597a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800597e:	d805      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005980:	2b00      	cmp	r3, #0
 8005982:	d022      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005988:	d00a      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800598a:	e01b      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005990:	d01d      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005996:	d01c      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005998:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800599c:	d01b      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800599e:	e011      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3304      	adds	r3, #4
 80059a4:	2101      	movs	r1, #1
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 fd10 	bl	80073cc <RCCEx_PLL2_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80059b0:	e012      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3324      	adds	r3, #36	; 0x24
 80059b6:	2101      	movs	r1, #1
 80059b8:	4618      	mov	r0, r3
 80059ba:	f001 fdb9 	bl	8007530 <RCCEx_PLL3_Config>
 80059be:	4603      	mov	r3, r0
 80059c0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80059c2:	e009      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	75fb      	strb	r3, [r7, #23]
      break;
 80059c8:	e006      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80059ca:	bf00      	nop
 80059cc:	e004      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80059ce:	bf00      	nop
 80059d0:	e002      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80059d2:	bf00      	nop
 80059d4:	e000      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80059d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80059de:	4935      	ldr	r1, [pc, #212]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80059e0:	4b34      	ldr	r3, [pc, #208]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80059e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80059ee:	4313      	orrs	r3, r2
 80059f0:	658b      	str	r3, [r1, #88]	; 0x58
 80059f2:	e001      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
 80059f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d02d      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a0c:	d005      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005a0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a12:	d009      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d013      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005a18:	e00f      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a1a:	4a26      	ldr	r2, [pc, #152]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005a1c:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005a26:	e00c      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 fccc 	bl	80073cc <RCCEx_PLL2_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005a38:	e003      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a3e:	e000      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a48:	491a      	ldr	r1, [pc, #104]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005a4a:	4b1a      	ldr	r3, [pc, #104]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a56:	4313      	orrs	r3, r2
 8005a58:	650b      	str	r3, [r1, #80]	; 0x50
 8005a5a:	e001      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
 8005a5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d035      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d81b      	bhi.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005a74:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7a:	bf00      	nop
 8005a7c:	08005ab9 	.word	0x08005ab9
 8005a80:	08005a8d 	.word	0x08005a8d
 8005a84:	08005a9b 	.word	0x08005a9b
 8005a88:	08005ab9 	.word	0x08005ab9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a8c:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005a8e:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005a98:	e00f      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	2102      	movs	r1, #2
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f001 fc93 	bl	80073cc <RCCEx_PLL2_Config>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005aaa:	e006      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab0:	e003      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005ab2:	bf00      	nop
 8005ab4:	58024400 	.word	0x58024400
      break;
 8005ab8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d109      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ac0:	49ba      	ldr	r1, [pc, #744]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ac2:	4bba      	ldr	r3, [pc, #744]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac6:	f023 0203 	bic.w	r2, r3, #3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ad2:	e001      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 8086 	beq.w	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ae6:	4ab2      	ldr	r2, [pc, #712]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005ae8:	4bb1      	ldr	r3, [pc, #708]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005af2:	f7fa fdff 	bl	80006f4 <HAL_GetTick>
 8005af6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005af8:	e009      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005afa:	f7fa fdfb 	bl	80006f4 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b64      	cmp	r3, #100	; 0x64
 8005b06:	d902      	bls.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	75fb      	strb	r3, [r7, #23]
        break;
 8005b0c:	e005      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b0e:	4ba8      	ldr	r3, [pc, #672]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0ef      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d166      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b20:	4ba2      	ldr	r3, [pc, #648]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005b22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b2a:	4053      	eors	r3, r2
 8005b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d013      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b34:	4b9d      	ldr	r3, [pc, #628]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b3e:	4a9b      	ldr	r2, [pc, #620]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005b40:	4b9a      	ldr	r3, [pc, #616]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b48:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b4a:	4a98      	ldr	r2, [pc, #608]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005b4c:	4b97      	ldr	r3, [pc, #604]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b54:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b56:	4a95      	ldr	r2, [pc, #596]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b66:	d115      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b68:	f7fa fdc4 	bl	80006f4 <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b6e:	e00b      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b70:	f7fa fdc0 	bl	80006f4 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d902      	bls.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	75fb      	strb	r3, [r7, #23]
            break;
 8005b86:	e005      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b88:	4b88      	ldr	r3, [pc, #544]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0ed      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d126      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ba8:	d10d      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005baa:	4880      	ldr	r0, [pc, #512]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005bac:	4b7f      	ldr	r3, [pc, #508]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bba:	0919      	lsrs	r1, r3, #4
 8005bbc:	4b7d      	ldr	r3, [pc, #500]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005bbe:	400b      	ands	r3, r1
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	6103      	str	r3, [r0, #16]
 8005bc4:	e005      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005bc6:	4a79      	ldr	r2, [pc, #484]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005bc8:	4b78      	ldr	r3, [pc, #480]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005bd0:	6113      	str	r3, [r2, #16]
 8005bd2:	4976      	ldr	r1, [pc, #472]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005bd4:	4b75      	ldr	r3, [pc, #468]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005bd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be2:	4313      	orrs	r3, r2
 8005be4:	670b      	str	r3, [r1, #112]	; 0x70
 8005be6:	e004      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
 8005bea:	75bb      	strb	r3, [r7, #22]
 8005bec:	e001      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d07d      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c02:	2b28      	cmp	r3, #40	; 0x28
 8005c04:	d866      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005c06:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0c:	08005cdb 	.word	0x08005cdb
 8005c10:	08005cd5 	.word	0x08005cd5
 8005c14:	08005cd5 	.word	0x08005cd5
 8005c18:	08005cd5 	.word	0x08005cd5
 8005c1c:	08005cd5 	.word	0x08005cd5
 8005c20:	08005cd5 	.word	0x08005cd5
 8005c24:	08005cd5 	.word	0x08005cd5
 8005c28:	08005cd5 	.word	0x08005cd5
 8005c2c:	08005cb1 	.word	0x08005cb1
 8005c30:	08005cd5 	.word	0x08005cd5
 8005c34:	08005cd5 	.word	0x08005cd5
 8005c38:	08005cd5 	.word	0x08005cd5
 8005c3c:	08005cd5 	.word	0x08005cd5
 8005c40:	08005cd5 	.word	0x08005cd5
 8005c44:	08005cd5 	.word	0x08005cd5
 8005c48:	08005cd5 	.word	0x08005cd5
 8005c4c:	08005cc3 	.word	0x08005cc3
 8005c50:	08005cd5 	.word	0x08005cd5
 8005c54:	08005cd5 	.word	0x08005cd5
 8005c58:	08005cd5 	.word	0x08005cd5
 8005c5c:	08005cd5 	.word	0x08005cd5
 8005c60:	08005cd5 	.word	0x08005cd5
 8005c64:	08005cd5 	.word	0x08005cd5
 8005c68:	08005cd5 	.word	0x08005cd5
 8005c6c:	08005cdb 	.word	0x08005cdb
 8005c70:	08005cd5 	.word	0x08005cd5
 8005c74:	08005cd5 	.word	0x08005cd5
 8005c78:	08005cd5 	.word	0x08005cd5
 8005c7c:	08005cd5 	.word	0x08005cd5
 8005c80:	08005cd5 	.word	0x08005cd5
 8005c84:	08005cd5 	.word	0x08005cd5
 8005c88:	08005cd5 	.word	0x08005cd5
 8005c8c:	08005cdb 	.word	0x08005cdb
 8005c90:	08005cd5 	.word	0x08005cd5
 8005c94:	08005cd5 	.word	0x08005cd5
 8005c98:	08005cd5 	.word	0x08005cd5
 8005c9c:	08005cd5 	.word	0x08005cd5
 8005ca0:	08005cd5 	.word	0x08005cd5
 8005ca4:	08005cd5 	.word	0x08005cd5
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	08005cdb 	.word	0x08005cdb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f001 fb88 	bl	80073cc <RCCEx_PLL2_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005cc0:	e00c      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3324      	adds	r3, #36	; 0x24
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f001 fc31 	bl	8007530 <RCCEx_PLL3_Config>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005cd2:	e003      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd8:	e000      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005cda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d109      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ce2:	4932      	ldr	r1, [pc, #200]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ce4:	4b31      	ldr	r3, [pc, #196]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	654b      	str	r3, [r1, #84]	; 0x54
 8005cf4:	e001      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
 8005cf8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d037      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	d820      	bhi.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005d0e:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d14:	08005d57 	.word	0x08005d57
 8005d18:	08005d2d 	.word	0x08005d2d
 8005d1c:	08005d3f 	.word	0x08005d3f
 8005d20:	08005d57 	.word	0x08005d57
 8005d24:	08005d57 	.word	0x08005d57
 8005d28:	08005d57 	.word	0x08005d57
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	2101      	movs	r1, #1
 8005d32:	4618      	mov	r0, r3
 8005d34:	f001 fb4a 	bl	80073cc <RCCEx_PLL2_Config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005d3c:	e00c      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	3324      	adds	r3, #36	; 0x24
 8005d42:	2101      	movs	r1, #1
 8005d44:	4618      	mov	r0, r3
 8005d46:	f001 fbf3 	bl	8007530 <RCCEx_PLL3_Config>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005d4e:	e003      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	75fb      	strb	r3, [r7, #23]
      break;
 8005d54:	e000      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8005d56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d109      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d5e:	4913      	ldr	r1, [pc, #76]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005d60:	4b12      	ldr	r3, [pc, #72]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d64:	f023 0207 	bic.w	r2, r3, #7
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	654b      	str	r3, [r1, #84]	; 0x54
 8005d70:	e001      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d72:	7dfb      	ldrb	r3, [r7, #23]
 8005d74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0304 	and.w	r3, r3, #4
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d040      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d88:	2b05      	cmp	r3, #5
 8005d8a:	d827      	bhi.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005d8c:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8005d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d92:	bf00      	nop
 8005d94:	08005de3 	.word	0x08005de3
 8005d98:	08005db9 	.word	0x08005db9
 8005d9c:	08005dcb 	.word	0x08005dcb
 8005da0:	08005de3 	.word	0x08005de3
 8005da4:	08005de3 	.word	0x08005de3
 8005da8:	08005de3 	.word	0x08005de3
 8005dac:	58024400 	.word	0x58024400
 8005db0:	58024800 	.word	0x58024800
 8005db4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 fb04 	bl	80073cc <RCCEx_PLL2_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005dc8:	e00c      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	3324      	adds	r3, #36	; 0x24
 8005dce:	2101      	movs	r1, #1
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f001 fbad 	bl	8007530 <RCCEx_PLL3_Config>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005dda:	e003      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	75fb      	strb	r3, [r7, #23]
      break;
 8005de0:	e000      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8005de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005de4:	7dfb      	ldrb	r3, [r7, #23]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dea:	49b2      	ldr	r1, [pc, #712]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005dec:	4bb1      	ldr	r3, [pc, #708]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df0:	f023 0207 	bic.w	r2, r3, #7
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	658b      	str	r3, [r1, #88]	; 0x58
 8005dfe:	e001      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e00:	7dfb      	ldrb	r3, [r7, #23]
 8005e02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d044      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e1a:	d01b      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e20:	d805      	bhi.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d022      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005e26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e2a:	d00a      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005e2c:	e01b      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e32:	d01d      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e38:	d01c      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005e3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e3e:	d01b      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005e40:	e011      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3304      	adds	r3, #4
 8005e46:	2100      	movs	r1, #0
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 fabf 	bl	80073cc <RCCEx_PLL2_Config>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005e52:	e012      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3324      	adds	r3, #36	; 0x24
 8005e58:	2102      	movs	r1, #2
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f001 fb68 	bl	8007530 <RCCEx_PLL3_Config>
 8005e60:	4603      	mov	r3, r0
 8005e62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005e64:	e009      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	75fb      	strb	r3, [r7, #23]
      break;
 8005e6a:	e006      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005e6c:	bf00      	nop
 8005e6e:	e004      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005e70:	bf00      	nop
 8005e72:	e002      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005e74:	bf00      	nop
 8005e76:	e000      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e7a:	7dfb      	ldrb	r3, [r7, #23]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e80:	498c      	ldr	r1, [pc, #560]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005e82:	4b8c      	ldr	r3, [pc, #560]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e90:	4313      	orrs	r3, r2
 8005e92:	654b      	str	r3, [r1, #84]	; 0x54
 8005e94:	e001      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
 8005e98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d044      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb0:	d01b      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb6:	d805      	bhi.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d022      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005ec2:	e01b      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec8:	d01d      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005eca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ece:	d01c      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005ed0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ed4:	d01b      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005ed6:	e011      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3304      	adds	r3, #4
 8005edc:	2100      	movs	r1, #0
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f001 fa74 	bl	80073cc <RCCEx_PLL2_Config>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005ee8:	e012      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3324      	adds	r3, #36	; 0x24
 8005eee:	2102      	movs	r1, #2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 fb1d 	bl	8007530 <RCCEx_PLL3_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005efa:	e009      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	75fb      	strb	r3, [r7, #23]
      break;
 8005f00:	e006      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005f02:	bf00      	nop
 8005f04:	e004      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005f06:	bf00      	nop
 8005f08:	e002      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005f0a:	bf00      	nop
 8005f0c:	e000      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f10:	7dfb      	ldrb	r3, [r7, #23]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10a      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f16:	4967      	ldr	r1, [pc, #412]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005f18:	4b66      	ldr	r3, [pc, #408]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f26:	4313      	orrs	r3, r2
 8005f28:	658b      	str	r3, [r1, #88]	; 0x58
 8005f2a:	e001      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
 8005f2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d044      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f46:	d01b      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f4c:	d805      	bhi.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d022      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f56:	d00a      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005f58:	e01b      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f5e:	d01d      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005f60:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f64:	d01c      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005f66:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f6a:	d01b      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005f6c:	e011      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3304      	adds	r3, #4
 8005f72:	2100      	movs	r1, #0
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 fa29 	bl	80073cc <RCCEx_PLL2_Config>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005f7e:	e012      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3324      	adds	r3, #36	; 0x24
 8005f84:	2102      	movs	r1, #2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f001 fad2 	bl	8007530 <RCCEx_PLL3_Config>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005f90:	e009      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	75fb      	strb	r3, [r7, #23]
      break;
 8005f96:	e006      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005f98:	bf00      	nop
 8005f9a:	e004      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005f9c:	bf00      	nop
 8005f9e:	e002      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005fa0:	bf00      	nop
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005fac:	4941      	ldr	r1, [pc, #260]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005fae:	4b41      	ldr	r3, [pc, #260]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	658b      	str	r3, [r1, #88]	; 0x58
 8005fc0:	e001      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
 8005fc4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d01a      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fdc:	d10a      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3324      	adds	r3, #36	; 0x24
 8005fe2:	2102      	movs	r1, #2
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f001 faa3 	bl	8007530 <RCCEx_PLL3_Config>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ff4:	492f      	ldr	r1, [pc, #188]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005ff6:	4b2f      	ldr	r3, [pc, #188]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006004:	4313      	orrs	r3, r2
 8006006:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b00      	cmp	r3, #0
 8006012:	d01a      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800601a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800601e:	d10a      	bne.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3324      	adds	r3, #36	; 0x24
 8006024:	2102      	movs	r1, #2
 8006026:	4618      	mov	r0, r3
 8006028:	f001 fa82 	bl	8007530 <RCCEx_PLL3_Config>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006036:	491f      	ldr	r1, [pc, #124]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006038:	4b1e      	ldr	r3, [pc, #120]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800603a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006046:	4313      	orrs	r3, r2
 8006048:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d032      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800605c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006060:	d00d      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006066:	d016      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006068:	2b00      	cmp	r3, #0
 800606a:	d111      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3304      	adds	r3, #4
 8006070:	2100      	movs	r1, #0
 8006072:	4618      	mov	r0, r3
 8006074:	f001 f9aa 	bl	80073cc <RCCEx_PLL2_Config>
 8006078:	4603      	mov	r3, r0
 800607a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800607c:	e00c      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3324      	adds	r3, #36	; 0x24
 8006082:	2102      	movs	r1, #2
 8006084:	4618      	mov	r0, r3
 8006086:	f001 fa53 	bl	8007530 <RCCEx_PLL3_Config>
 800608a:	4603      	mov	r3, r0
 800608c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800608e:	e003      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	75fb      	strb	r3, [r7, #23]
      break;
 8006094:	e000      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10c      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800609e:	4905      	ldr	r1, [pc, #20]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80060a0:	4b04      	ldr	r3, [pc, #16]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80060a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060ae:	4313      	orrs	r3, r2
 80060b0:	658b      	str	r3, [r1, #88]	; 0x58
 80060b2:	e003      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80060b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
 80060ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d02f      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060d2:	d00c      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80060d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060d8:	d015      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80060da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060de:	d10f      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e0:	4a81      	ldr	r2, [pc, #516]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80060e2:	4b81      	ldr	r3, [pc, #516]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80060ec:	e00c      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3324      	adds	r3, #36	; 0x24
 80060f2:	2101      	movs	r1, #1
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 fa1b 	bl	8007530 <RCCEx_PLL3_Config>
 80060fa:	4603      	mov	r3, r0
 80060fc:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80060fe:	e003      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	75fb      	strb	r3, [r7, #23]
      break;
 8006104:	e000      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006108:	7dfb      	ldrb	r3, [r7, #23]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800610e:	4976      	ldr	r1, [pc, #472]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006110:	4b75      	ldr	r3, [pc, #468]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800611e:	4313      	orrs	r3, r2
 8006120:	654b      	str	r3, [r1, #84]	; 0x54
 8006122:	e001      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006124:	7dfb      	ldrb	r3, [r7, #23]
 8006126:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d029      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800613c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006140:	d007      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006142:	e00f      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006144:	4a68      	ldr	r2, [pc, #416]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006146:	4b68      	ldr	r3, [pc, #416]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800614e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006150:	e00b      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3304      	adds	r3, #4
 8006156:	2102      	movs	r1, #2
 8006158:	4618      	mov	r0, r3
 800615a:	f001 f937 	bl	80073cc <RCCEx_PLL2_Config>
 800615e:	4603      	mov	r3, r0
 8006160:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006162:	e002      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	75fb      	strb	r3, [r7, #23]
      break;
 8006168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800616a:	7dfb      	ldrb	r3, [r7, #23]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d109      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006170:	495d      	ldr	r1, [pc, #372]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006172:	4b5d      	ldr	r3, [pc, #372]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006176:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800617e:	4313      	orrs	r3, r2
 8006180:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006182:	e001      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006184:	7dfb      	ldrb	r3, [r7, #23]
 8006186:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3324      	adds	r3, #36	; 0x24
 8006198:	2102      	movs	r1, #2
 800619a:	4618      	mov	r0, r3
 800619c:	f001 f9c8 	bl	8007530 <RCCEx_PLL3_Config>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d02f      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061be:	d00c      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80061c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c4:	d802      	bhi.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d011      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80061ca:	e00d      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80061cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061d0:	d00f      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80061d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d6:	d00e      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80061d8:	e006      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061da:	4a43      	ldr	r2, [pc, #268]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80061dc:	4b42      	ldr	r3, [pc, #264]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80061e6:	e007      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	75fb      	strb	r3, [r7, #23]
      break;
 80061ec:	e004      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80061ee:	bf00      	nop
 80061f0:	e002      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80061f2:	bf00      	nop
 80061f4:	e000      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80061f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d109      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061fe:	493a      	ldr	r1, [pc, #232]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006200:	4b39      	ldr	r3, [pc, #228]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800620c:	4313      	orrs	r3, r2
 800620e:	654b      	str	r3, [r1, #84]	; 0x54
 8006210:	e001      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006212:	7dfb      	ldrb	r3, [r7, #23]
 8006214:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d008      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006222:	4931      	ldr	r1, [pc, #196]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006224:	4b30      	ldr	r3, [pc, #192]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006228:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006230:	4313      	orrs	r3, r2
 8006232:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d009      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006240:	4929      	ldr	r1, [pc, #164]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006242:	4b29      	ldr	r3, [pc, #164]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006250:	4313      	orrs	r3, r2
 8006252:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d008      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006260:	4921      	ldr	r1, [pc, #132]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006262:	4b21      	ldr	r3, [pc, #132]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006266:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800626e:	4313      	orrs	r3, r2
 8006270:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00d      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800627e:	4a1a      	ldr	r2, [pc, #104]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006280:	4b19      	ldr	r3, [pc, #100]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006288:	6113      	str	r3, [r2, #16]
 800628a:	4917      	ldr	r1, [pc, #92]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 800628c:	4b16      	ldr	r3, [pc, #88]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006296:	4313      	orrs	r3, r2
 8006298:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	da08      	bge.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80062a2:	4911      	ldr	r1, [pc, #68]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80062a4:	4b10      	ldr	r3, [pc, #64]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80062a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b0:	4313      	orrs	r3, r2
 80062b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d009      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062c0:	4909      	ldr	r1, [pc, #36]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80062c2:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80062c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d0:	4313      	orrs	r3, r2
 80062d2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80062d4:	7dbb      	ldrb	r3, [r7, #22]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xdee>
  {
    return HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	e000      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  }
  return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	58024400 	.word	0x58024400

080062ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b090      	sub	sp, #64	; 0x40
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062fa:	f040 8092 	bne.w	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80062fe:	4ba8      	ldr	r3, [pc, #672]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (saiclocksource)
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	2b04      	cmp	r3, #4
 800630c:	f200 8085 	bhi.w	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8006310:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006316:	bf00      	nop
 8006318:	0800632d 	.word	0x0800632d
 800631c:	08006355 	.word	0x08006355
 8006320:	0800637d 	.word	0x0800637d
 8006324:	08006415 	.word	0x08006415
 8006328:	080063a5 	.word	0x080063a5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800632c:	4b9c      	ldr	r3, [pc, #624]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006334:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006338:	d108      	bne.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800633a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fef8 	bl	8007134 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006348:	f000 bc3d 	b.w	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006350:	f000 bc39 	b.w	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006354:	4b92      	ldr	r3, [pc, #584]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800635c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006360:	d108      	bne.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006362:	f107 0318 	add.w	r3, r7, #24
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fc4c 	bl	8006c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006370:	f000 bc29 	b.w	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 8006374:	2300      	movs	r3, #0
 8006376:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006378:	f000 bc25 	b.w	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800637c:	4b88      	ldr	r3, [pc, #544]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006388:	d108      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800638a:	f107 030c 	add.w	r3, r7, #12
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fd84 	bl	8006e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006398:	f000 bc15 	b.w	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 800639c:	2300      	movs	r3, #0
 800639e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063a0:	f000 bc11 	b.w	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80063a4:	4b7e      	ldr	r3, [pc, #504]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063ac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063ae:	4b7c      	ldr	r3, [pc, #496]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0304 	and.w	r3, r3, #4
 80063b6:	2b04      	cmp	r3, #4
 80063b8:	d10c      	bne.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80063ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d109      	bne.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063c0:	4b77      	ldr	r3, [pc, #476]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	08db      	lsrs	r3, r3, #3
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	4a76      	ldr	r2, [pc, #472]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
 80063d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063d2:	e01e      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063d4:	4b72      	ldr	r3, [pc, #456]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e0:	d106      	bne.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80063e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063e8:	d102      	bne.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80063ea:	4b6f      	ldr	r3, [pc, #444]	; (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80063ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ee:	e010      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063f0:	4b6b      	ldr	r3, [pc, #428]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063fc:	d106      	bne.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80063fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006404:	d102      	bne.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006406:	4b69      	ldr	r3, [pc, #420]	; (80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800640a:	e002      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800640c:	2300      	movs	r3, #0
 800640e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006410:	e3d9      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8006412:	e3d8      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006414:	4b66      	ldr	r3, [pc, #408]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006416:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006418:	e3d5      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      default :
        {
          frequency = 0;
 800641a:	2300      	movs	r3, #0
 800641c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800641e:	bf00      	nop
 8006420:	e3d1      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006428:	f040 808a 	bne.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800642c:	4b5c      	ldr	r3, [pc, #368]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800642e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006430:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006434:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (saiclocksource)
 8006436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006438:	2b80      	cmp	r3, #128	; 0x80
 800643a:	d030      	beq.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 800643c:	2b80      	cmp	r3, #128	; 0x80
 800643e:	d804      	bhi.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d008      	beq.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 8006444:	2b40      	cmp	r3, #64	; 0x40
 8006446:	d018      	beq.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 8006448:	e076      	b.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 800644a:	2bc0      	cmp	r3, #192	; 0xc0
 800644c:	d071      	beq.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 800644e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006452:	d036      	beq.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 8006454:	e070      	b.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006456:	4b52      	ldr	r3, [pc, #328]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800645e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006462:	d107      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006468:	4618      	mov	r0, r3
 800646a:	f000 fe63 	bl	8007134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006472:	e3a8      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 8006474:	2300      	movs	r3, #0
 8006476:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006478:	e3a5      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800647a:	4b49      	ldr	r3, [pc, #292]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006486:	d107      	bne.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006488:	f107 0318 	add.w	r3, r7, #24
 800648c:	4618      	mov	r0, r3
 800648e:	f000 fbb9 	bl	8006c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006496:	e396      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 8006498:	2300      	movs	r3, #0
 800649a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800649c:	e393      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800649e:	4b40      	ldr	r3, [pc, #256]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064aa:	d107      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064ac:	f107 030c 	add.w	r3, r7, #12
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 fcf3 	bl	8006e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80064ba:	e384      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064c0:	e381      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80064c2:	4b37      	ldr	r3, [pc, #220]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80064c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064ca:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064cc:	4b34      	ldr	r3, [pc, #208]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d10c      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 80064d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064de:	4b30      	ldr	r3, [pc, #192]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	08db      	lsrs	r3, r3, #3
 80064e4:	f003 0303 	and.w	r3, r3, #3
 80064e8:	4a2e      	ldr	r2, [pc, #184]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80064ea:	fa22 f303 	lsr.w	r3, r2, r3
 80064ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064f0:	e01e      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064f2:	4b2b      	ldr	r3, [pc, #172]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064fe:	d106      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8006500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006506:	d102      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x222>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006508:	4b27      	ldr	r3, [pc, #156]	; (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800650a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800650c:	e010      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800650e:	4b24      	ldr	r3, [pc, #144]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800651a:	d106      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800651c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006522:	d102      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006524:	4b21      	ldr	r3, [pc, #132]	; (80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006528:	e002      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800652e:	e34a      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8006530:	e349      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006532:	4b1f      	ldr	r3, [pc, #124]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006534:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006536:	e346      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      default :
        {
          frequency = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800653c:	bf00      	nop
 800653e:	e342      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006546:	f040 8098 	bne.w	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800654a:	4b15      	ldr	r3, [pc, #84]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800654c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800654e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006552:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (saiclocksource)
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800655a:	d03d      	beq.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 800655c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006560:	d805      	bhi.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x290>
 8006566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800656a:	d023      	beq.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 800656c:	e081      	b.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800656e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006572:	d07b      	beq.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8006574:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006578:	d040      	beq.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800657a:	e07a      	b.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800657c:	4b08      	ldr	r3, [pc, #32]	; (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006588:	d107      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800658a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800658e:	4618      	mov	r0, r3
 8006590:	f000 fdd0 	bl	8007134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006598:	e315      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 800659a:	2300      	movs	r3, #0
 800659c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800659e:	e312      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 80065a0:	58024400 	.word	0x58024400
 80065a4:	03d09000 	.word	0x03d09000
 80065a8:	003d0900 	.word	0x003d0900
 80065ac:	007a1200 	.word	0x007a1200
 80065b0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065b4:	4ba4      	ldr	r3, [pc, #656]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065c0:	d107      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065c2:	f107 0318 	add.w	r3, r7, #24
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fb1c 	bl	8006c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065d0:	e2f9      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 80065d2:	2300      	movs	r3, #0
 80065d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065d6:	e2f6      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065d8:	4b9b      	ldr	r3, [pc, #620]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e4:	d107      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065e6:	f107 030c 	add.w	r3, r7, #12
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fc56 	bl	8006e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065f4:	e2e7      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065fa:	e2e4      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80065fc:	4b92      	ldr	r3, [pc, #584]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80065fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006600:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006604:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006606:	4b90      	ldr	r3, [pc, #576]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0304 	and.w	r3, r3, #4
 800660e:	2b04      	cmp	r3, #4
 8006610:	d10c      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006614:	2b00      	cmp	r3, #0
 8006616:	d109      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006618:	4b8b      	ldr	r3, [pc, #556]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	08db      	lsrs	r3, r3, #3
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	4a8a      	ldr	r2, [pc, #552]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x560>)
 8006624:	fa22 f303 	lsr.w	r3, r2, r3
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800662a:	e01e      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800662c:	4b86      	ldr	r3, [pc, #536]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006638:	d106      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 800663a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006640:	d102      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006642:	4b83      	ldr	r3, [pc, #524]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x564>)
 8006644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006646:	e010      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006648:	4b7f      	ldr	r3, [pc, #508]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006654:	d106      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8006656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800665c:	d102      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800665e:	4b7d      	ldr	r3, [pc, #500]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x568>)
 8006660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006662:	e002      	b.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006668:	e2ad      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 800666a:	e2ac      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800666c:	4b7a      	ldr	r3, [pc, #488]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800666e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006670:	e2a9      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      default :
        {
          frequency = 0;
 8006672:	2300      	movs	r3, #0
 8006674:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006676:	bf00      	nop
 8006678:	e2a5      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006680:	f040 808e 	bne.w	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006684:	4b70      	ldr	r3, [pc, #448]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8006686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006688:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800668c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (saiclocksource)
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006694:	d033      	beq.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8006696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800669a:	d805      	bhi.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00a      	beq.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
 80066a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066a4:	d019      	beq.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 80066a6:	e077      	b.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
 80066a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80066ac:	d071      	beq.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80066ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066b2:	d036      	beq.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80066b4:	e070      	b.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066b6:	4b64      	ldr	r3, [pc, #400]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066c2:	d107      	bne.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 fd33 	bl	8007134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066d2:	e278      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 80066d4:	2300      	movs	r3, #0
 80066d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066d8:	e275      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066da:	4b5b      	ldr	r3, [pc, #364]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066e6:	d107      	bne.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066e8:	f107 0318 	add.w	r3, r7, #24
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 fa89 	bl	8006c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80066f6:	e266      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066fc:	e263      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066fe:	4b52      	ldr	r3, [pc, #328]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800670a:	d107      	bne.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x430>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800670c:	f107 030c 	add.w	r3, r7, #12
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fbc3 	bl	8006e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800671a:	e254      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006720:	e251      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006722:	4b49      	ldr	r3, [pc, #292]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8006724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006726:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800672a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800672c:	4b46      	ldr	r3, [pc, #280]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b04      	cmp	r3, #4
 8006736:	d10c      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673a:	2b00      	cmp	r3, #0
 800673c:	d109      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800673e:	4b42      	ldr	r3, [pc, #264]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	08db      	lsrs	r3, r3, #3
 8006744:	f003 0303 	and.w	r3, r3, #3
 8006748:	4a40      	ldr	r2, [pc, #256]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x560>)
 800674a:	fa22 f303 	lsr.w	r3, r2, r3
 800674e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006750:	e01e      	b.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006752:	4b3d      	ldr	r3, [pc, #244]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800675a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800675e:	d106      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8006760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006762:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006766:	d102      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006768:	4b39      	ldr	r3, [pc, #228]	; (8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x564>)
 800676a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800676c:	e010      	b.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800676e:	4b36      	ldr	r3, [pc, #216]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006776:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800677a:	d106      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800677c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006782:	d102      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006784:	4b33      	ldr	r3, [pc, #204]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x568>)
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006788:	e002      	b.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800678e:	e21a      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8006790:	e219      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006792:	4b31      	ldr	r3, [pc, #196]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006794:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006796:	e216      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      default :
        {
          frequency = 0;
 8006798:	2300      	movs	r3, #0
 800679a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800679c:	bf00      	nop
 800679e:	e212      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a6:	f040 8098 	bne.w	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80067aa:	4b27      	ldr	r3, [pc, #156]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80067ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ae:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80067b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ba:	d033      	beq.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80067bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c0:	d805      	bhi.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00a      	beq.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
 80067c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ca:	d019      	beq.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 80067cc:	e081      	b.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80067ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067d2:	d07b      	beq.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
 80067d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067d8:	d040      	beq.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
 80067da:	e07a      	b.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067dc:	4b1a      	ldr	r3, [pc, #104]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067e8:	d107      	bne.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fca0 	bl	8007134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067f8:	e1e5      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067fe:	e1e2      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006800:	4b11      	ldr	r3, [pc, #68]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006808:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800680c:	d107      	bne.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x532>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800680e:	f107 0318 	add.w	r3, r7, #24
 8006812:	4618      	mov	r0, r3
 8006814:	f000 f9f6 	bl	8006c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800681c:	e1d3      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006822:	e1d0      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006824:	4b08      	ldr	r3, [pc, #32]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800682c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006830:	d107      	bne.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006832:	f107 030c 	add.w	r3, r7, #12
 8006836:	4618      	mov	r0, r3
 8006838:	f000 fb30 	bl	8006e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006840:	e1c1      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006846:	e1be      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8006848:	58024400 	.word	0x58024400
 800684c:	03d09000 	.word	0x03d09000
 8006850:	003d0900 	.word	0x003d0900
 8006854:	007a1200 	.word	0x007a1200
 8006858:	00bb8000 	.word	0x00bb8000
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800685c:	4ba6      	ldr	r3, [pc, #664]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800685e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006860:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006864:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006866:	4ba4      	ldr	r3, [pc, #656]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0304 	and.w	r3, r3, #4
 800686e:	2b04      	cmp	r3, #4
 8006870:	d10c      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8006872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006874:	2b00      	cmp	r3, #0
 8006876:	d109      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006878:	4b9f      	ldr	r3, [pc, #636]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	08db      	lsrs	r3, r3, #3
 800687e:	f003 0303 	and.w	r3, r3, #3
 8006882:	4a9e      	ldr	r2, [pc, #632]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006884:	fa22 f303 	lsr.w	r3, r2, r3
 8006888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800688a:	e01e      	b.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800688c:	4b9a      	ldr	r3, [pc, #616]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006898:	d106      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 800689a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068a0:	d102      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80068a2:	4b97      	ldr	r3, [pc, #604]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80068a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a6:	e010      	b.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068a8:	4b93      	ldr	r3, [pc, #588]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068b4:	d106      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 80068b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068bc:	d102      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80068be:	4b91      	ldr	r3, [pc, #580]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068c2:	e002      	b.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80068c8:	e17d      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 80068ca:	e17c      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80068cc:	4b8e      	ldr	r3, [pc, #568]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068d0:	e179      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      default :
        {
          frequency = 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068d6:	bf00      	nop
 80068d8:	e175      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068e0:	d16d      	bne.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80068e2:	4b85      	ldr	r3, [pc, #532]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80068e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068ea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f2:	d016      	beq.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80068f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068f8:	d025      	beq.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d15b      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068fe:	4b7e      	ldr	r3, [pc, #504]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800690a:	d107      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800690c:	f107 0318 	add.w	r3, r7, #24
 8006910:	4618      	mov	r0, r3
 8006912:	f000 f977 	bl	8006c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800691a:	e154      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006920:	e151      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006922:	4b75      	ldr	r3, [pc, #468]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800692a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800692e:	d107      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006930:	f107 030c 	add.w	r3, r7, #12
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fab1 	bl	8006e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800693e:	e142      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006944:	e13f      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006946:	4b6c      	ldr	r3, [pc, #432]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800694a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800694e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006950:	4b69      	ldr	r3, [pc, #420]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b04      	cmp	r3, #4
 800695a:	d10c      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800695c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006962:	4b65      	ldr	r3, [pc, #404]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	08db      	lsrs	r3, r3, #3
 8006968:	f003 0303 	and.w	r3, r3, #3
 800696c:	4a63      	ldr	r2, [pc, #396]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800696e:	fa22 f303 	lsr.w	r3, r2, r3
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006974:	e01e      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006976:	4b60      	ldr	r3, [pc, #384]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006982:	d106      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8006984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006986:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800698a:	d102      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800698c:	4b5c      	ldr	r3, [pc, #368]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 800698e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006990:	e010      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006992:	4b59      	ldr	r3, [pc, #356]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800699e:	d106      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 80069a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a6:	d102      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80069a8:	4b56      	ldr	r3, [pc, #344]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ac:	e002      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80069b2:	e108      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 80069b4:	e107      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      default :
        {
          frequency = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069ba:	bf00      	nop
 80069bc:	e103      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069c4:	d133      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80069c6:	4b4c      	ldr	r3, [pc, #304]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80069c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069ce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
 80069d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069da:	d012      	beq.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80069dc:	e023      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069de:	4b46      	ldr	r3, [pc, #280]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069ea:	d107      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x710>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fb9f 	bl	8007134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80069fa:	e0e4      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a00:	e0e1      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a02:	4b3d      	ldr	r3, [pc, #244]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a0e:	d107      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a10:	f107 0318 	add.w	r3, r7, #24
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 f8f5 	bl	8006c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a1e:	e0d2      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a24:	e0cf      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      default :
        {
          frequency = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a2a:	bf00      	nop
 8006a2c:	e0cb      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a34:	d17e      	bne.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006a36:	4b30      	ldr	r3, [pc, #192]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006a3e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a46:	d028      	beq.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8006a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a4c:	d805      	bhi.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00d      	beq.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006a52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a56:	d00e      	beq.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8006a58:	e068      	b.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5e:	d041      	beq.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a64:	d055      	beq.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
 8006a66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a6a:	d028      	beq.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
 8006a6c:	e05e      	b.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006a6e:	f000 f8b3 	bl	8006bd8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a72:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006a74:	e0a7      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a76:	4b20      	ldr	r3, [pc, #128]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a82:	d107      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a84:	f107 0318 	add.w	r3, r7, #24
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 f8bb 	bl	8006c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a92:	e098      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a98:	e095      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a9a:	4b17      	ldr	r3, [pc, #92]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa6:	d107      	bne.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aa8:	f107 030c 	add.w	r3, r7, #12
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 f9f5 	bl	8006e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ab6:	e086      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006abc:	e083      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006abe:	4b0e      	ldr	r3, [pc, #56]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d109      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006aca:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	08db      	lsrs	r3, r3, #3
 8006ad0:	f003 0303 	and.w	r3, r3, #3
 8006ad4:	4a09      	ldr	r2, [pc, #36]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8006ada:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006adc:	e073      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ae2:	e070      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006ae4:	4b04      	ldr	r3, [pc, #16]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006af0:	d10c      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
         {
          frequency = CSI_VALUE;
 8006af2:	4b03      	ldr	r3, [pc, #12]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006af6:	e066      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8006af8:	58024400 	.word	0x58024400
 8006afc:	03d09000 	.word	0x03d09000
 8006b00:	003d0900 	.word	0x003d0900
 8006b04:	007a1200 	.word	0x007a1200
 8006b08:	00bb8000 	.word	0x00bb8000
           frequency = 0;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b10:	e059      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b12:	4b2f      	ldr	r3, [pc, #188]	; (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b1e:	d102      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
         {
          frequency = HSE_VALUE;
 8006b20:	4b2c      	ldr	r3, [pc, #176]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006b22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b24:	e04f      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b2a:	e04c      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b30:	bf00      	nop
 8006b32:	e048      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b3a:	d142      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006b3c:	4b24      	ldr	r3, [pc, #144]	; (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
 8006b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b44:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b4c:	d011      	beq.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b52:	d020      	beq.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d130      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b58:	4b1d      	ldr	r3, [pc, #116]	; (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b64:	d102      	bne.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x880>
         {
          frequency = HSE_VALUE;
 8006b66:	4b1b      	ldr	r3, [pc, #108]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8006b68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b6a:	e02c      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b70:	e029      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b72:	4b17      	ldr	r3, [pc, #92]	; (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b7e:	d107      	bne.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 fad5 	bl	8007134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b8e:	e01a      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b94:	e017      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b96:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ba2:	d107      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ba4:	f107 0318 	add.w	r3, r7, #24
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 f82b 	bl	8006c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bb8:	e005      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      default :
        {
          frequency = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bbe:	bf00      	nop
 8006bc0:	e001      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      }
    }
  else
    {
      frequency = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3740      	adds	r7, #64	; 0x40
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	58024400 	.word	0x58024400
 8006bd4:	007a1200 	.word	0x007a1200

08006bd8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006bdc:	f7fe fc2c 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8006be0:	4601      	mov	r1, r0
 8006be2:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	091b      	lsrs	r3, r3, #4
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	4a04      	ldr	r2, [pc, #16]	; (8006c00 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006bee:	5cd3      	ldrb	r3, [r2, r3]
 8006bf0:	f003 031f 	and.w	r3, r3, #31
 8006bf4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	58024400 	.word	0x58024400
 8006c00:	0800baf4 	.word	0x0800baf4

08006c04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b089      	sub	sp, #36	; 0x24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c0c:	4b9d      	ldr	r3, [pc, #628]	; (8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c10:	f003 0303 	and.w	r3, r3, #3
 8006c14:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006c16:	4b9b      	ldr	r3, [pc, #620]	; (8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1a:	0b1b      	lsrs	r3, r3, #12
 8006c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c20:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006c22:	4b98      	ldr	r3, [pc, #608]	; (8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c26:	091b      	lsrs	r3, r3, #4
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006c2e:	4b95      	ldr	r3, [pc, #596]	; (8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c32:	08db      	lsrs	r3, r3, #3
 8006c34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	fb02 f303 	mul.w	r3, r2, r3
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 810a 	beq.w	8006e66 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d05a      	beq.n	8006d0e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d302      	bcc.n	8006c62 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d078      	beq.n	8006d52 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006c60:	e099      	b.n	8006d96 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c62:	4b88      	ldr	r3, [pc, #544]	; (8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0320 	and.w	r3, r3, #32
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d02d      	beq.n	8006cca <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c6e:	4b85      	ldr	r3, [pc, #532]	; (8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	08db      	lsrs	r3, r3, #3
 8006c74:	f003 0303 	and.w	r3, r3, #3
 8006c78:	4a83      	ldr	r2, [pc, #524]	; (8006e88 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8006c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	ee07 3a90 	vmov	s15, r3
 8006c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c98:	4b7a      	ldr	r3, [pc, #488]	; (8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca0:	ee07 3a90 	vmov	s15, r3
 8006ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cac:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006e8c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006cc8:	e087      	b.n	8006dda <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	ee07 3a90 	vmov	s15, r3
 8006cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006e90 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cdc:	4b69      	ldr	r3, [pc, #420]	; (8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce4:	ee07 3a90 	vmov	s15, r3
 8006ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cec:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cf0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006e8c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006cf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d0c:	e065      	b.n	8006dda <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	ee07 3a90 	vmov	s15, r3
 8006d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d18:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006e94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d20:	4b58      	ldr	r3, [pc, #352]	; (8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d28:	ee07 3a90 	vmov	s15, r3
 8006d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d30:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d34:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006e8c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006d38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d50:	e043      	b.n	8006dda <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	ee07 3a90 	vmov	s15, r3
 8006d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006e98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d64:	4b47      	ldr	r3, [pc, #284]	; (8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6c:	ee07 3a90 	vmov	s15, r3
 8006d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d74:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d78:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006e8c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006d7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d94:	e021      	b.n	8006dda <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	ee07 3a90 	vmov	s15, r3
 8006d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006e94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da8:	4b36      	ldr	r3, [pc, #216]	; (8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db0:	ee07 3a90 	vmov	s15, r3
 8006db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dbc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006e8c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dd8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006dda:	4b2a      	ldr	r3, [pc, #168]	; (8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dde:	0a5b      	lsrs	r3, r3, #9
 8006de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006de4:	ee07 3a90 	vmov	s15, r3
 8006de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006df0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006df4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e00:	ee17 2a90 	vmov	r2, s15
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006e08:	4b1e      	ldr	r3, [pc, #120]	; (8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	0c1b      	lsrs	r3, r3, #16
 8006e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e22:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e2e:	ee17 2a90 	vmov	r2, s15
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006e36:	4b13      	ldr	r3, [pc, #76]	; (8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3a:	0e1b      	lsrs	r3, r3, #24
 8006e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e40:	ee07 3a90 	vmov	s15, r3
 8006e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e50:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e5c:	ee17 2a90 	vmov	r2, s15
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e64:	e008      	b.n	8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	609a      	str	r2, [r3, #8]
}
 8006e78:	bf00      	nop
 8006e7a:	3724      	adds	r7, #36	; 0x24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	58024400 	.word	0x58024400
 8006e88:	03d09000 	.word	0x03d09000
 8006e8c:	46000000 	.word	0x46000000
 8006e90:	4c742400 	.word	0x4c742400
 8006e94:	4a742400 	.word	0x4a742400
 8006e98:	4af42400 	.word	0x4af42400

08006e9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b089      	sub	sp, #36	; 0x24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ea4:	4b9d      	ldr	r3, [pc, #628]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	f003 0303 	and.w	r3, r3, #3
 8006eac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006eae:	4b9b      	ldr	r3, [pc, #620]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb2:	0d1b      	lsrs	r3, r3, #20
 8006eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006eba:	4b98      	ldr	r3, [pc, #608]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebe:	0a1b      	lsrs	r3, r3, #8
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006ec6:	4b95      	ldr	r3, [pc, #596]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eca:	08db      	lsrs	r3, r3, #3
 8006ecc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	fb02 f303 	mul.w	r3, r2, r3
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ede:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 810a 	beq.w	80070fe <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d05a      	beq.n	8006fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d302      	bcc.n	8006efa <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d078      	beq.n	8006fea <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006ef8:	e099      	b.n	800702e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006efa:	4b88      	ldr	r3, [pc, #544]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d02d      	beq.n	8006f62 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f06:	4b85      	ldr	r3, [pc, #532]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	08db      	lsrs	r3, r3, #3
 8006f0c:	f003 0303 	and.w	r3, r3, #3
 8006f10:	4a83      	ldr	r2, [pc, #524]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006f12:	fa22 f303 	lsr.w	r3, r2, r3
 8006f16:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	ee07 3a90 	vmov	s15, r3
 8006f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f30:	4b7a      	ldr	r3, [pc, #488]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f38:	ee07 3a90 	vmov	s15, r3
 8006f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f40:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f44:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007124 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006f48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006f60:	e087      	b.n	8007072 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	ee07 3a90 	vmov	s15, r3
 8006f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006f70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f74:	4b69      	ldr	r3, [pc, #420]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7c:	ee07 3a90 	vmov	s15, r3
 8006f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f84:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f88:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007124 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006f8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fa4:	e065      	b.n	8007072 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	ee07 3a90 	vmov	s15, r3
 8006fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800712c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006fb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb8:	4b58      	ldr	r3, [pc, #352]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc0:	ee07 3a90 	vmov	s15, r3
 8006fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fcc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007124 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006fd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fe8:	e043      	b.n	8007072 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	ee07 3a90 	vmov	s15, r3
 8006ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007130 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006ff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffc:	4b47      	ldr	r3, [pc, #284]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007004:	ee07 3a90 	vmov	s15, r3
 8007008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007010:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007124 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007014:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007018:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007028:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800702c:	e021      	b.n	8007072 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007038:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800712c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800703c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007040:	4b36      	ldr	r3, [pc, #216]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007048:	ee07 3a90 	vmov	s15, r3
 800704c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007050:	ed97 6a03 	vldr	s12, [r7, #12]
 8007054:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007124 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007058:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007070:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007072:	4b2a      	ldr	r3, [pc, #168]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	0a5b      	lsrs	r3, r3, #9
 8007078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707c:	ee07 3a90 	vmov	s15, r3
 8007080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007084:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007088:	ee37 7a87 	vadd.f32	s14, s15, s14
 800708c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007098:	ee17 2a90 	vmov	r2, s15
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80070a0:	4b1e      	ldr	r3, [pc, #120]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a4:	0c1b      	lsrs	r3, r3, #16
 80070a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80070be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070c6:	ee17 2a90 	vmov	r2, s15
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80070ce:	4b13      	ldr	r3, [pc, #76]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	0e1b      	lsrs	r3, r3, #24
 80070d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d8:	ee07 3a90 	vmov	s15, r3
 80070dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80070ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070f4:	ee17 2a90 	vmov	r2, s15
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80070fc:	e008      	b.n	8007110 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	609a      	str	r2, [r3, #8]
}
 8007110:	bf00      	nop
 8007112:	3724      	adds	r7, #36	; 0x24
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	58024400 	.word	0x58024400
 8007120:	03d09000 	.word	0x03d09000
 8007124:	46000000 	.word	0x46000000
 8007128:	4c742400 	.word	0x4c742400
 800712c:	4a742400 	.word	0x4a742400
 8007130:	4af42400 	.word	0x4af42400

08007134 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007134:	b480      	push	{r7}
 8007136:	b089      	sub	sp, #36	; 0x24
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800713c:	4b9d      	ldr	r3, [pc, #628]	; (80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800713e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007140:	f003 0303 	and.w	r3, r3, #3
 8007144:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007146:	4b9b      	ldr	r3, [pc, #620]	; (80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714a:	091b      	lsrs	r3, r3, #4
 800714c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007150:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007152:	4b98      	ldr	r3, [pc, #608]	; (80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800715c:	4b95      	ldr	r3, [pc, #596]	; (80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800715e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007160:	08db      	lsrs	r3, r3, #3
 8007162:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	fb02 f303 	mul.w	r3, r2, r3
 800716c:	ee07 3a90 	vmov	s15, r3
 8007170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007174:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 810a 	beq.w	8007394 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d05a      	beq.n	800723c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007186:	2b01      	cmp	r3, #1
 8007188:	d302      	bcc.n	8007190 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800718a:	2b02      	cmp	r3, #2
 800718c:	d078      	beq.n	8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800718e:	e099      	b.n	80072c4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007190:	4b88      	ldr	r3, [pc, #544]	; (80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0320 	and.w	r3, r3, #32
 8007198:	2b00      	cmp	r3, #0
 800719a:	d02d      	beq.n	80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800719c:	4b85      	ldr	r3, [pc, #532]	; (80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	08db      	lsrs	r3, r3, #3
 80071a2:	f003 0303 	and.w	r3, r3, #3
 80071a6:	4a84      	ldr	r2, [pc, #528]	; (80073b8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80071a8:	fa22 f303 	lsr.w	r3, r2, r3
 80071ac:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	ee07 3a90 	vmov	s15, r3
 80071b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c6:	4b7b      	ldr	r3, [pc, #492]	; (80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80071c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073bc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80071de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80071f6:	e087      	b.n	8007308 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720a:	4b6a      	ldr	r3, [pc, #424]	; (80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721a:	ed97 6a03 	vldr	s12, [r7, #12]
 800721e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073bc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800722e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800723a:	e065      	b.n	8007308 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800724a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724e:	4b59      	ldr	r3, [pc, #356]	; (80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007262:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073bc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800727e:	e043      	b.n	8007308 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800728e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007292:	4b48      	ldr	r3, [pc, #288]	; (80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073bc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80072aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072c2:	e021      	b.n	8007308 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ce:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80072d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d6:	4b37      	ldr	r3, [pc, #220]	; (80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80072d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073bc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80072ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007302:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007306:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007308:	4b2a      	ldr	r3, [pc, #168]	; (80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800730a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730c:	0a5b      	lsrs	r3, r3, #9
 800730e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800731e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007322:	edd7 6a07 	vldr	s13, [r7, #28]
 8007326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800732a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800732e:	ee17 2a90 	vmov	r2, s15
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007336:	4b1f      	ldr	r3, [pc, #124]	; (80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733a:	0c1b      	lsrs	r3, r3, #16
 800733c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007340:	ee07 3a90 	vmov	s15, r3
 8007344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007348:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800734c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007350:	edd7 6a07 	vldr	s13, [r7, #28]
 8007354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800735c:	ee17 2a90 	vmov	r2, s15
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007364:	4b13      	ldr	r3, [pc, #76]	; (80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007368:	0e1b      	lsrs	r3, r3, #24
 800736a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800737a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800737e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800738a:	ee17 2a90 	vmov	r2, s15
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007392:	e008      	b.n	80073a6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	609a      	str	r2, [r3, #8]
}
 80073a6:	bf00      	nop
 80073a8:	3724      	adds	r7, #36	; 0x24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	58024400 	.word	0x58024400
 80073b8:	03d09000 	.word	0x03d09000
 80073bc:	46000000 	.word	0x46000000
 80073c0:	4c742400 	.word	0x4c742400
 80073c4:	4a742400 	.word	0x4a742400
 80073c8:	4af42400 	.word	0x4af42400

080073cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073da:	4b53      	ldr	r3, [pc, #332]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80073dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073de:	f003 0303 	and.w	r3, r3, #3
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d101      	bne.n	80073ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e099      	b.n	800751e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073ea:	4a4f      	ldr	r2, [pc, #316]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80073ec:	4b4e      	ldr	r3, [pc, #312]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073f6:	f7f9 f97d 	bl	80006f4 <HAL_GetTick>
 80073fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073fc:	e008      	b.n	8007410 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80073fe:	f7f9 f979 	bl	80006f4 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d901      	bls.n	8007410 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e086      	b.n	800751e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007410:	4b45      	ldr	r3, [pc, #276]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1f0      	bne.n	80073fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800741c:	4942      	ldr	r1, [pc, #264]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 800741e:	4b42      	ldr	r3, [pc, #264]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 8007420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007422:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	031b      	lsls	r3, r3, #12
 800742c:	4313      	orrs	r3, r2
 800742e:	628b      	str	r3, [r1, #40]	; 0x28
 8007430:	493d      	ldr	r1, [pc, #244]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	3b01      	subs	r3, #1
 8007438:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	3b01      	subs	r3, #1
 8007442:	025b      	lsls	r3, r3, #9
 8007444:	b29b      	uxth	r3, r3
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	3b01      	subs	r3, #1
 800744e:	041b      	lsls	r3, r3, #16
 8007450:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007454:	431a      	orrs	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	3b01      	subs	r3, #1
 800745c:	061b      	lsls	r3, r3, #24
 800745e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007462:	4313      	orrs	r3, r2
 8007464:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007466:	4930      	ldr	r1, [pc, #192]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 8007468:	4b2f      	ldr	r3, [pc, #188]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	4313      	orrs	r3, r2
 8007476:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007478:	492b      	ldr	r1, [pc, #172]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 800747a:	4b2b      	ldr	r3, [pc, #172]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 800747c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747e:	f023 0220 	bic.w	r2, r3, #32
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	4313      	orrs	r3, r2
 8007488:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800748a:	4a27      	ldr	r2, [pc, #156]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 800748c:	4b26      	ldr	r3, [pc, #152]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 800748e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007490:	f023 0310 	bic.w	r3, r3, #16
 8007494:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007496:	4924      	ldr	r1, [pc, #144]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 8007498:	4b23      	ldr	r3, [pc, #140]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 800749a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800749c:	4b23      	ldr	r3, [pc, #140]	; (800752c <RCCEx_PLL2_Config+0x160>)
 800749e:	4013      	ands	r3, r2
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	69d2      	ldr	r2, [r2, #28]
 80074a4:	00d2      	lsls	r2, r2, #3
 80074a6:	4313      	orrs	r3, r2
 80074a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80074aa:	4a1f      	ldr	r2, [pc, #124]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074ac:	4b1e      	ldr	r3, [pc, #120]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	f043 0310 	orr.w	r3, r3, #16
 80074b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d106      	bne.n	80074ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80074bc:	4a1a      	ldr	r2, [pc, #104]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074be:	4b1a      	ldr	r3, [pc, #104]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074c8:	e00f      	b.n	80074ea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d106      	bne.n	80074de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80074d0:	4a15      	ldr	r2, [pc, #84]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074d2:	4b15      	ldr	r3, [pc, #84]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074dc:	e005      	b.n	80074ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074de:	4a12      	ldr	r2, [pc, #72]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074e0:	4b11      	ldr	r3, [pc, #68]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074ea:	4a0f      	ldr	r2, [pc, #60]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074ec:	4b0e      	ldr	r3, [pc, #56]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f6:	f7f9 f8fd 	bl	80006f4 <HAL_GetTick>
 80074fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074fc:	e008      	b.n	8007510 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80074fe:	f7f9 f8f9 	bl	80006f4 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b02      	cmp	r3, #2
 800750a:	d901      	bls.n	8007510 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e006      	b.n	800751e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007510:	4b05      	ldr	r3, [pc, #20]	; (8007528 <RCCEx_PLL2_Config+0x15c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d0f0      	beq.n	80074fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800751c:	7bfb      	ldrb	r3, [r7, #15]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	58024400 	.word	0x58024400
 800752c:	ffff0007 	.word	0xffff0007

08007530 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800753e:	4b53      	ldr	r3, [pc, #332]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007542:	f003 0303 	and.w	r3, r3, #3
 8007546:	2b03      	cmp	r3, #3
 8007548:	d101      	bne.n	800754e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e099      	b.n	8007682 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800754e:	4a4f      	ldr	r2, [pc, #316]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007550:	4b4e      	ldr	r3, [pc, #312]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800755a:	f7f9 f8cb 	bl	80006f4 <HAL_GetTick>
 800755e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007560:	e008      	b.n	8007574 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007562:	f7f9 f8c7 	bl	80006f4 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	2b02      	cmp	r3, #2
 800756e:	d901      	bls.n	8007574 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e086      	b.n	8007682 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007574:	4b45      	ldr	r3, [pc, #276]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1f0      	bne.n	8007562 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007580:	4942      	ldr	r1, [pc, #264]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007582:	4b42      	ldr	r3, [pc, #264]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007586:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	051b      	lsls	r3, r3, #20
 8007590:	4313      	orrs	r3, r2
 8007592:	628b      	str	r3, [r1, #40]	; 0x28
 8007594:	493d      	ldr	r1, [pc, #244]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	3b01      	subs	r3, #1
 800759c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	025b      	lsls	r3, r3, #9
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	431a      	orrs	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	041b      	lsls	r3, r3, #16
 80075b4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075b8:	431a      	orrs	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	3b01      	subs	r3, #1
 80075c0:	061b      	lsls	r3, r3, #24
 80075c2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80075c6:	4313      	orrs	r3, r2
 80075c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80075ca:	4930      	ldr	r1, [pc, #192]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 80075cc:	4b2f      	ldr	r3, [pc, #188]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 80075ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	4313      	orrs	r3, r2
 80075da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075dc:	492b      	ldr	r1, [pc, #172]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 80075de:	4b2b      	ldr	r3, [pc, #172]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075ee:	4a27      	ldr	r2, [pc, #156]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 80075f0:	4b26      	ldr	r3, [pc, #152]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075fa:	4924      	ldr	r1, [pc, #144]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 80075fc:	4b23      	ldr	r3, [pc, #140]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 80075fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007600:	4b23      	ldr	r3, [pc, #140]	; (8007690 <RCCEx_PLL3_Config+0x160>)
 8007602:	4013      	ands	r3, r2
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	69d2      	ldr	r2, [r2, #28]
 8007608:	00d2      	lsls	r2, r2, #3
 800760a:	4313      	orrs	r3, r2
 800760c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800760e:	4a1f      	ldr	r2, [pc, #124]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007610:	4b1e      	ldr	r3, [pc, #120]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007618:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d106      	bne.n	800762e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007620:	4a1a      	ldr	r2, [pc, #104]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007622:	4b1a      	ldr	r3, [pc, #104]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800762a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800762c:	e00f      	b.n	800764e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d106      	bne.n	8007642 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007634:	4a15      	ldr	r2, [pc, #84]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007636:	4b15      	ldr	r3, [pc, #84]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800763e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007640:	e005      	b.n	800764e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007642:	4a12      	ldr	r2, [pc, #72]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007644:	4b11      	ldr	r3, [pc, #68]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007648:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800764c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800764e:	4a0f      	ldr	r2, [pc, #60]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007650:	4b0e      	ldr	r3, [pc, #56]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007658:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800765a:	f7f9 f84b 	bl	80006f4 <HAL_GetTick>
 800765e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007660:	e008      	b.n	8007674 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007662:	f7f9 f847 	bl	80006f4 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	2b02      	cmp	r3, #2
 800766e:	d901      	bls.n	8007674 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e006      	b.n	8007682 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007674:	4b05      	ldr	r3, [pc, #20]	; (800768c <RCCEx_PLL3_Config+0x15c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0f0      	beq.n	8007662 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007680:	7bfb      	ldrb	r3, [r7, #15]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	58024400 	.word	0x58024400
 8007690:	ffff0007 	.word	0xffff0007

08007694 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e0e9      	b.n	800787e <HAL_SPI_Init+0x1ea>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a74      	ldr	r2, [pc, #464]	; (8007888 <HAL_SPI_Init+0x1f4>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00f      	beq.n	80076da <HAL_SPI_Init+0x46>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a73      	ldr	r2, [pc, #460]	; (800788c <HAL_SPI_Init+0x1f8>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d00a      	beq.n	80076da <HAL_SPI_Init+0x46>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a71      	ldr	r2, [pc, #452]	; (8007890 <HAL_SPI_Init+0x1fc>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d005      	beq.n	80076da <HAL_SPI_Init+0x46>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	2b0f      	cmp	r3, #15
 80076d4:	d901      	bls.n	80076da <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e0d1      	b.n	800787e <HAL_SPI_Init+0x1ea>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f8da 	bl	8007894 <SPI_GetPacketSize>
 80076e0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a68      	ldr	r2, [pc, #416]	; (8007888 <HAL_SPI_Init+0x1f4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00c      	beq.n	8007706 <HAL_SPI_Init+0x72>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a66      	ldr	r2, [pc, #408]	; (800788c <HAL_SPI_Init+0x1f8>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d007      	beq.n	8007706 <HAL_SPI_Init+0x72>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a65      	ldr	r2, [pc, #404]	; (8007890 <HAL_SPI_Init+0x1fc>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d002      	beq.n	8007706 <HAL_SPI_Init+0x72>
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b08      	cmp	r3, #8
 8007704:	d811      	bhi.n	800772a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800770a:	4a5f      	ldr	r2, [pc, #380]	; (8007888 <HAL_SPI_Init+0x1f4>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d009      	beq.n	8007724 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a5d      	ldr	r2, [pc, #372]	; (800788c <HAL_SPI_Init+0x1f8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d004      	beq.n	8007724 <HAL_SPI_Init+0x90>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a5c      	ldr	r2, [pc, #368]	; (8007890 <HAL_SPI_Init+0x1fc>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d104      	bne.n	800772e <HAL_SPI_Init+0x9a>
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2b10      	cmp	r3, #16
 8007728:	d901      	bls.n	800772e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e0a7      	b.n	800787e <HAL_SPI_Init+0x1ea>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d106      	bne.n	8007748 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f003 fdc6 	bl	800b2d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	6812      	ldr	r2, [r2, #0]
 800775a:	f022 0201 	bic.w	r2, r2, #1
 800775e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007768:	d119      	bne.n	800779e <HAL_SPI_Init+0x10a>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007772:	d103      	bne.n	800777c <HAL_SPI_Init+0xe8>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007778:	2b00      	cmp	r3, #0
 800777a:	d008      	beq.n	800778e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10c      	bne.n	800779e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800778c:	d107      	bne.n	800779e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	6812      	ldr	r2, [r2, #0]
 8007796:	6812      	ldr	r2, [r2, #0]
 8007798:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800779c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	69d1      	ldr	r1, [r2, #28]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80077aa:	4311      	orrs	r1, r2
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	4311      	orrs	r1, r2
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80077b4:	4311      	orrs	r1, r2
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	68d2      	ldr	r2, [r2, #12]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80077ca:	4311      	orrs	r1, r2
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077d0:	4311      	orrs	r1, r2
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	6992      	ldr	r2, [r2, #24]
 80077d6:	4311      	orrs	r1, r2
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	6912      	ldr	r2, [r2, #16]
 80077dc:	4311      	orrs	r1, r2
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	6952      	ldr	r2, [r2, #20]
 80077e2:	4311      	orrs	r1, r2
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6a12      	ldr	r2, [r2, #32]
 80077e8:	4311      	orrs	r1, r2
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6852      	ldr	r2, [r2, #4]
 80077ee:	4311      	orrs	r1, r2
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80077f4:	4311      	orrs	r1, r2
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	6892      	ldr	r2, [r2, #8]
 80077fa:	4311      	orrs	r1, r2
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007800:	4311      	orrs	r1, r2
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007806:	430a      	orrs	r2, r1
 8007808:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d113      	bne.n	800783a <HAL_SPI_Init+0x1a6>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6812      	ldr	r2, [r2, #0]
 800781a:	6892      	ldr	r2, [r2, #8]
 800781c:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8007820:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007824:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6812      	ldr	r2, [r2, #0]
 800782e:	6892      	ldr	r2, [r2, #8]
 8007830:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8007834:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007838:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	6812      	ldr	r2, [r2, #0]
 8007842:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007844:	f022 0201 	bic.w	r2, r2, #1
 8007848:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00a      	beq.n	800786c <HAL_SPI_Init+0x1d8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	6812      	ldr	r2, [r2, #0]
 800785e:	68d2      	ldr	r2, [r2, #12]
 8007860:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007868:	430a      	orrs	r2, r1
 800786a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	40013000 	.word	0x40013000
 800788c:	40003800 	.word	0x40003800
 8007890:	40003c00 	.word	0x40003c00

08007894 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a0:	095b      	lsrs	r3, r3, #5
 80078a2:	3301      	adds	r3, #1
 80078a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	3301      	adds	r3, #1
 80078ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	3307      	adds	r3, #7
 80078b2:	08db      	lsrs	r3, r3, #3
 80078b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	fb02 f303 	mul.w	r3, r2, r3
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e049      	b.n	8007970 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d106      	bne.n	80078f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f003 ff09 	bl	800b708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2202      	movs	r2, #2
 80078fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3304      	adds	r3, #4
 8007906:	4619      	mov	r1, r3
 8007908:	4610      	mov	r0, r2
 800790a:	f000 fc2d 	bl	8008168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b01      	cmp	r3, #1
 800798a:	d001      	beq.n	8007990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e04f      	b.n	8007a30 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	6812      	ldr	r2, [r2, #0]
 80079a0:	68d2      	ldr	r2, [r2, #12]
 80079a2:	f042 0201 	orr.w	r2, r2, #1
 80079a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a23      	ldr	r2, [pc, #140]	; (8007a3c <HAL_TIM_Base_Start_IT+0xc4>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d01d      	beq.n	80079ee <HAL_TIM_Base_Start_IT+0x76>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ba:	d018      	beq.n	80079ee <HAL_TIM_Base_Start_IT+0x76>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a1f      	ldr	r2, [pc, #124]	; (8007a40 <HAL_TIM_Base_Start_IT+0xc8>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d013      	beq.n	80079ee <HAL_TIM_Base_Start_IT+0x76>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a1e      	ldr	r2, [pc, #120]	; (8007a44 <HAL_TIM_Base_Start_IT+0xcc>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d00e      	beq.n	80079ee <HAL_TIM_Base_Start_IT+0x76>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a1c      	ldr	r2, [pc, #112]	; (8007a48 <HAL_TIM_Base_Start_IT+0xd0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d009      	beq.n	80079ee <HAL_TIM_Base_Start_IT+0x76>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a1b      	ldr	r2, [pc, #108]	; (8007a4c <HAL_TIM_Base_Start_IT+0xd4>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d004      	beq.n	80079ee <HAL_TIM_Base_Start_IT+0x76>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a19      	ldr	r2, [pc, #100]	; (8007a50 <HAL_TIM_Base_Start_IT+0xd8>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d115      	bne.n	8007a1a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	4b17      	ldr	r3, [pc, #92]	; (8007a54 <HAL_TIM_Base_Start_IT+0xdc>)
 80079f6:	4013      	ands	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b06      	cmp	r3, #6
 80079fe:	d015      	beq.n	8007a2c <HAL_TIM_Base_Start_IT+0xb4>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a06:	d011      	beq.n	8007a2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	6812      	ldr	r2, [r2, #0]
 8007a10:	6812      	ldr	r2, [r2, #0]
 8007a12:	f042 0201 	orr.w	r2, r2, #1
 8007a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a18:	e008      	b.n	8007a2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	6812      	ldr	r2, [r2, #0]
 8007a24:	f042 0201 	orr.w	r2, r2, #1
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	e000      	b.n	8007a2e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	40010000 	.word	0x40010000
 8007a40:	40000400 	.word	0x40000400
 8007a44:	40000800 	.word	0x40000800
 8007a48:	40000c00 	.word	0x40000c00
 8007a4c:	40010400 	.word	0x40010400
 8007a50:	40001800 	.word	0x40001800
 8007a54:	00010007 	.word	0x00010007

08007a58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e049      	b.n	8007afe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d106      	bne.n	8007a84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f841 	bl	8007b06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2202      	movs	r2, #2
 8007a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	3304      	adds	r3, #4
 8007a94:	4619      	mov	r1, r3
 8007a96:	4610      	mov	r0, r2
 8007a98:	f000 fb66 	bl	8008168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	f003 0302 	and.w	r3, r3, #2
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d122      	bne.n	8007b76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d11b      	bne.n	8007b76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f06f 0202 	mvn.w	r2, #2
 8007b46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	f003 0303 	and.w	r3, r3, #3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fae5 	bl	800812c <HAL_TIM_IC_CaptureCallback>
 8007b62:	e005      	b.n	8007b70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fad7 	bl	8008118 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fae8 	bl	8008140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	d122      	bne.n	8007bca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b04      	cmp	r3, #4
 8007b90:	d11b      	bne.n	8007bca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f06f 0204 	mvn.w	r2, #4
 8007b9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fabb 	bl	800812c <HAL_TIM_IC_CaptureCallback>
 8007bb6:	e005      	b.n	8007bc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 faad 	bl	8008118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fabe 	bl	8008140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d122      	bne.n	8007c1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f003 0308 	and.w	r3, r3, #8
 8007be2:	2b08      	cmp	r3, #8
 8007be4:	d11b      	bne.n	8007c1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f06f 0208 	mvn.w	r2, #8
 8007bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2204      	movs	r2, #4
 8007bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	f003 0303 	and.w	r3, r3, #3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fa91 	bl	800812c <HAL_TIM_IC_CaptureCallback>
 8007c0a:	e005      	b.n	8007c18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fa83 	bl	8008118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fa94 	bl	8008140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	f003 0310 	and.w	r3, r3, #16
 8007c28:	2b10      	cmp	r3, #16
 8007c2a:	d122      	bne.n	8007c72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	f003 0310 	and.w	r3, r3, #16
 8007c36:	2b10      	cmp	r3, #16
 8007c38:	d11b      	bne.n	8007c72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f06f 0210 	mvn.w	r2, #16
 8007c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2208      	movs	r2, #8
 8007c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69db      	ldr	r3, [r3, #28]
 8007c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fa67 	bl	800812c <HAL_TIM_IC_CaptureCallback>
 8007c5e:	e005      	b.n	8007c6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fa59 	bl	8008118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa6a 	bl	8008140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d10e      	bne.n	8007c9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d107      	bne.n	8007c9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f06f 0201 	mvn.w	r2, #1
 8007c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f002 fe49 	bl	800a930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca8:	2b80      	cmp	r3, #128	; 0x80
 8007caa:	d10e      	bne.n	8007cca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb6:	2b80      	cmp	r3, #128	; 0x80
 8007cb8:	d107      	bne.n	8007cca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fee7 	bl	8008a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd8:	d10e      	bne.n	8007cf8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce4:	2b80      	cmp	r3, #128	; 0x80
 8007ce6:	d107      	bne.n	8007cf8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 feda 	bl	8008aac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d02:	2b40      	cmp	r3, #64	; 0x40
 8007d04:	d10e      	bne.n	8007d24 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d10:	2b40      	cmp	r3, #64	; 0x40
 8007d12:	d107      	bne.n	8007d24 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa18 	bl	8008154 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	f003 0320 	and.w	r3, r3, #32
 8007d2e:	2b20      	cmp	r3, #32
 8007d30:	d10e      	bne.n	8007d50 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f003 0320 	and.w	r3, r3, #32
 8007d3c:	2b20      	cmp	r3, #32
 8007d3e:	d107      	bne.n	8007d50 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f06f 0220 	mvn.w	r2, #32
 8007d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fe9a 	bl	8008a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d101      	bne.n	8007d72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007d6e:	2302      	movs	r3, #2
 8007d70:	e0fd      	b.n	8007f6e <HAL_TIM_PWM_ConfigChannel+0x216>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b14      	cmp	r3, #20
 8007d7e:	f200 80f0 	bhi.w	8007f62 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007d82:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007ddd 	.word	0x08007ddd
 8007d8c:	08007f63 	.word	0x08007f63
 8007d90:	08007f63 	.word	0x08007f63
 8007d94:	08007f63 	.word	0x08007f63
 8007d98:	08007e1d 	.word	0x08007e1d
 8007d9c:	08007f63 	.word	0x08007f63
 8007da0:	08007f63 	.word	0x08007f63
 8007da4:	08007f63 	.word	0x08007f63
 8007da8:	08007e5f 	.word	0x08007e5f
 8007dac:	08007f63 	.word	0x08007f63
 8007db0:	08007f63 	.word	0x08007f63
 8007db4:	08007f63 	.word	0x08007f63
 8007db8:	08007e9f 	.word	0x08007e9f
 8007dbc:	08007f63 	.word	0x08007f63
 8007dc0:	08007f63 	.word	0x08007f63
 8007dc4:	08007f63 	.word	0x08007f63
 8007dc8:	08007ee1 	.word	0x08007ee1
 8007dcc:	08007f63 	.word	0x08007f63
 8007dd0:	08007f63 	.word	0x08007f63
 8007dd4:	08007f63 	.word	0x08007f63
 8007dd8:	08007f21 	.word	0x08007f21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68b9      	ldr	r1, [r7, #8]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 fa5a 	bl	800829c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	6812      	ldr	r2, [r2, #0]
 8007df0:	6992      	ldr	r2, [r2, #24]
 8007df2:	f042 0208 	orr.w	r2, r2, #8
 8007df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	6812      	ldr	r2, [r2, #0]
 8007e00:	6992      	ldr	r2, [r2, #24]
 8007e02:	f022 0204 	bic.w	r2, r2, #4
 8007e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	6812      	ldr	r2, [r2, #0]
 8007e10:	6991      	ldr	r1, [r2, #24]
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	6912      	ldr	r2, [r2, #16]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	619a      	str	r2, [r3, #24]
      break;
 8007e1a:	e0a3      	b.n	8007f64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68b9      	ldr	r1, [r7, #8]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 faca 	bl	80083bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	6812      	ldr	r2, [r2, #0]
 8007e30:	6992      	ldr	r2, [r2, #24]
 8007e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	6812      	ldr	r2, [r2, #0]
 8007e40:	6992      	ldr	r2, [r2, #24]
 8007e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	6812      	ldr	r2, [r2, #0]
 8007e50:	6991      	ldr	r1, [r2, #24]
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	6912      	ldr	r2, [r2, #16]
 8007e56:	0212      	lsls	r2, r2, #8
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	619a      	str	r2, [r3, #24]
      break;
 8007e5c:	e082      	b.n	8007f64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68b9      	ldr	r1, [r7, #8]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fb33 	bl	80084d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	69d2      	ldr	r2, [r2, #28]
 8007e74:	f042 0208 	orr.w	r2, r2, #8
 8007e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	6812      	ldr	r2, [r2, #0]
 8007e82:	69d2      	ldr	r2, [r2, #28]
 8007e84:	f022 0204 	bic.w	r2, r2, #4
 8007e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	6812      	ldr	r2, [r2, #0]
 8007e92:	69d1      	ldr	r1, [r2, #28]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	6912      	ldr	r2, [r2, #16]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	61da      	str	r2, [r3, #28]
      break;
 8007e9c:	e062      	b.n	8007f64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68b9      	ldr	r1, [r7, #8]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 fb99 	bl	80085dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	6812      	ldr	r2, [r2, #0]
 8007eb2:	69d2      	ldr	r2, [r2, #28]
 8007eb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	6812      	ldr	r2, [r2, #0]
 8007ec2:	69d2      	ldr	r2, [r2, #28]
 8007ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	6812      	ldr	r2, [r2, #0]
 8007ed2:	69d1      	ldr	r1, [r2, #28]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	6912      	ldr	r2, [r2, #16]
 8007ed8:	0212      	lsls	r2, r2, #8
 8007eda:	430a      	orrs	r2, r1
 8007edc:	61da      	str	r2, [r3, #28]
      break;
 8007ede:	e041      	b.n	8007f64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68b9      	ldr	r1, [r7, #8]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fbe0 	bl	80086ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	6812      	ldr	r2, [r2, #0]
 8007ef4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007ef6:	f042 0208 	orr.w	r2, r2, #8
 8007efa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	6812      	ldr	r2, [r2, #0]
 8007f04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007f06:	f022 0204 	bic.w	r2, r2, #4
 8007f0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	6812      	ldr	r2, [r2, #0]
 8007f14:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	6912      	ldr	r2, [r2, #16]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f1e:	e021      	b.n	8007f64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68b9      	ldr	r1, [r7, #8]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 fc22 	bl	8008770 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	6812      	ldr	r2, [r2, #0]
 8007f34:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	6812      	ldr	r2, [r2, #0]
 8007f44:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	6812      	ldr	r2, [r2, #0]
 8007f54:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	6912      	ldr	r2, [r2, #16]
 8007f5a:	0212      	lsls	r2, r2, #8
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f60:	e000      	b.n	8007f64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007f62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop

08007f78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d101      	bne.n	8007f90 <HAL_TIM_ConfigClockSource+0x18>
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	e0b7      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x188>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	4b57      	ldr	r3, [pc, #348]	; (8008108 <HAL_TIM_ConfigClockSource+0x190>)
 8007fac:	4013      	ands	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b70      	cmp	r3, #112	; 0x70
 8007fc6:	d02e      	beq.n	8008026 <HAL_TIM_ConfigClockSource+0xae>
 8007fc8:	2b70      	cmp	r3, #112	; 0x70
 8007fca:	d812      	bhi.n	8007ff2 <HAL_TIM_ConfigClockSource+0x7a>
 8007fcc:	2b30      	cmp	r3, #48	; 0x30
 8007fce:	f000 8084 	beq.w	80080da <HAL_TIM_ConfigClockSource+0x162>
 8007fd2:	2b30      	cmp	r3, #48	; 0x30
 8007fd4:	d806      	bhi.n	8007fe4 <HAL_TIM_ConfigClockSource+0x6c>
 8007fd6:	2b10      	cmp	r3, #16
 8007fd8:	d07f      	beq.n	80080da <HAL_TIM_ConfigClockSource+0x162>
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	d07d      	beq.n	80080da <HAL_TIM_ConfigClockSource+0x162>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d07b      	beq.n	80080da <HAL_TIM_ConfigClockSource+0x162>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007fe2:	e084      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007fe4:	2b50      	cmp	r3, #80	; 0x50
 8007fe6:	d048      	beq.n	800807a <HAL_TIM_ConfigClockSource+0x102>
 8007fe8:	2b60      	cmp	r3, #96	; 0x60
 8007fea:	d056      	beq.n	800809a <HAL_TIM_ConfigClockSource+0x122>
 8007fec:	2b40      	cmp	r3, #64	; 0x40
 8007fee:	d064      	beq.n	80080ba <HAL_TIM_ConfigClockSource+0x142>
      break;
 8007ff0:	e07d      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007ff2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007ff6:	d070      	beq.n	80080da <HAL_TIM_ConfigClockSource+0x162>
 8007ff8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007ffc:	d809      	bhi.n	8008012 <HAL_TIM_ConfigClockSource+0x9a>
 8007ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008002:	d027      	beq.n	8008054 <HAL_TIM_ConfigClockSource+0xdc>
 8008004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008008:	d067      	beq.n	80080da <HAL_TIM_ConfigClockSource+0x162>
 800800a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800e:	d06d      	beq.n	80080ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008010:	e06d      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008012:	4a3e      	ldr	r2, [pc, #248]	; (800810c <HAL_TIM_ConfigClockSource+0x194>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d060      	beq.n	80080da <HAL_TIM_ConfigClockSource+0x162>
 8008018:	4a3d      	ldr	r2, [pc, #244]	; (8008110 <HAL_TIM_ConfigClockSource+0x198>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d05d      	beq.n	80080da <HAL_TIM_ConfigClockSource+0x162>
 800801e:	4a3d      	ldr	r2, [pc, #244]	; (8008114 <HAL_TIM_ConfigClockSource+0x19c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d05a      	beq.n	80080da <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008024:	e063      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6818      	ldr	r0, [r3, #0]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	6899      	ldr	r1, [r3, #8]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f000 fc7d 	bl	8008934 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008048:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	609a      	str	r2, [r3, #8]
      break;
 8008052:	e04c      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6818      	ldr	r0, [r3, #0]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	6899      	ldr	r1, [r3, #8]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	f000 fc66 	bl	8008934 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	6812      	ldr	r2, [r2, #0]
 8008070:	6892      	ldr	r2, [r2, #8]
 8008072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008076:	609a      	str	r2, [r3, #8]
      break;
 8008078:	e039      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6818      	ldr	r0, [r3, #0]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	6859      	ldr	r1, [r3, #4]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	461a      	mov	r2, r3
 8008088:	f000 fbd6 	bl	8008838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2150      	movs	r1, #80	; 0x50
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fc30 	bl	80088f8 <TIM_ITRx_SetConfig>
      break;
 8008098:	e029      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6818      	ldr	r0, [r3, #0]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	6859      	ldr	r1, [r3, #4]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	461a      	mov	r2, r3
 80080a8:	f000 fbf5 	bl	8008896 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2160      	movs	r1, #96	; 0x60
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 fc20 	bl	80088f8 <TIM_ITRx_SetConfig>
      break;
 80080b8:	e019      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6818      	ldr	r0, [r3, #0]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	6859      	ldr	r1, [r3, #4]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	461a      	mov	r2, r3
 80080c8:	f000 fbb6 	bl	8008838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2140      	movs	r1, #64	; 0x40
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 fc10 	bl	80088f8 <TIM_ITRx_SetConfig>
      break;
 80080d8:	e009      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4619      	mov	r1, r3
 80080e4:	4610      	mov	r0, r2
 80080e6:	f000 fc07 	bl	80088f8 <TIM_ITRx_SetConfig>
        break;
 80080ea:	e000      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x176>
      break;
 80080ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	ffceff88 	.word	0xffceff88
 800810c:	00100030 	.word	0x00100030
 8008110:	00100040 	.word	0x00100040
 8008114:	00100020 	.word	0x00100020

08008118 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a40      	ldr	r2, [pc, #256]	; (800827c <TIM_Base_SetConfig+0x114>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d013      	beq.n	80081a8 <TIM_Base_SetConfig+0x40>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008186:	d00f      	beq.n	80081a8 <TIM_Base_SetConfig+0x40>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a3d      	ldr	r2, [pc, #244]	; (8008280 <TIM_Base_SetConfig+0x118>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d00b      	beq.n	80081a8 <TIM_Base_SetConfig+0x40>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a3c      	ldr	r2, [pc, #240]	; (8008284 <TIM_Base_SetConfig+0x11c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d007      	beq.n	80081a8 <TIM_Base_SetConfig+0x40>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a3b      	ldr	r2, [pc, #236]	; (8008288 <TIM_Base_SetConfig+0x120>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d003      	beq.n	80081a8 <TIM_Base_SetConfig+0x40>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a3a      	ldr	r2, [pc, #232]	; (800828c <TIM_Base_SetConfig+0x124>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d108      	bne.n	80081ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a2f      	ldr	r2, [pc, #188]	; (800827c <TIM_Base_SetConfig+0x114>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d01f      	beq.n	8008202 <TIM_Base_SetConfig+0x9a>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c8:	d01b      	beq.n	8008202 <TIM_Base_SetConfig+0x9a>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a2c      	ldr	r2, [pc, #176]	; (8008280 <TIM_Base_SetConfig+0x118>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d017      	beq.n	8008202 <TIM_Base_SetConfig+0x9a>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a2b      	ldr	r2, [pc, #172]	; (8008284 <TIM_Base_SetConfig+0x11c>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d013      	beq.n	8008202 <TIM_Base_SetConfig+0x9a>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a2a      	ldr	r2, [pc, #168]	; (8008288 <TIM_Base_SetConfig+0x120>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d00f      	beq.n	8008202 <TIM_Base_SetConfig+0x9a>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a29      	ldr	r2, [pc, #164]	; (800828c <TIM_Base_SetConfig+0x124>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d00b      	beq.n	8008202 <TIM_Base_SetConfig+0x9a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a28      	ldr	r2, [pc, #160]	; (8008290 <TIM_Base_SetConfig+0x128>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d007      	beq.n	8008202 <TIM_Base_SetConfig+0x9a>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a27      	ldr	r2, [pc, #156]	; (8008294 <TIM_Base_SetConfig+0x12c>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d003      	beq.n	8008202 <TIM_Base_SetConfig+0x9a>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a26      	ldr	r2, [pc, #152]	; (8008298 <TIM_Base_SetConfig+0x130>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d108      	bne.n	8008214 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	4313      	orrs	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a10      	ldr	r2, [pc, #64]	; (800827c <TIM_Base_SetConfig+0x114>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d00f      	beq.n	8008260 <TIM_Base_SetConfig+0xf8>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a12      	ldr	r2, [pc, #72]	; (800828c <TIM_Base_SetConfig+0x124>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d00b      	beq.n	8008260 <TIM_Base_SetConfig+0xf8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a11      	ldr	r2, [pc, #68]	; (8008290 <TIM_Base_SetConfig+0x128>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d007      	beq.n	8008260 <TIM_Base_SetConfig+0xf8>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a10      	ldr	r2, [pc, #64]	; (8008294 <TIM_Base_SetConfig+0x12c>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d003      	beq.n	8008260 <TIM_Base_SetConfig+0xf8>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a0f      	ldr	r2, [pc, #60]	; (8008298 <TIM_Base_SetConfig+0x130>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d103      	bne.n	8008268 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	691a      	ldr	r2, [r3, #16]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	615a      	str	r2, [r3, #20]
}
 800826e:	bf00      	nop
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	40010000 	.word	0x40010000
 8008280:	40000400 	.word	0x40000400
 8008284:	40000800 	.word	0x40000800
 8008288:	40000c00 	.word	0x40000c00
 800828c:	40010400 	.word	0x40010400
 8008290:	40014000 	.word	0x40014000
 8008294:	40014400 	.word	0x40014400
 8008298:	40014800 	.word	0x40014800

0800829c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	f023 0201 	bic.w	r2, r3, #1
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	4b37      	ldr	r3, [pc, #220]	; (80083a4 <TIM_OC1_SetConfig+0x108>)
 80082c8:	4013      	ands	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 0303 	bic.w	r3, r3, #3
 80082d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f023 0302 	bic.w	r3, r3, #2
 80082e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a2d      	ldr	r2, [pc, #180]	; (80083a8 <TIM_OC1_SetConfig+0x10c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d00f      	beq.n	8008318 <TIM_OC1_SetConfig+0x7c>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a2c      	ldr	r2, [pc, #176]	; (80083ac <TIM_OC1_SetConfig+0x110>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d00b      	beq.n	8008318 <TIM_OC1_SetConfig+0x7c>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a2b      	ldr	r2, [pc, #172]	; (80083b0 <TIM_OC1_SetConfig+0x114>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d007      	beq.n	8008318 <TIM_OC1_SetConfig+0x7c>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a2a      	ldr	r2, [pc, #168]	; (80083b4 <TIM_OC1_SetConfig+0x118>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d003      	beq.n	8008318 <TIM_OC1_SetConfig+0x7c>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a29      	ldr	r2, [pc, #164]	; (80083b8 <TIM_OC1_SetConfig+0x11c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d10c      	bne.n	8008332 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	f023 0308 	bic.w	r3, r3, #8
 800831e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	697a      	ldr	r2, [r7, #20]
 8008326:	4313      	orrs	r3, r2
 8008328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f023 0304 	bic.w	r3, r3, #4
 8008330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a1c      	ldr	r2, [pc, #112]	; (80083a8 <TIM_OC1_SetConfig+0x10c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d00f      	beq.n	800835a <TIM_OC1_SetConfig+0xbe>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a1b      	ldr	r2, [pc, #108]	; (80083ac <TIM_OC1_SetConfig+0x110>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d00b      	beq.n	800835a <TIM_OC1_SetConfig+0xbe>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a1a      	ldr	r2, [pc, #104]	; (80083b0 <TIM_OC1_SetConfig+0x114>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d007      	beq.n	800835a <TIM_OC1_SetConfig+0xbe>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a19      	ldr	r2, [pc, #100]	; (80083b4 <TIM_OC1_SetConfig+0x118>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d003      	beq.n	800835a <TIM_OC1_SetConfig+0xbe>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a18      	ldr	r2, [pc, #96]	; (80083b8 <TIM_OC1_SetConfig+0x11c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d111      	bne.n	800837e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	4313      	orrs	r3, r2
 8008372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	4313      	orrs	r3, r2
 800837c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	621a      	str	r2, [r3, #32]
}
 8008398:	bf00      	nop
 800839a:	371c      	adds	r7, #28
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	fffeff8f 	.word	0xfffeff8f
 80083a8:	40010000 	.word	0x40010000
 80083ac:	40010400 	.word	0x40010400
 80083b0:	40014000 	.word	0x40014000
 80083b4:	40014400 	.word	0x40014400
 80083b8:	40014800 	.word	0x40014800

080083bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083bc:	b480      	push	{r7}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	f023 0210 	bic.w	r2, r3, #16
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4b34      	ldr	r3, [pc, #208]	; (80084b8 <TIM_OC2_SetConfig+0xfc>)
 80083e8:	4013      	ands	r3, r2
 80083ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	021b      	lsls	r3, r3, #8
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f023 0320 	bic.w	r3, r3, #32
 8008406:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	011b      	lsls	r3, r3, #4
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	4313      	orrs	r3, r2
 8008412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a29      	ldr	r2, [pc, #164]	; (80084bc <TIM_OC2_SetConfig+0x100>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <TIM_OC2_SetConfig+0x68>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a28      	ldr	r2, [pc, #160]	; (80084c0 <TIM_OC2_SetConfig+0x104>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d10d      	bne.n	8008440 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800842a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	011b      	lsls	r3, r3, #4
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800843e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a1e      	ldr	r2, [pc, #120]	; (80084bc <TIM_OC2_SetConfig+0x100>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00f      	beq.n	8008468 <TIM_OC2_SetConfig+0xac>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a1d      	ldr	r2, [pc, #116]	; (80084c0 <TIM_OC2_SetConfig+0x104>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d00b      	beq.n	8008468 <TIM_OC2_SetConfig+0xac>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a1c      	ldr	r2, [pc, #112]	; (80084c4 <TIM_OC2_SetConfig+0x108>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d007      	beq.n	8008468 <TIM_OC2_SetConfig+0xac>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a1b      	ldr	r2, [pc, #108]	; (80084c8 <TIM_OC2_SetConfig+0x10c>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d003      	beq.n	8008468 <TIM_OC2_SetConfig+0xac>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a1a      	ldr	r2, [pc, #104]	; (80084cc <TIM_OC2_SetConfig+0x110>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d113      	bne.n	8008490 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800846e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008476:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	4313      	orrs	r3, r2
 8008482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	4313      	orrs	r3, r2
 800848e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	621a      	str	r2, [r3, #32]
}
 80084aa:	bf00      	nop
 80084ac:	371c      	adds	r7, #28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	feff8fff 	.word	0xfeff8fff
 80084bc:	40010000 	.word	0x40010000
 80084c0:	40010400 	.word	0x40010400
 80084c4:	40014000 	.word	0x40014000
 80084c8:	40014400 	.word	0x40014400
 80084cc:	40014800 	.word	0x40014800

080084d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b087      	sub	sp, #28
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f023 0303 	bic.w	r3, r3, #3
 8008506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	4313      	orrs	r3, r2
 8008510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	021b      	lsls	r3, r3, #8
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	4313      	orrs	r3, r2
 8008524:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a27      	ldr	r2, [pc, #156]	; (80085c8 <TIM_OC3_SetConfig+0xf8>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d003      	beq.n	8008536 <TIM_OC3_SetConfig+0x66>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a26      	ldr	r2, [pc, #152]	; (80085cc <TIM_OC3_SetConfig+0xfc>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d10d      	bne.n	8008552 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800853c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	021b      	lsls	r3, r3, #8
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	4313      	orrs	r3, r2
 8008548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a1c      	ldr	r2, [pc, #112]	; (80085c8 <TIM_OC3_SetConfig+0xf8>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d00f      	beq.n	800857a <TIM_OC3_SetConfig+0xaa>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a1b      	ldr	r2, [pc, #108]	; (80085cc <TIM_OC3_SetConfig+0xfc>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d00b      	beq.n	800857a <TIM_OC3_SetConfig+0xaa>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a1a      	ldr	r2, [pc, #104]	; (80085d0 <TIM_OC3_SetConfig+0x100>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d007      	beq.n	800857a <TIM_OC3_SetConfig+0xaa>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a19      	ldr	r2, [pc, #100]	; (80085d4 <TIM_OC3_SetConfig+0x104>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d003      	beq.n	800857a <TIM_OC3_SetConfig+0xaa>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a18      	ldr	r2, [pc, #96]	; (80085d8 <TIM_OC3_SetConfig+0x108>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d113      	bne.n	80085a2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	011b      	lsls	r3, r3, #4
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	4313      	orrs	r3, r2
 8008594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	011b      	lsls	r3, r3, #4
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	4313      	orrs	r3, r2
 80085a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	621a      	str	r2, [r3, #32]
}
 80085bc:	bf00      	nop
 80085be:	371c      	adds	r7, #28
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	40010000 	.word	0x40010000
 80085cc:	40010400 	.word	0x40010400
 80085d0:	40014000 	.word	0x40014000
 80085d4:	40014400 	.word	0x40014400
 80085d8:	40014800 	.word	0x40014800

080085dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800860a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	021b      	lsls	r3, r3, #8
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	4313      	orrs	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	031b      	lsls	r3, r3, #12
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	4313      	orrs	r3, r2
 8008632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a18      	ldr	r2, [pc, #96]	; (8008698 <TIM_OC4_SetConfig+0xbc>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d00f      	beq.n	800865c <TIM_OC4_SetConfig+0x80>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a17      	ldr	r2, [pc, #92]	; (800869c <TIM_OC4_SetConfig+0xc0>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d00b      	beq.n	800865c <TIM_OC4_SetConfig+0x80>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a16      	ldr	r2, [pc, #88]	; (80086a0 <TIM_OC4_SetConfig+0xc4>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d007      	beq.n	800865c <TIM_OC4_SetConfig+0x80>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a15      	ldr	r2, [pc, #84]	; (80086a4 <TIM_OC4_SetConfig+0xc8>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d003      	beq.n	800865c <TIM_OC4_SetConfig+0x80>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a14      	ldr	r2, [pc, #80]	; (80086a8 <TIM_OC4_SetConfig+0xcc>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d109      	bne.n	8008670 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008662:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	019b      	lsls	r3, r3, #6
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	4313      	orrs	r3, r2
 800866e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	621a      	str	r2, [r3, #32]
}
 800868a:	bf00      	nop
 800868c:	371c      	adds	r7, #28
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	40010000 	.word	0x40010000
 800869c:	40010400 	.word	0x40010400
 80086a0:	40014000 	.word	0x40014000
 80086a4:	40014400 	.word	0x40014400
 80086a8:	40014800 	.word	0x40014800

080086ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b087      	sub	sp, #28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80086ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	041b      	lsls	r3, r3, #16
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a17      	ldr	r2, [pc, #92]	; (800875c <TIM_OC5_SetConfig+0xb0>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d00f      	beq.n	8008722 <TIM_OC5_SetConfig+0x76>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a16      	ldr	r2, [pc, #88]	; (8008760 <TIM_OC5_SetConfig+0xb4>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00b      	beq.n	8008722 <TIM_OC5_SetConfig+0x76>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a15      	ldr	r2, [pc, #84]	; (8008764 <TIM_OC5_SetConfig+0xb8>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d007      	beq.n	8008722 <TIM_OC5_SetConfig+0x76>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a14      	ldr	r2, [pc, #80]	; (8008768 <TIM_OC5_SetConfig+0xbc>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d003      	beq.n	8008722 <TIM_OC5_SetConfig+0x76>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a13      	ldr	r2, [pc, #76]	; (800876c <TIM_OC5_SetConfig+0xc0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d109      	bne.n	8008736 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008728:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	021b      	lsls	r3, r3, #8
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	621a      	str	r2, [r3, #32]
}
 8008750:	bf00      	nop
 8008752:	371c      	adds	r7, #28
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	40010000 	.word	0x40010000
 8008760:	40010400 	.word	0x40010400
 8008764:	40014000 	.word	0x40014000
 8008768:	40014400 	.word	0x40014400
 800876c:	40014800 	.word	0x40014800

08008770 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800879e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	021b      	lsls	r3, r3, #8
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	051b      	lsls	r3, r3, #20
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	4313      	orrs	r3, r2
 80087be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a18      	ldr	r2, [pc, #96]	; (8008824 <TIM_OC6_SetConfig+0xb4>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d00f      	beq.n	80087e8 <TIM_OC6_SetConfig+0x78>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a17      	ldr	r2, [pc, #92]	; (8008828 <TIM_OC6_SetConfig+0xb8>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d00b      	beq.n	80087e8 <TIM_OC6_SetConfig+0x78>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a16      	ldr	r2, [pc, #88]	; (800882c <TIM_OC6_SetConfig+0xbc>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d007      	beq.n	80087e8 <TIM_OC6_SetConfig+0x78>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a15      	ldr	r2, [pc, #84]	; (8008830 <TIM_OC6_SetConfig+0xc0>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d003      	beq.n	80087e8 <TIM_OC6_SetConfig+0x78>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a14      	ldr	r2, [pc, #80]	; (8008834 <TIM_OC6_SetConfig+0xc4>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d109      	bne.n	80087fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80087ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	029b      	lsls	r3, r3, #10
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	621a      	str	r2, [r3, #32]
}
 8008816:	bf00      	nop
 8008818:	371c      	adds	r7, #28
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	40010000 	.word	0x40010000
 8008828:	40010400 	.word	0x40010400
 800882c:	40014000 	.word	0x40014000
 8008830:	40014400 	.word	0x40014400
 8008834:	40014800 	.word	0x40014800

08008838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008838:	b480      	push	{r7}
 800883a:	b087      	sub	sp, #28
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a1b      	ldr	r3, [r3, #32]
 8008848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6a1b      	ldr	r3, [r3, #32]
 800884e:	f023 0201 	bic.w	r2, r3, #1
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	011b      	lsls	r3, r3, #4
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	4313      	orrs	r3, r2
 800886c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f023 030a 	bic.w	r3, r3, #10
 8008874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	4313      	orrs	r3, r2
 800887c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	621a      	str	r2, [r3, #32]
}
 800888a:	bf00      	nop
 800888c:	371c      	adds	r7, #28
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008896:	b480      	push	{r7}
 8008898:	b087      	sub	sp, #28
 800889a:	af00      	add	r7, sp, #0
 800889c:	60f8      	str	r0, [r7, #12]
 800889e:	60b9      	str	r1, [r7, #8]
 80088a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	f023 0210 	bic.w	r2, r3, #16
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	031b      	lsls	r3, r3, #12
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	011b      	lsls	r3, r3, #4
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	4313      	orrs	r3, r2
 80088dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	621a      	str	r2, [r3, #32]
}
 80088ea:	bf00      	nop
 80088ec:	371c      	adds	r7, #28
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
	...

080088f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	4b09      	ldr	r3, [pc, #36]	; (8008930 <TIM_ITRx_SetConfig+0x38>)
 800890c:	4013      	ands	r3, r2
 800890e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008910:	683a      	ldr	r2, [r7, #0]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	4313      	orrs	r3, r2
 8008916:	f043 0307 	orr.w	r3, r3, #7
 800891a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	609a      	str	r2, [r3, #8]
}
 8008922:	bf00      	nop
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	ffcfff8f 	.word	0xffcfff8f

08008934 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
 8008940:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800894e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	021a      	lsls	r2, r3, #8
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	431a      	orrs	r2, r3
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	4313      	orrs	r3, r2
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	4313      	orrs	r3, r2
 8008960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	609a      	str	r2, [r3, #8]
}
 8008968:	bf00      	nop
 800896a:	371c      	adds	r7, #28
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008984:	2b01      	cmp	r3, #1
 8008986:	d101      	bne.n	800898c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008988:	2302      	movs	r3, #2
 800898a:	e068      	b.n	8008a5e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2202      	movs	r2, #2
 8008998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a2e      	ldr	r2, [pc, #184]	; (8008a6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d004      	beq.n	80089c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a2d      	ldr	r2, [pc, #180]	; (8008a70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d108      	bne.n	80089d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80089c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a1e      	ldr	r2, [pc, #120]	; (8008a6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d01d      	beq.n	8008a32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089fe:	d018      	beq.n	8008a32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a1b      	ldr	r2, [pc, #108]	; (8008a74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d013      	beq.n	8008a32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a1a      	ldr	r2, [pc, #104]	; (8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d00e      	beq.n	8008a32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a18      	ldr	r2, [pc, #96]	; (8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d009      	beq.n	8008a32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a13      	ldr	r2, [pc, #76]	; (8008a70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d004      	beq.n	8008a32 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a14      	ldr	r2, [pc, #80]	; (8008a80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d10c      	bne.n	8008a4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40010000 	.word	0x40010000
 8008a70:	40010400 	.word	0x40010400
 8008a74:	40000400 	.word	0x40000400
 8008a78:	40000800 	.word	0x40000800
 8008a7c:	40000c00 	.word	0x40000c00
 8008a80:	40001800 	.word	0x40001800

08008a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e042      	b.n	8008b58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d106      	bne.n	8008aea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f002 feb9 	bl	800b85c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2224      	movs	r2, #36	; 0x24
 8008aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	6812      	ldr	r2, [r2, #0]
 8008afa:	6812      	ldr	r2, [r2, #0]
 8008afc:	f022 0201 	bic.w	r2, r2, #1
 8008b00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fb08 	bl	8009118 <UART_SetConfig>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d101      	bne.n	8008b12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e022      	b.n	8008b58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d002      	beq.n	8008b20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f001 f89c 	bl	8009c58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	6812      	ldr	r2, [r2, #0]
 8008b28:	6852      	ldr	r2, [r2, #4]
 8008b2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	6812      	ldr	r2, [r2, #0]
 8008b38:	6892      	ldr	r2, [r2, #8]
 8008b3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	6812      	ldr	r2, [r2, #0]
 8008b48:	6812      	ldr	r2, [r2, #0]
 8008b4a:	f042 0201 	orr.w	r2, r2, #1
 8008b4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f001 f923 	bl	8009d9c <UART_CheckIdleState>
 8008b56:	4603      	mov	r3, r0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b088      	sub	sp, #32
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b80:	69fa      	ldr	r2, [r7, #28]
 8008b82:	f640 030f 	movw	r3, #2063	; 0x80f
 8008b86:	4013      	ands	r3, r2
 8008b88:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d118      	bne.n	8008bc2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	f003 0320 	and.w	r3, r3, #32
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d013      	beq.n	8008bc2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	f003 0320 	and.w	r3, r3, #32
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d104      	bne.n	8008bae <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d009      	beq.n	8008bc2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f000 8283 	beq.w	80090be <HAL_UART_IRQHandler+0x55e>
      {
        huart->RxISR(huart);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	4798      	blx	r3
      }
      return;
 8008bc0:	e27d      	b.n	80090be <HAL_UART_IRQHandler+0x55e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 80ef 	beq.w	8008da8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	4b73      	ldr	r3, [pc, #460]	; (8008d9c <HAL_UART_IRQHandler+0x23c>)
 8008bce:	4013      	ands	r3, r2
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d105      	bne.n	8008be0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008bd4:	69ba      	ldr	r2, [r7, #24]
 8008bd6:	4b72      	ldr	r3, [pc, #456]	; (8008da0 <HAL_UART_IRQHandler+0x240>)
 8008bd8:	4013      	ands	r3, r2
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f000 80e4 	beq.w	8008da8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d010      	beq.n	8008c0c <HAL_UART_IRQHandler+0xac>
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00b      	beq.n	8008c0c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c02:	f043 0201 	orr.w	r2, r3, #1
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d010      	beq.n	8008c38 <HAL_UART_IRQHandler+0xd8>
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00b      	beq.n	8008c38 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2202      	movs	r2, #2
 8008c26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c2e:	f043 0204 	orr.w	r2, r3, #4
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	f003 0304 	and.w	r3, r3, #4
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d010      	beq.n	8008c64 <HAL_UART_IRQHandler+0x104>
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00b      	beq.n	8008c64 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2204      	movs	r2, #4
 8008c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c5a:	f043 0202 	orr.w	r2, r3, #2
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	f003 0308 	and.w	r3, r3, #8
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d015      	beq.n	8008c9a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	f003 0320 	and.w	r3, r3, #32
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d104      	bne.n	8008c82 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	4b48      	ldr	r3, [pc, #288]	; (8008d9c <HAL_UART_IRQHandler+0x23c>)
 8008c7c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00b      	beq.n	8008c9a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2208      	movs	r2, #8
 8008c88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c90:	f043 0208 	orr.w	r2, r3, #8
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d011      	beq.n	8008cc8 <HAL_UART_IRQHandler+0x168>
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00c      	beq.n	8008cc8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cbe:	f043 0220 	orr.w	r2, r3, #32
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 81f7 	beq.w	80090c2 <HAL_UART_IRQHandler+0x562>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	f003 0320 	and.w	r3, r3, #32
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d011      	beq.n	8008d02 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	f003 0320 	and.w	r3, r3, #32
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d104      	bne.n	8008cf2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d007      	beq.n	8008d02 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d08:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d14:	2b40      	cmp	r3, #64	; 0x40
 8008d16:	d004      	beq.n	8008d22 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d031      	beq.n	8008d86 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f001 f906 	bl	8009f34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d32:	2b40      	cmp	r3, #64	; 0x40
 8008d34:	d123      	bne.n	8008d7e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	6812      	ldr	r2, [r2, #0]
 8008d3e:	6892      	ldr	r2, [r2, #8]
 8008d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d44:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d013      	beq.n	8008d76 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d52:	4a14      	ldr	r2, [pc, #80]	; (8008da4 <HAL_UART_IRQHandler+0x244>)
 8008d54:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7f9 fe6c 	bl	8002a38 <HAL_DMA_Abort_IT>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d017      	beq.n	8008d96 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008d70:	4610      	mov	r0, r2
 8008d72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d74:	e00f      	b.n	8008d96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f9b8 	bl	80090ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d7c:	e00b      	b.n	8008d96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f9b4 	bl	80090ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d84:	e007      	b.n	8008d96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f9b0 	bl	80090ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008d94:	e195      	b.n	80090c2 <HAL_UART_IRQHandler+0x562>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d96:	bf00      	nop
    return;
 8008d98:	e193      	b.n	80090c2 <HAL_UART_IRQHandler+0x562>
 8008d9a:	bf00      	nop
 8008d9c:	10000001 	.word	0x10000001
 8008da0:	04000120 	.word	0x04000120
 8008da4:	08009f99 	.word	0x08009f99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	f040 810f 	bne.w	8008fd0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f000 8109 	beq.w	8008fd0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	f003 0310 	and.w	r3, r3, #16
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 8103 	beq.w	8008fd0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2210      	movs	r2, #16
 8008dd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ddc:	2b40      	cmp	r3, #64	; 0x40
 8008dde:	f040 80bb 	bne.w	8008f58 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a96      	ldr	r2, [pc, #600]	; (8009044 <HAL_UART_IRQHandler+0x4e4>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d059      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x342>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a94      	ldr	r2, [pc, #592]	; (8009048 <HAL_UART_IRQHandler+0x4e8>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d053      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x342>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a92      	ldr	r2, [pc, #584]	; (800904c <HAL_UART_IRQHandler+0x4ec>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d04d      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x342>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a90      	ldr	r2, [pc, #576]	; (8009050 <HAL_UART_IRQHandler+0x4f0>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d047      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x342>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a8e      	ldr	r2, [pc, #568]	; (8009054 <HAL_UART_IRQHandler+0x4f4>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d041      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x342>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a8c      	ldr	r2, [pc, #560]	; (8009058 <HAL_UART_IRQHandler+0x4f8>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d03b      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x342>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a8a      	ldr	r2, [pc, #552]	; (800905c <HAL_UART_IRQHandler+0x4fc>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d035      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x342>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a88      	ldr	r2, [pc, #544]	; (8009060 <HAL_UART_IRQHandler+0x500>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d02f      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x342>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a86      	ldr	r2, [pc, #536]	; (8009064 <HAL_UART_IRQHandler+0x504>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d029      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x342>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a84      	ldr	r2, [pc, #528]	; (8009068 <HAL_UART_IRQHandler+0x508>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d023      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x342>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a82      	ldr	r2, [pc, #520]	; (800906c <HAL_UART_IRQHandler+0x50c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d01d      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x342>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a80      	ldr	r2, [pc, #512]	; (8009070 <HAL_UART_IRQHandler+0x510>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d017      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x342>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a7e      	ldr	r2, [pc, #504]	; (8009074 <HAL_UART_IRQHandler+0x514>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d011      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x342>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a7c      	ldr	r2, [pc, #496]	; (8009078 <HAL_UART_IRQHandler+0x518>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d00b      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x342>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a7a      	ldr	r2, [pc, #488]	; (800907c <HAL_UART_IRQHandler+0x51c>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d005      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x342>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a78      	ldr	r2, [pc, #480]	; (8009080 <HAL_UART_IRQHandler+0x520>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d105      	bne.n	8008eae <HAL_UART_IRQHandler+0x34e>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	e004      	b.n	8008eb8 <HAL_UART_IRQHandler+0x358>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	817b      	strh	r3, [r7, #10]
      if ((nb_remaining_rx_data > 0U)
 8008eba:	897b      	ldrh	r3, [r7, #10]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 8102 	beq.w	80090c6 <HAL_UART_IRQHandler+0x566>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ec8:	897a      	ldrh	r2, [r7, #10]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	f080 80fb 	bcs.w	80090c6 <HAL_UART_IRQHandler+0x566>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	897a      	ldrh	r2, [r7, #10]
 8008ed4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ee2:	d02b      	beq.n	8008f3c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	6812      	ldr	r2, [r2, #0]
 8008eec:	6812      	ldr	r2, [r2, #0]
 8008eee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ef2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	6812      	ldr	r2, [r2, #0]
 8008efc:	6892      	ldr	r2, [r2, #8]
 8008efe:	f022 0201 	bic.w	r2, r2, #1
 8008f02:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	6812      	ldr	r2, [r2, #0]
 8008f0c:	6892      	ldr	r2, [r2, #8]
 8008f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f12:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2220      	movs	r2, #32
 8008f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	6812      	ldr	r2, [r2, #0]
 8008f2a:	6812      	ldr	r2, [r2, #0]
 8008f2c:	f022 0210 	bic.w	r2, r2, #16
 8008f30:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7f9 fa60 	bl	80023fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f8d5 	bl	8009100 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f56:	e0b6      	b.n	80090c6 <HAL_UART_IRQHandler+0x566>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	813b      	strh	r3, [r7, #8]
      if ((huart->RxXferCount > 0U)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 80a9 	beq.w	80090ca <HAL_UART_IRQHandler+0x56a>
          && (nb_rx_data > 0U))
 8008f78:	893b      	ldrh	r3, [r7, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 80a5 	beq.w	80090ca <HAL_UART_IRQHandler+0x56a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	6812      	ldr	r2, [r2, #0]
 8008f88:	6812      	ldr	r2, [r2, #0]
 8008f8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f8e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6899      	ldr	r1, [r3, #8]
 8008f9a:	4b3a      	ldr	r3, [pc, #232]	; (8009084 <HAL_UART_IRQHandler+0x524>)
 8008f9c:	400b      	ands	r3, r1
 8008f9e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2220      	movs	r2, #32
 8008fa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	6812      	ldr	r2, [r2, #0]
 8008fbc:	6812      	ldr	r2, [r2, #0]
 8008fbe:	f022 0210 	bic.w	r2, r2, #16
 8008fc2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008fc4:	893b      	ldrh	r3, [r7, #8]
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f899 	bl	8009100 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008fce:	e07c      	b.n	80090ca <HAL_UART_IRQHandler+0x56a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00d      	beq.n	8008ff6 <HAL_UART_IRQHandler+0x496>
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d008      	beq.n	8008ff6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008fec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 f802 	bl	8009ff8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ff4:	e06c      	b.n	80090d0 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d012      	beq.n	8009026 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009006:	2b00      	cmp	r3, #0
 8009008:	d104      	bne.n	8009014 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d008      	beq.n	8009026 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009018:	2b00      	cmp	r3, #0
 800901a:	d058      	beq.n	80090ce <HAL_UART_IRQHandler+0x56e>
    {
      huart->TxISR(huart);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	4798      	blx	r3
    }
    return;
 8009024:	e053      	b.n	80090ce <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800902c:	2b00      	cmp	r3, #0
 800902e:	d02b      	beq.n	8009088 <HAL_UART_IRQHandler+0x528>
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009036:	2b00      	cmp	r3, #0
 8009038:	d026      	beq.n	8009088 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 ffc2 	bl	8009fc4 <UART_EndTransmit_IT>
    return;
 8009040:	e046      	b.n	80090d0 <HAL_UART_IRQHandler+0x570>
 8009042:	bf00      	nop
 8009044:	40020010 	.word	0x40020010
 8009048:	40020028 	.word	0x40020028
 800904c:	40020040 	.word	0x40020040
 8009050:	40020058 	.word	0x40020058
 8009054:	40020070 	.word	0x40020070
 8009058:	40020088 	.word	0x40020088
 800905c:	400200a0 	.word	0x400200a0
 8009060:	400200b8 	.word	0x400200b8
 8009064:	40020410 	.word	0x40020410
 8009068:	40020428 	.word	0x40020428
 800906c:	40020440 	.word	0x40020440
 8009070:	40020458 	.word	0x40020458
 8009074:	40020470 	.word	0x40020470
 8009078:	40020488 	.word	0x40020488
 800907c:	400204a0 	.word	0x400204a0
 8009080:	400204b8 	.word	0x400204b8
 8009084:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800908e:	2b00      	cmp	r3, #0
 8009090:	d008      	beq.n	80090a4 <HAL_UART_IRQHandler+0x544>
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 ffbf 	bl	800a020 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090a2:	e015      	b.n	80090d0 <HAL_UART_IRQHandler+0x570>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d010      	beq.n	80090d0 <HAL_UART_IRQHandler+0x570>
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	da0d      	bge.n	80090d0 <HAL_UART_IRQHandler+0x570>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 ffa9 	bl	800a00c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090ba:	bf00      	nop
 80090bc:	e008      	b.n	80090d0 <HAL_UART_IRQHandler+0x570>
      return;
 80090be:	bf00      	nop
 80090c0:	e006      	b.n	80090d0 <HAL_UART_IRQHandler+0x570>
    return;
 80090c2:	bf00      	nop
 80090c4:	e004      	b.n	80090d0 <HAL_UART_IRQHandler+0x570>
      return;
 80090c6:	bf00      	nop
 80090c8:	e002      	b.n	80090d0 <HAL_UART_IRQHandler+0x570>
      return;
 80090ca:	bf00      	nop
 80090cc:	e000      	b.n	80090d0 <HAL_UART_IRQHandler+0x570>
    return;
 80090ce:	bf00      	nop
  }
}
 80090d0:	3720      	adds	r7, #32
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop

080090d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009118:	b5b0      	push	{r4, r5, r7, lr}
 800911a:	b08e      	sub	sp, #56	; 0x38
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	689a      	ldr	r2, [r3, #8]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	431a      	orrs	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	695b      	ldr	r3, [r3, #20]
 8009134:	431a      	orrs	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	4313      	orrs	r3, r2
 800913c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6819      	ldr	r1, [r3, #0]
 8009148:	4bc2      	ldr	r3, [pc, #776]	; (8009454 <UART_SetConfig+0x33c>)
 800914a:	400b      	ands	r3, r1
 800914c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800914e:	430b      	orrs	r3, r1
 8009150:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	6812      	ldr	r2, [r2, #0]
 800915a:	6852      	ldr	r2, [r2, #4]
 800915c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	68d2      	ldr	r2, [r2, #12]
 8009164:	430a      	orrs	r2, r1
 8009166:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4ab9      	ldr	r2, [pc, #740]	; (8009458 <UART_SetConfig+0x340>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d004      	beq.n	8009182 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800917e:	4313      	orrs	r3, r2
 8009180:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6899      	ldr	r1, [r3, #8]
 800918c:	4bb3      	ldr	r3, [pc, #716]	; (800945c <UART_SetConfig+0x344>)
 800918e:	400b      	ands	r3, r1
 8009190:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009192:	430b      	orrs	r3, r1
 8009194:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	6812      	ldr	r2, [r2, #0]
 800919e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80091a0:	f022 010f 	bic.w	r1, r2, #15
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80091a8:	430a      	orrs	r2, r1
 80091aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4aab      	ldr	r2, [pc, #684]	; (8009460 <UART_SetConfig+0x348>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d177      	bne.n	80092a6 <UART_SetConfig+0x18e>
 80091b6:	4bab      	ldr	r3, [pc, #684]	; (8009464 <UART_SetConfig+0x34c>)
 80091b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091be:	2b28      	cmp	r3, #40	; 0x28
 80091c0:	d86c      	bhi.n	800929c <UART_SetConfig+0x184>
 80091c2:	a201      	add	r2, pc, #4	; (adr r2, 80091c8 <UART_SetConfig+0xb0>)
 80091c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c8:	0800926d 	.word	0x0800926d
 80091cc:	0800929d 	.word	0x0800929d
 80091d0:	0800929d 	.word	0x0800929d
 80091d4:	0800929d 	.word	0x0800929d
 80091d8:	0800929d 	.word	0x0800929d
 80091dc:	0800929d 	.word	0x0800929d
 80091e0:	0800929d 	.word	0x0800929d
 80091e4:	0800929d 	.word	0x0800929d
 80091e8:	08009275 	.word	0x08009275
 80091ec:	0800929d 	.word	0x0800929d
 80091f0:	0800929d 	.word	0x0800929d
 80091f4:	0800929d 	.word	0x0800929d
 80091f8:	0800929d 	.word	0x0800929d
 80091fc:	0800929d 	.word	0x0800929d
 8009200:	0800929d 	.word	0x0800929d
 8009204:	0800929d 	.word	0x0800929d
 8009208:	0800927d 	.word	0x0800927d
 800920c:	0800929d 	.word	0x0800929d
 8009210:	0800929d 	.word	0x0800929d
 8009214:	0800929d 	.word	0x0800929d
 8009218:	0800929d 	.word	0x0800929d
 800921c:	0800929d 	.word	0x0800929d
 8009220:	0800929d 	.word	0x0800929d
 8009224:	0800929d 	.word	0x0800929d
 8009228:	08009285 	.word	0x08009285
 800922c:	0800929d 	.word	0x0800929d
 8009230:	0800929d 	.word	0x0800929d
 8009234:	0800929d 	.word	0x0800929d
 8009238:	0800929d 	.word	0x0800929d
 800923c:	0800929d 	.word	0x0800929d
 8009240:	0800929d 	.word	0x0800929d
 8009244:	0800929d 	.word	0x0800929d
 8009248:	0800928d 	.word	0x0800928d
 800924c:	0800929d 	.word	0x0800929d
 8009250:	0800929d 	.word	0x0800929d
 8009254:	0800929d 	.word	0x0800929d
 8009258:	0800929d 	.word	0x0800929d
 800925c:	0800929d 	.word	0x0800929d
 8009260:	0800929d 	.word	0x0800929d
 8009264:	0800929d 	.word	0x0800929d
 8009268:	08009295 	.word	0x08009295
 800926c:	2301      	movs	r3, #1
 800926e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009272:	e233      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009274:	2304      	movs	r3, #4
 8009276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800927a:	e22f      	b.n	80096dc <UART_SetConfig+0x5c4>
 800927c:	2308      	movs	r3, #8
 800927e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009282:	e22b      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009284:	2310      	movs	r3, #16
 8009286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800928a:	e227      	b.n	80096dc <UART_SetConfig+0x5c4>
 800928c:	2320      	movs	r3, #32
 800928e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009292:	e223      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009294:	2340      	movs	r3, #64	; 0x40
 8009296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800929a:	e21f      	b.n	80096dc <UART_SetConfig+0x5c4>
 800929c:	2380      	movs	r3, #128	; 0x80
 800929e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092a2:	bf00      	nop
 80092a4:	e21a      	b.n	80096dc <UART_SetConfig+0x5c4>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a6f      	ldr	r2, [pc, #444]	; (8009468 <UART_SetConfig+0x350>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d132      	bne.n	8009316 <UART_SetConfig+0x1fe>
 80092b0:	4b6c      	ldr	r3, [pc, #432]	; (8009464 <UART_SetConfig+0x34c>)
 80092b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b4:	f003 0307 	and.w	r3, r3, #7
 80092b8:	2b05      	cmp	r3, #5
 80092ba:	d827      	bhi.n	800930c <UART_SetConfig+0x1f4>
 80092bc:	a201      	add	r2, pc, #4	; (adr r2, 80092c4 <UART_SetConfig+0x1ac>)
 80092be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c2:	bf00      	nop
 80092c4:	080092dd 	.word	0x080092dd
 80092c8:	080092e5 	.word	0x080092e5
 80092cc:	080092ed 	.word	0x080092ed
 80092d0:	080092f5 	.word	0x080092f5
 80092d4:	080092fd 	.word	0x080092fd
 80092d8:	08009305 	.word	0x08009305
 80092dc:	2300      	movs	r3, #0
 80092de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092e2:	e1fb      	b.n	80096dc <UART_SetConfig+0x5c4>
 80092e4:	2304      	movs	r3, #4
 80092e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ea:	e1f7      	b.n	80096dc <UART_SetConfig+0x5c4>
 80092ec:	2308      	movs	r3, #8
 80092ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092f2:	e1f3      	b.n	80096dc <UART_SetConfig+0x5c4>
 80092f4:	2310      	movs	r3, #16
 80092f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092fa:	e1ef      	b.n	80096dc <UART_SetConfig+0x5c4>
 80092fc:	2320      	movs	r3, #32
 80092fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009302:	e1eb      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009304:	2340      	movs	r3, #64	; 0x40
 8009306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930a:	e1e7      	b.n	80096dc <UART_SetConfig+0x5c4>
 800930c:	2380      	movs	r3, #128	; 0x80
 800930e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009312:	bf00      	nop
 8009314:	e1e2      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a54      	ldr	r2, [pc, #336]	; (800946c <UART_SetConfig+0x354>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d132      	bne.n	8009386 <UART_SetConfig+0x26e>
 8009320:	4b50      	ldr	r3, [pc, #320]	; (8009464 <UART_SetConfig+0x34c>)
 8009322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009324:	f003 0307 	and.w	r3, r3, #7
 8009328:	2b05      	cmp	r3, #5
 800932a:	d827      	bhi.n	800937c <UART_SetConfig+0x264>
 800932c:	a201      	add	r2, pc, #4	; (adr r2, 8009334 <UART_SetConfig+0x21c>)
 800932e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009332:	bf00      	nop
 8009334:	0800934d 	.word	0x0800934d
 8009338:	08009355 	.word	0x08009355
 800933c:	0800935d 	.word	0x0800935d
 8009340:	08009365 	.word	0x08009365
 8009344:	0800936d 	.word	0x0800936d
 8009348:	08009375 	.word	0x08009375
 800934c:	2300      	movs	r3, #0
 800934e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009352:	e1c3      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009354:	2304      	movs	r3, #4
 8009356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800935a:	e1bf      	b.n	80096dc <UART_SetConfig+0x5c4>
 800935c:	2308      	movs	r3, #8
 800935e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009362:	e1bb      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009364:	2310      	movs	r3, #16
 8009366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800936a:	e1b7      	b.n	80096dc <UART_SetConfig+0x5c4>
 800936c:	2320      	movs	r3, #32
 800936e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009372:	e1b3      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009374:	2340      	movs	r3, #64	; 0x40
 8009376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800937a:	e1af      	b.n	80096dc <UART_SetConfig+0x5c4>
 800937c:	2380      	movs	r3, #128	; 0x80
 800937e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009382:	bf00      	nop
 8009384:	e1aa      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a39      	ldr	r2, [pc, #228]	; (8009470 <UART_SetConfig+0x358>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d132      	bne.n	80093f6 <UART_SetConfig+0x2de>
 8009390:	4b34      	ldr	r3, [pc, #208]	; (8009464 <UART_SetConfig+0x34c>)
 8009392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009394:	f003 0307 	and.w	r3, r3, #7
 8009398:	2b05      	cmp	r3, #5
 800939a:	d827      	bhi.n	80093ec <UART_SetConfig+0x2d4>
 800939c:	a201      	add	r2, pc, #4	; (adr r2, 80093a4 <UART_SetConfig+0x28c>)
 800939e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a2:	bf00      	nop
 80093a4:	080093bd 	.word	0x080093bd
 80093a8:	080093c5 	.word	0x080093c5
 80093ac:	080093cd 	.word	0x080093cd
 80093b0:	080093d5 	.word	0x080093d5
 80093b4:	080093dd 	.word	0x080093dd
 80093b8:	080093e5 	.word	0x080093e5
 80093bc:	2300      	movs	r3, #0
 80093be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093c2:	e18b      	b.n	80096dc <UART_SetConfig+0x5c4>
 80093c4:	2304      	movs	r3, #4
 80093c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ca:	e187      	b.n	80096dc <UART_SetConfig+0x5c4>
 80093cc:	2308      	movs	r3, #8
 80093ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093d2:	e183      	b.n	80096dc <UART_SetConfig+0x5c4>
 80093d4:	2310      	movs	r3, #16
 80093d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093da:	e17f      	b.n	80096dc <UART_SetConfig+0x5c4>
 80093dc:	2320      	movs	r3, #32
 80093de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093e2:	e17b      	b.n	80096dc <UART_SetConfig+0x5c4>
 80093e4:	2340      	movs	r3, #64	; 0x40
 80093e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ea:	e177      	b.n	80096dc <UART_SetConfig+0x5c4>
 80093ec:	2380      	movs	r3, #128	; 0x80
 80093ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093f2:	bf00      	nop
 80093f4:	e172      	b.n	80096dc <UART_SetConfig+0x5c4>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a1e      	ldr	r2, [pc, #120]	; (8009474 <UART_SetConfig+0x35c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d144      	bne.n	800948a <UART_SetConfig+0x372>
 8009400:	4b18      	ldr	r3, [pc, #96]	; (8009464 <UART_SetConfig+0x34c>)
 8009402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009404:	f003 0307 	and.w	r3, r3, #7
 8009408:	2b05      	cmp	r3, #5
 800940a:	d839      	bhi.n	8009480 <UART_SetConfig+0x368>
 800940c:	a201      	add	r2, pc, #4	; (adr r2, 8009414 <UART_SetConfig+0x2fc>)
 800940e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009412:	bf00      	nop
 8009414:	0800942d 	.word	0x0800942d
 8009418:	08009435 	.word	0x08009435
 800941c:	0800943d 	.word	0x0800943d
 8009420:	08009445 	.word	0x08009445
 8009424:	0800944d 	.word	0x0800944d
 8009428:	08009479 	.word	0x08009479
 800942c:	2300      	movs	r3, #0
 800942e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009432:	e153      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009434:	2304      	movs	r3, #4
 8009436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800943a:	e14f      	b.n	80096dc <UART_SetConfig+0x5c4>
 800943c:	2308      	movs	r3, #8
 800943e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009442:	e14b      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009444:	2310      	movs	r3, #16
 8009446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800944a:	e147      	b.n	80096dc <UART_SetConfig+0x5c4>
 800944c:	2320      	movs	r3, #32
 800944e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009452:	e143      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009454:	cfff69f3 	.word	0xcfff69f3
 8009458:	58000c00 	.word	0x58000c00
 800945c:	11fff4ff 	.word	0x11fff4ff
 8009460:	40011000 	.word	0x40011000
 8009464:	58024400 	.word	0x58024400
 8009468:	40004400 	.word	0x40004400
 800946c:	40004800 	.word	0x40004800
 8009470:	40004c00 	.word	0x40004c00
 8009474:	40005000 	.word	0x40005000
 8009478:	2340      	movs	r3, #64	; 0x40
 800947a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800947e:	e12d      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009480:	2380      	movs	r3, #128	; 0x80
 8009482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009486:	bf00      	nop
 8009488:	e128      	b.n	80096dc <UART_SetConfig+0x5c4>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4ab6      	ldr	r2, [pc, #728]	; (8009768 <UART_SetConfig+0x650>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d178      	bne.n	8009586 <UART_SetConfig+0x46e>
 8009494:	4bb5      	ldr	r3, [pc, #724]	; (800976c <UART_SetConfig+0x654>)
 8009496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009498:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800949c:	2b28      	cmp	r3, #40	; 0x28
 800949e:	d86d      	bhi.n	800957c <UART_SetConfig+0x464>
 80094a0:	a201      	add	r2, pc, #4	; (adr r2, 80094a8 <UART_SetConfig+0x390>)
 80094a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a6:	bf00      	nop
 80094a8:	0800954d 	.word	0x0800954d
 80094ac:	0800957d 	.word	0x0800957d
 80094b0:	0800957d 	.word	0x0800957d
 80094b4:	0800957d 	.word	0x0800957d
 80094b8:	0800957d 	.word	0x0800957d
 80094bc:	0800957d 	.word	0x0800957d
 80094c0:	0800957d 	.word	0x0800957d
 80094c4:	0800957d 	.word	0x0800957d
 80094c8:	08009555 	.word	0x08009555
 80094cc:	0800957d 	.word	0x0800957d
 80094d0:	0800957d 	.word	0x0800957d
 80094d4:	0800957d 	.word	0x0800957d
 80094d8:	0800957d 	.word	0x0800957d
 80094dc:	0800957d 	.word	0x0800957d
 80094e0:	0800957d 	.word	0x0800957d
 80094e4:	0800957d 	.word	0x0800957d
 80094e8:	0800955d 	.word	0x0800955d
 80094ec:	0800957d 	.word	0x0800957d
 80094f0:	0800957d 	.word	0x0800957d
 80094f4:	0800957d 	.word	0x0800957d
 80094f8:	0800957d 	.word	0x0800957d
 80094fc:	0800957d 	.word	0x0800957d
 8009500:	0800957d 	.word	0x0800957d
 8009504:	0800957d 	.word	0x0800957d
 8009508:	08009565 	.word	0x08009565
 800950c:	0800957d 	.word	0x0800957d
 8009510:	0800957d 	.word	0x0800957d
 8009514:	0800957d 	.word	0x0800957d
 8009518:	0800957d 	.word	0x0800957d
 800951c:	0800957d 	.word	0x0800957d
 8009520:	0800957d 	.word	0x0800957d
 8009524:	0800957d 	.word	0x0800957d
 8009528:	0800956d 	.word	0x0800956d
 800952c:	0800957d 	.word	0x0800957d
 8009530:	0800957d 	.word	0x0800957d
 8009534:	0800957d 	.word	0x0800957d
 8009538:	0800957d 	.word	0x0800957d
 800953c:	0800957d 	.word	0x0800957d
 8009540:	0800957d 	.word	0x0800957d
 8009544:	0800957d 	.word	0x0800957d
 8009548:	08009575 	.word	0x08009575
 800954c:	2301      	movs	r3, #1
 800954e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009552:	e0c3      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009554:	2304      	movs	r3, #4
 8009556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800955a:	e0bf      	b.n	80096dc <UART_SetConfig+0x5c4>
 800955c:	2308      	movs	r3, #8
 800955e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009562:	e0bb      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009564:	2310      	movs	r3, #16
 8009566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800956a:	e0b7      	b.n	80096dc <UART_SetConfig+0x5c4>
 800956c:	2320      	movs	r3, #32
 800956e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009572:	e0b3      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009574:	2340      	movs	r3, #64	; 0x40
 8009576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800957a:	e0af      	b.n	80096dc <UART_SetConfig+0x5c4>
 800957c:	2380      	movs	r3, #128	; 0x80
 800957e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009582:	bf00      	nop
 8009584:	e0aa      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a79      	ldr	r2, [pc, #484]	; (8009770 <UART_SetConfig+0x658>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d132      	bne.n	80095f6 <UART_SetConfig+0x4de>
 8009590:	4b76      	ldr	r3, [pc, #472]	; (800976c <UART_SetConfig+0x654>)
 8009592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009594:	f003 0307 	and.w	r3, r3, #7
 8009598:	2b05      	cmp	r3, #5
 800959a:	d827      	bhi.n	80095ec <UART_SetConfig+0x4d4>
 800959c:	a201      	add	r2, pc, #4	; (adr r2, 80095a4 <UART_SetConfig+0x48c>)
 800959e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a2:	bf00      	nop
 80095a4:	080095bd 	.word	0x080095bd
 80095a8:	080095c5 	.word	0x080095c5
 80095ac:	080095cd 	.word	0x080095cd
 80095b0:	080095d5 	.word	0x080095d5
 80095b4:	080095dd 	.word	0x080095dd
 80095b8:	080095e5 	.word	0x080095e5
 80095bc:	2300      	movs	r3, #0
 80095be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095c2:	e08b      	b.n	80096dc <UART_SetConfig+0x5c4>
 80095c4:	2304      	movs	r3, #4
 80095c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ca:	e087      	b.n	80096dc <UART_SetConfig+0x5c4>
 80095cc:	2308      	movs	r3, #8
 80095ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095d2:	e083      	b.n	80096dc <UART_SetConfig+0x5c4>
 80095d4:	2310      	movs	r3, #16
 80095d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095da:	e07f      	b.n	80096dc <UART_SetConfig+0x5c4>
 80095dc:	2320      	movs	r3, #32
 80095de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095e2:	e07b      	b.n	80096dc <UART_SetConfig+0x5c4>
 80095e4:	2340      	movs	r3, #64	; 0x40
 80095e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ea:	e077      	b.n	80096dc <UART_SetConfig+0x5c4>
 80095ec:	2380      	movs	r3, #128	; 0x80
 80095ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095f2:	bf00      	nop
 80095f4:	e072      	b.n	80096dc <UART_SetConfig+0x5c4>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a5e      	ldr	r2, [pc, #376]	; (8009774 <UART_SetConfig+0x65c>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d132      	bne.n	8009666 <UART_SetConfig+0x54e>
 8009600:	4b5a      	ldr	r3, [pc, #360]	; (800976c <UART_SetConfig+0x654>)
 8009602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009604:	f003 0307 	and.w	r3, r3, #7
 8009608:	2b05      	cmp	r3, #5
 800960a:	d827      	bhi.n	800965c <UART_SetConfig+0x544>
 800960c:	a201      	add	r2, pc, #4	; (adr r2, 8009614 <UART_SetConfig+0x4fc>)
 800960e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009612:	bf00      	nop
 8009614:	0800962d 	.word	0x0800962d
 8009618:	08009635 	.word	0x08009635
 800961c:	0800963d 	.word	0x0800963d
 8009620:	08009645 	.word	0x08009645
 8009624:	0800964d 	.word	0x0800964d
 8009628:	08009655 	.word	0x08009655
 800962c:	2300      	movs	r3, #0
 800962e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009632:	e053      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009634:	2304      	movs	r3, #4
 8009636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800963a:	e04f      	b.n	80096dc <UART_SetConfig+0x5c4>
 800963c:	2308      	movs	r3, #8
 800963e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009642:	e04b      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009644:	2310      	movs	r3, #16
 8009646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800964a:	e047      	b.n	80096dc <UART_SetConfig+0x5c4>
 800964c:	2320      	movs	r3, #32
 800964e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009652:	e043      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009654:	2340      	movs	r3, #64	; 0x40
 8009656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800965a:	e03f      	b.n	80096dc <UART_SetConfig+0x5c4>
 800965c:	2380      	movs	r3, #128	; 0x80
 800965e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009662:	bf00      	nop
 8009664:	e03a      	b.n	80096dc <UART_SetConfig+0x5c4>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a43      	ldr	r2, [pc, #268]	; (8009778 <UART_SetConfig+0x660>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d132      	bne.n	80096d6 <UART_SetConfig+0x5be>
 8009670:	4b3e      	ldr	r3, [pc, #248]	; (800976c <UART_SetConfig+0x654>)
 8009672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009674:	f003 0307 	and.w	r3, r3, #7
 8009678:	2b05      	cmp	r3, #5
 800967a:	d827      	bhi.n	80096cc <UART_SetConfig+0x5b4>
 800967c:	a201      	add	r2, pc, #4	; (adr r2, 8009684 <UART_SetConfig+0x56c>)
 800967e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009682:	bf00      	nop
 8009684:	0800969d 	.word	0x0800969d
 8009688:	080096a5 	.word	0x080096a5
 800968c:	080096ad 	.word	0x080096ad
 8009690:	080096b5 	.word	0x080096b5
 8009694:	080096bd 	.word	0x080096bd
 8009698:	080096c5 	.word	0x080096c5
 800969c:	2302      	movs	r3, #2
 800969e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096a2:	e01b      	b.n	80096dc <UART_SetConfig+0x5c4>
 80096a4:	2304      	movs	r3, #4
 80096a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096aa:	e017      	b.n	80096dc <UART_SetConfig+0x5c4>
 80096ac:	2308      	movs	r3, #8
 80096ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096b2:	e013      	b.n	80096dc <UART_SetConfig+0x5c4>
 80096b4:	2310      	movs	r3, #16
 80096b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ba:	e00f      	b.n	80096dc <UART_SetConfig+0x5c4>
 80096bc:	2320      	movs	r3, #32
 80096be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096c2:	e00b      	b.n	80096dc <UART_SetConfig+0x5c4>
 80096c4:	2340      	movs	r3, #64	; 0x40
 80096c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ca:	e007      	b.n	80096dc <UART_SetConfig+0x5c4>
 80096cc:	2380      	movs	r3, #128	; 0x80
 80096ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096d2:	bf00      	nop
 80096d4:	e002      	b.n	80096dc <UART_SetConfig+0x5c4>
 80096d6:	2380      	movs	r3, #128	; 0x80
 80096d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a25      	ldr	r2, [pc, #148]	; (8009778 <UART_SetConfig+0x660>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	f040 80ad 	bne.w	8009842 <UART_SetConfig+0x72a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80096e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80096ec:	2b08      	cmp	r3, #8
 80096ee:	d019      	beq.n	8009724 <UART_SetConfig+0x60c>
 80096f0:	2b08      	cmp	r3, #8
 80096f2:	dc04      	bgt.n	80096fe <UART_SetConfig+0x5e6>
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d009      	beq.n	800970c <UART_SetConfig+0x5f4>
 80096f8:	2b04      	cmp	r3, #4
 80096fa:	d00b      	beq.n	8009714 <UART_SetConfig+0x5fc>
 80096fc:	e042      	b.n	8009784 <UART_SetConfig+0x66c>
 80096fe:	2b20      	cmp	r3, #32
 8009700:	d02b      	beq.n	800975a <UART_SetConfig+0x642>
 8009702:	2b40      	cmp	r3, #64	; 0x40
 8009704:	d02c      	beq.n	8009760 <UART_SetConfig+0x648>
 8009706:	2b10      	cmp	r3, #16
 8009708:	d014      	beq.n	8009734 <UART_SetConfig+0x61c>
 800970a:	e03b      	b.n	8009784 <UART_SetConfig+0x66c>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800970c:	f7fd fa64 	bl	8006bd8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009710:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009712:	e03d      	b.n	8009790 <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009714:	f107 0314 	add.w	r3, r7, #20
 8009718:	4618      	mov	r0, r3
 800971a:	f7fd fa73 	bl	8006c04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009722:	e035      	b.n	8009790 <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009724:	f107 0308 	add.w	r3, r7, #8
 8009728:	4618      	mov	r0, r3
 800972a:	f7fd fbb7 	bl	8006e9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009732:	e02d      	b.n	8009790 <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009734:	4b0d      	ldr	r3, [pc, #52]	; (800976c <UART_SetConfig+0x654>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 0320 	and.w	r3, r3, #32
 800973c:	2b00      	cmp	r3, #0
 800973e:	d009      	beq.n	8009754 <UART_SetConfig+0x63c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009740:	4b0a      	ldr	r3, [pc, #40]	; (800976c <UART_SetConfig+0x654>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	08db      	lsrs	r3, r3, #3
 8009746:	f003 0303 	and.w	r3, r3, #3
 800974a:	4a0c      	ldr	r2, [pc, #48]	; (800977c <UART_SetConfig+0x664>)
 800974c:	fa22 f303 	lsr.w	r3, r2, r3
 8009750:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009752:	e01d      	b.n	8009790 <UART_SetConfig+0x678>
          pclk = (uint32_t) HSI_VALUE;
 8009754:	4b09      	ldr	r3, [pc, #36]	; (800977c <UART_SetConfig+0x664>)
 8009756:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009758:	e01a      	b.n	8009790 <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800975a:	4b09      	ldr	r3, [pc, #36]	; (8009780 <UART_SetConfig+0x668>)
 800975c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800975e:	e017      	b.n	8009790 <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009764:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009766:	e013      	b.n	8009790 <UART_SetConfig+0x678>
 8009768:	40011400 	.word	0x40011400
 800976c:	58024400 	.word	0x58024400
 8009770:	40007800 	.word	0x40007800
 8009774:	40007c00 	.word	0x40007c00
 8009778:	58000c00 	.word	0x58000c00
 800977c:	03d09000 	.word	0x03d09000
 8009780:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009784:	2300      	movs	r3, #0
 8009786:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800978e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009792:	2b00      	cmp	r3, #0
 8009794:	f000 8243 	beq.w	8009c1e <UART_SetConfig+0xb06>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979c:	4aa8      	ldr	r2, [pc, #672]	; (8009a40 <UART_SetConfig+0x928>)
 800979e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097a2:	461a      	mov	r2, r3
 80097a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80097aa:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	4613      	mov	r3, r2
 80097b2:	005b      	lsls	r3, r3, #1
 80097b4:	441a      	add	r2, r3
 80097b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d805      	bhi.n	80097c8 <UART_SetConfig+0x6b0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d203      	bcs.n	80097d0 <UART_SetConfig+0x6b8>
      {
        ret = HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80097ce:	e226      	b.n	8009c1e <UART_SetConfig+0xb06>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d2:	4618      	mov	r0, r3
 80097d4:	f04f 0100 	mov.w	r1, #0
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097dc:	4a98      	ldr	r2, [pc, #608]	; (8009a40 <UART_SetConfig+0x928>)
 80097de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	f04f 0300 	mov.w	r3, #0
 80097e8:	f7f6 fd76 	bl	80002d8 <__aeabi_uldivmod>
 80097ec:	4602      	mov	r2, r0
 80097ee:	460b      	mov	r3, r1
 80097f0:	021d      	lsls	r5, r3, #8
 80097f2:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80097f6:	0214      	lsls	r4, r2, #8
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	085b      	lsrs	r3, r3, #1
 80097fe:	461a      	mov	r2, r3
 8009800:	f04f 0300 	mov.w	r3, #0
 8009804:	18a0      	adds	r0, r4, r2
 8009806:	eb45 0103 	adc.w	r1, r5, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	f04f 0400 	mov.w	r4, #0
 8009812:	461a      	mov	r2, r3
 8009814:	4623      	mov	r3, r4
 8009816:	f7f6 fd5f 	bl	80002d8 <__aeabi_uldivmod>
 800981a:	4603      	mov	r3, r0
 800981c:	460c      	mov	r4, r1
 800981e:	627b      	str	r3, [r7, #36]	; 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009826:	d308      	bcc.n	800983a <UART_SetConfig+0x722>
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800982e:	d204      	bcs.n	800983a <UART_SetConfig+0x722>
        {
          huart->Instance->BRR = usartdiv;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009836:	60da      	str	r2, [r3, #12]
 8009838:	e1f1      	b.n	8009c1e <UART_SetConfig+0xb06>
        }
        else
        {
          ret = HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009840:	e1ed      	b.n	8009c1e <UART_SetConfig+0xb06>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800984a:	f040 8101 	bne.w	8009a50 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800984e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009852:	2b40      	cmp	r3, #64	; 0x40
 8009854:	f200 80b8 	bhi.w	80099c8 <UART_SetConfig+0x8b0>
 8009858:	a201      	add	r2, pc, #4	; (adr r2, 8009860 <UART_SetConfig+0x748>)
 800985a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985e:	bf00      	nop
 8009860:	08009965 	.word	0x08009965
 8009864:	0800996d 	.word	0x0800996d
 8009868:	080099c9 	.word	0x080099c9
 800986c:	080099c9 	.word	0x080099c9
 8009870:	08009975 	.word	0x08009975
 8009874:	080099c9 	.word	0x080099c9
 8009878:	080099c9 	.word	0x080099c9
 800987c:	080099c9 	.word	0x080099c9
 8009880:	08009985 	.word	0x08009985
 8009884:	080099c9 	.word	0x080099c9
 8009888:	080099c9 	.word	0x080099c9
 800988c:	080099c9 	.word	0x080099c9
 8009890:	080099c9 	.word	0x080099c9
 8009894:	080099c9 	.word	0x080099c9
 8009898:	080099c9 	.word	0x080099c9
 800989c:	080099c9 	.word	0x080099c9
 80098a0:	08009995 	.word	0x08009995
 80098a4:	080099c9 	.word	0x080099c9
 80098a8:	080099c9 	.word	0x080099c9
 80098ac:	080099c9 	.word	0x080099c9
 80098b0:	080099c9 	.word	0x080099c9
 80098b4:	080099c9 	.word	0x080099c9
 80098b8:	080099c9 	.word	0x080099c9
 80098bc:	080099c9 	.word	0x080099c9
 80098c0:	080099c9 	.word	0x080099c9
 80098c4:	080099c9 	.word	0x080099c9
 80098c8:	080099c9 	.word	0x080099c9
 80098cc:	080099c9 	.word	0x080099c9
 80098d0:	080099c9 	.word	0x080099c9
 80098d4:	080099c9 	.word	0x080099c9
 80098d8:	080099c9 	.word	0x080099c9
 80098dc:	080099c9 	.word	0x080099c9
 80098e0:	080099bb 	.word	0x080099bb
 80098e4:	080099c9 	.word	0x080099c9
 80098e8:	080099c9 	.word	0x080099c9
 80098ec:	080099c9 	.word	0x080099c9
 80098f0:	080099c9 	.word	0x080099c9
 80098f4:	080099c9 	.word	0x080099c9
 80098f8:	080099c9 	.word	0x080099c9
 80098fc:	080099c9 	.word	0x080099c9
 8009900:	080099c9 	.word	0x080099c9
 8009904:	080099c9 	.word	0x080099c9
 8009908:	080099c9 	.word	0x080099c9
 800990c:	080099c9 	.word	0x080099c9
 8009910:	080099c9 	.word	0x080099c9
 8009914:	080099c9 	.word	0x080099c9
 8009918:	080099c9 	.word	0x080099c9
 800991c:	080099c9 	.word	0x080099c9
 8009920:	080099c9 	.word	0x080099c9
 8009924:	080099c9 	.word	0x080099c9
 8009928:	080099c9 	.word	0x080099c9
 800992c:	080099c9 	.word	0x080099c9
 8009930:	080099c9 	.word	0x080099c9
 8009934:	080099c9 	.word	0x080099c9
 8009938:	080099c9 	.word	0x080099c9
 800993c:	080099c9 	.word	0x080099c9
 8009940:	080099c9 	.word	0x080099c9
 8009944:	080099c9 	.word	0x080099c9
 8009948:	080099c9 	.word	0x080099c9
 800994c:	080099c9 	.word	0x080099c9
 8009950:	080099c9 	.word	0x080099c9
 8009954:	080099c9 	.word	0x080099c9
 8009958:	080099c9 	.word	0x080099c9
 800995c:	080099c9 	.word	0x080099c9
 8009960:	080099c1 	.word	0x080099c1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009964:	f7fb fd98 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8009968:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800996a:	e033      	b.n	80099d4 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800996c:	f7fb fdaa 	bl	80054c4 <HAL_RCC_GetPCLK2Freq>
 8009970:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009972:	e02f      	b.n	80099d4 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009974:	f107 0314 	add.w	r3, r7, #20
 8009978:	4618      	mov	r0, r3
 800997a:	f7fd f943 	bl	8006c04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009982:	e027      	b.n	80099d4 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009984:	f107 0308 	add.w	r3, r7, #8
 8009988:	4618      	mov	r0, r3
 800998a:	f7fd fa87 	bl	8006e9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009992:	e01f      	b.n	80099d4 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009994:	4b2b      	ldr	r3, [pc, #172]	; (8009a44 <UART_SetConfig+0x92c>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 0320 	and.w	r3, r3, #32
 800999c:	2b00      	cmp	r3, #0
 800999e:	d009      	beq.n	80099b4 <UART_SetConfig+0x89c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80099a0:	4b28      	ldr	r3, [pc, #160]	; (8009a44 <UART_SetConfig+0x92c>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	08db      	lsrs	r3, r3, #3
 80099a6:	f003 0303 	and.w	r3, r3, #3
 80099aa:	4a27      	ldr	r2, [pc, #156]	; (8009a48 <UART_SetConfig+0x930>)
 80099ac:	fa22 f303 	lsr.w	r3, r2, r3
 80099b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80099b2:	e00f      	b.n	80099d4 <UART_SetConfig+0x8bc>
          pclk = (uint32_t) HSI_VALUE;
 80099b4:	4b24      	ldr	r3, [pc, #144]	; (8009a48 <UART_SetConfig+0x930>)
 80099b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099b8:	e00c      	b.n	80099d4 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80099ba:	4b24      	ldr	r3, [pc, #144]	; (8009a4c <UART_SetConfig+0x934>)
 80099bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099be:	e009      	b.n	80099d4 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099c6:	e005      	b.n	80099d4 <UART_SetConfig+0x8bc>
      default:
        pclk = 0U;
 80099c8:	2300      	movs	r3, #0
 80099ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80099d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 8121 	beq.w	8009c1e <UART_SetConfig+0xb06>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e0:	4a17      	ldr	r2, [pc, #92]	; (8009a40 <UART_SetConfig+0x928>)
 80099e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099e6:	461a      	mov	r2, r3
 80099e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80099ee:	005a      	lsls	r2, r3, #1
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	085b      	lsrs	r3, r3, #1
 80099f6:	441a      	add	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	627b      	str	r3, [r7, #36]	; 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a06:	2b0f      	cmp	r3, #15
 8009a08:	d916      	bls.n	8009a38 <UART_SetConfig+0x920>
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a10:	d212      	bcs.n	8009a38 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	f023 030f 	bic.w	r3, r3, #15
 8009a1a:	847b      	strh	r3, [r7, #34]	; 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	085b      	lsrs	r3, r3, #1
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	f003 0307 	and.w	r3, r3, #7
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	847b      	strh	r3, [r7, #34]	; 0x22
        huart->Instance->BRR = brrtemp;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009a34:	60da      	str	r2, [r3, #12]
 8009a36:	e0f2      	b.n	8009c1e <UART_SetConfig+0xb06>
      }
      else
      {
        ret = HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009a3e:	e0ee      	b.n	8009c1e <UART_SetConfig+0xb06>
 8009a40:	0800bacc 	.word	0x0800bacc
 8009a44:	58024400 	.word	0x58024400
 8009a48:	03d09000 	.word	0x03d09000
 8009a4c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a54:	2b40      	cmp	r3, #64	; 0x40
 8009a56:	f200 80b7 	bhi.w	8009bc8 <UART_SetConfig+0xab0>
 8009a5a:	a201      	add	r2, pc, #4	; (adr r2, 8009a60 <UART_SetConfig+0x948>)
 8009a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a60:	08009b65 	.word	0x08009b65
 8009a64:	08009b6d 	.word	0x08009b6d
 8009a68:	08009bc9 	.word	0x08009bc9
 8009a6c:	08009bc9 	.word	0x08009bc9
 8009a70:	08009b75 	.word	0x08009b75
 8009a74:	08009bc9 	.word	0x08009bc9
 8009a78:	08009bc9 	.word	0x08009bc9
 8009a7c:	08009bc9 	.word	0x08009bc9
 8009a80:	08009b85 	.word	0x08009b85
 8009a84:	08009bc9 	.word	0x08009bc9
 8009a88:	08009bc9 	.word	0x08009bc9
 8009a8c:	08009bc9 	.word	0x08009bc9
 8009a90:	08009bc9 	.word	0x08009bc9
 8009a94:	08009bc9 	.word	0x08009bc9
 8009a98:	08009bc9 	.word	0x08009bc9
 8009a9c:	08009bc9 	.word	0x08009bc9
 8009aa0:	08009b95 	.word	0x08009b95
 8009aa4:	08009bc9 	.word	0x08009bc9
 8009aa8:	08009bc9 	.word	0x08009bc9
 8009aac:	08009bc9 	.word	0x08009bc9
 8009ab0:	08009bc9 	.word	0x08009bc9
 8009ab4:	08009bc9 	.word	0x08009bc9
 8009ab8:	08009bc9 	.word	0x08009bc9
 8009abc:	08009bc9 	.word	0x08009bc9
 8009ac0:	08009bc9 	.word	0x08009bc9
 8009ac4:	08009bc9 	.word	0x08009bc9
 8009ac8:	08009bc9 	.word	0x08009bc9
 8009acc:	08009bc9 	.word	0x08009bc9
 8009ad0:	08009bc9 	.word	0x08009bc9
 8009ad4:	08009bc9 	.word	0x08009bc9
 8009ad8:	08009bc9 	.word	0x08009bc9
 8009adc:	08009bc9 	.word	0x08009bc9
 8009ae0:	08009bbb 	.word	0x08009bbb
 8009ae4:	08009bc9 	.word	0x08009bc9
 8009ae8:	08009bc9 	.word	0x08009bc9
 8009aec:	08009bc9 	.word	0x08009bc9
 8009af0:	08009bc9 	.word	0x08009bc9
 8009af4:	08009bc9 	.word	0x08009bc9
 8009af8:	08009bc9 	.word	0x08009bc9
 8009afc:	08009bc9 	.word	0x08009bc9
 8009b00:	08009bc9 	.word	0x08009bc9
 8009b04:	08009bc9 	.word	0x08009bc9
 8009b08:	08009bc9 	.word	0x08009bc9
 8009b0c:	08009bc9 	.word	0x08009bc9
 8009b10:	08009bc9 	.word	0x08009bc9
 8009b14:	08009bc9 	.word	0x08009bc9
 8009b18:	08009bc9 	.word	0x08009bc9
 8009b1c:	08009bc9 	.word	0x08009bc9
 8009b20:	08009bc9 	.word	0x08009bc9
 8009b24:	08009bc9 	.word	0x08009bc9
 8009b28:	08009bc9 	.word	0x08009bc9
 8009b2c:	08009bc9 	.word	0x08009bc9
 8009b30:	08009bc9 	.word	0x08009bc9
 8009b34:	08009bc9 	.word	0x08009bc9
 8009b38:	08009bc9 	.word	0x08009bc9
 8009b3c:	08009bc9 	.word	0x08009bc9
 8009b40:	08009bc9 	.word	0x08009bc9
 8009b44:	08009bc9 	.word	0x08009bc9
 8009b48:	08009bc9 	.word	0x08009bc9
 8009b4c:	08009bc9 	.word	0x08009bc9
 8009b50:	08009bc9 	.word	0x08009bc9
 8009b54:	08009bc9 	.word	0x08009bc9
 8009b58:	08009bc9 	.word	0x08009bc9
 8009b5c:	08009bc9 	.word	0x08009bc9
 8009b60:	08009bc1 	.word	0x08009bc1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b64:	f7fb fc98 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8009b68:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009b6a:	e033      	b.n	8009bd4 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b6c:	f7fb fcaa 	bl	80054c4 <HAL_RCC_GetPCLK2Freq>
 8009b70:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009b72:	e02f      	b.n	8009bd4 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b74:	f107 0314 	add.w	r3, r7, #20
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fd f843 	bl	8006c04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b82:	e027      	b.n	8009bd4 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b84:	f107 0308 	add.w	r3, r7, #8
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7fd f987 	bl	8006e9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b92:	e01f      	b.n	8009bd4 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b94:	4b2c      	ldr	r3, [pc, #176]	; (8009c48 <UART_SetConfig+0xb30>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 0320 	and.w	r3, r3, #32
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d009      	beq.n	8009bb4 <UART_SetConfig+0xa9c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ba0:	4b29      	ldr	r3, [pc, #164]	; (8009c48 <UART_SetConfig+0xb30>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	08db      	lsrs	r3, r3, #3
 8009ba6:	f003 0303 	and.w	r3, r3, #3
 8009baa:	4a28      	ldr	r2, [pc, #160]	; (8009c4c <UART_SetConfig+0xb34>)
 8009bac:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009bb2:	e00f      	b.n	8009bd4 <UART_SetConfig+0xabc>
          pclk = (uint32_t) HSI_VALUE;
 8009bb4:	4b25      	ldr	r3, [pc, #148]	; (8009c4c <UART_SetConfig+0xb34>)
 8009bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bb8:	e00c      	b.n	8009bd4 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009bba:	4b25      	ldr	r3, [pc, #148]	; (8009c50 <UART_SetConfig+0xb38>)
 8009bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bbe:	e009      	b.n	8009bd4 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bc6:	e005      	b.n	8009bd4 <UART_SetConfig+0xabc>
      default:
        pclk = 0U;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009bd2:	bf00      	nop
    }

    if (pclk != 0U)
 8009bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d021      	beq.n	8009c1e <UART_SetConfig+0xb06>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bde:	4a1d      	ldr	r2, [pc, #116]	; (8009c54 <UART_SetConfig+0xb3c>)
 8009be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009be4:	461a      	mov	r2, r3
 8009be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be8:	fbb3 f2f2 	udiv	r2, r3, r2
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	085b      	lsrs	r3, r3, #1
 8009bf2:	441a      	add	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	627b      	str	r3, [r7, #36]	; 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	2b0f      	cmp	r3, #15
 8009c04:	d908      	bls.n	8009c18 <UART_SetConfig+0xb00>
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c0c:	d204      	bcs.n	8009c18 <UART_SetConfig+0xb00>
      {
        huart->Instance->BRR = usartdiv;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c14:	60da      	str	r2, [r3, #12]
 8009c16:	e002      	b.n	8009c1e <UART_SetConfig+0xb06>
      }
      else
      {
        ret = HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009c3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3738      	adds	r7, #56	; 0x38
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bdb0      	pop	{r4, r5, r7, pc}
 8009c46:	bf00      	nop
 8009c48:	58024400 	.word	0x58024400
 8009c4c:	03d09000 	.word	0x03d09000
 8009c50:	003d0900 	.word	0x003d0900
 8009c54:	0800bacc 	.word	0x0800bacc

08009c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c64:	f003 0301 	and.w	r3, r3, #1
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00a      	beq.n	8009c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	6812      	ldr	r2, [r2, #0]
 8009c74:	6852      	ldr	r2, [r2, #4]
 8009c76:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009c7e:	430a      	orrs	r2, r1
 8009c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c86:	f003 0302 	and.w	r3, r3, #2
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00a      	beq.n	8009ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	6812      	ldr	r2, [r2, #0]
 8009c96:	6852      	ldr	r2, [r2, #4]
 8009c98:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009ca0:	430a      	orrs	r2, r1
 8009ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca8:	f003 0304 	and.w	r3, r3, #4
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00a      	beq.n	8009cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	6812      	ldr	r2, [r2, #0]
 8009cb8:	6852      	ldr	r2, [r2, #4]
 8009cba:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009cc2:	430a      	orrs	r2, r1
 8009cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cca:	f003 0308 	and.w	r3, r3, #8
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00a      	beq.n	8009ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	6812      	ldr	r2, [r2, #0]
 8009cda:	6852      	ldr	r2, [r2, #4]
 8009cdc:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009ce4:	430a      	orrs	r2, r1
 8009ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cec:	f003 0310 	and.w	r3, r3, #16
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00a      	beq.n	8009d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	6812      	ldr	r2, [r2, #0]
 8009cfc:	6892      	ldr	r2, [r2, #8]
 8009cfe:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009d06:	430a      	orrs	r2, r1
 8009d08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0e:	f003 0320 	and.w	r3, r3, #32
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00a      	beq.n	8009d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	6812      	ldr	r2, [r2, #0]
 8009d1e:	6892      	ldr	r2, [r2, #8]
 8009d20:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009d28:	430a      	orrs	r2, r1
 8009d2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d01a      	beq.n	8009d6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	6812      	ldr	r2, [r2, #0]
 8009d40:	6852      	ldr	r2, [r2, #4]
 8009d42:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009d4a:	430a      	orrs	r2, r1
 8009d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d56:	d10a      	bne.n	8009d6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	6812      	ldr	r2, [r2, #0]
 8009d60:	6852      	ldr	r2, [r2, #4]
 8009d62:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00a      	beq.n	8009d90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	6812      	ldr	r2, [r2, #0]
 8009d82:	6852      	ldr	r2, [r2, #4]
 8009d84:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	605a      	str	r2, [r3, #4]
  }
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b086      	sub	sp, #24
 8009da0:	af02      	add	r7, sp, #8
 8009da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009dac:	f7f6 fca2 	bl	80006f4 <HAL_GetTick>
 8009db0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 0308 	and.w	r3, r3, #8
 8009dbc:	2b08      	cmp	r3, #8
 8009dbe:	d10e      	bne.n	8009dde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f82f 	bl	8009e32 <UART_WaitOnFlagUntilTimeout>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e025      	b.n	8009e2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 0304 	and.w	r3, r3, #4
 8009de8:	2b04      	cmp	r3, #4
 8009dea:	d10e      	bne.n	8009e0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f819 	bl	8009e32 <UART_WaitOnFlagUntilTimeout>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e06:	2303      	movs	r3, #3
 8009e08:	e00f      	b.n	8009e2a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2220      	movs	r2, #32
 8009e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2220      	movs	r2, #32
 8009e16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b084      	sub	sp, #16
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	60f8      	str	r0, [r7, #12]
 8009e3a:	60b9      	str	r1, [r7, #8]
 8009e3c:	603b      	str	r3, [r7, #0]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e42:	e062      	b.n	8009f0a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4a:	d05e      	beq.n	8009f0a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e4c:	f7f6 fc52 	bl	80006f4 <HAL_GetTick>
 8009e50:	4602      	mov	r2, r0
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	1ad2      	subs	r2, r2, r3
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d802      	bhi.n	8009e62 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d11d      	bne.n	8009e9e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	6812      	ldr	r2, [r2, #0]
 8009e6a:	6812      	ldr	r2, [r2, #0]
 8009e6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009e70:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	6812      	ldr	r2, [r2, #0]
 8009e7a:	6892      	ldr	r2, [r2, #8]
 8009e7c:	f022 0201 	bic.w	r2, r2, #1
 8009e80:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2220      	movs	r2, #32
 8009e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2220      	movs	r2, #32
 8009e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e045      	b.n	8009f2a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 0304 	and.w	r3, r3, #4
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d02e      	beq.n	8009f0a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eba:	d126      	bne.n	8009f0a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ec4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	6812      	ldr	r2, [r2, #0]
 8009ece:	6812      	ldr	r2, [r2, #0]
 8009ed0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ed4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	6812      	ldr	r2, [r2, #0]
 8009ede:	6892      	ldr	r2, [r2, #8]
 8009ee0:	f022 0201 	bic.w	r2, r2, #1
 8009ee4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2220      	movs	r2, #32
 8009eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2220      	movs	r2, #32
 8009ef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2220      	movs	r2, #32
 8009efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009f06:	2303      	movs	r3, #3
 8009f08:	e00f      	b.n	8009f2a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	69da      	ldr	r2, [r3, #28]
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	401a      	ands	r2, r3
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	bf0c      	ite	eq
 8009f1a:	2301      	moveq	r3, #1
 8009f1c:	2300      	movne	r3, #0
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	461a      	mov	r2, r3
 8009f22:	79fb      	ldrb	r3, [r7, #7]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d08d      	beq.n	8009e44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
	...

08009f34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	6812      	ldr	r2, [r2, #0]
 8009f44:	6812      	ldr	r2, [r2, #0]
 8009f46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009f4a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6899      	ldr	r1, [r3, #8]
 8009f56:	4b0f      	ldr	r3, [pc, #60]	; (8009f94 <UART_EndRxTransfer+0x60>)
 8009f58:	400b      	ands	r3, r1
 8009f5a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d107      	bne.n	8009f74 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	6812      	ldr	r2, [r2, #0]
 8009f6c:	6812      	ldr	r2, [r2, #0]
 8009f6e:	f022 0210 	bic.w	r2, r2, #16
 8009f72:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2220      	movs	r2, #32
 8009f78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	effffffe 	.word	0xeffffffe

08009f98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f7ff f898 	bl	80090ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fbc:	bf00      	nop
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	6812      	ldr	r2, [r2, #0]
 8009fd4:	6812      	ldr	r2, [r2, #0]
 8009fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fda:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2220      	movs	r2, #32
 8009fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7ff f874 	bl	80090d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ff0:	bf00      	nop
 8009ff2:	3708      	adds	r7, #8
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a000:	bf00      	nop
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a042:	2b01      	cmp	r3, #1
 800a044:	d101      	bne.n	800a04a <HAL_UARTEx_DisableFifoMode+0x16>
 800a046:	2302      	movs	r3, #2
 800a048:	e027      	b.n	800a09a <HAL_UARTEx_DisableFifoMode+0x66>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2224      	movs	r2, #36	; 0x24
 800a056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	6812      	ldr	r2, [r2, #0]
 800a06a:	6812      	ldr	r2, [r2, #0]
 800a06c:	f022 0201 	bic.w	r2, r2, #1
 800a070:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a078:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2220      	movs	r2, #32
 800a08c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b084      	sub	sp, #16
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d101      	bne.n	800a0be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	e02d      	b.n	800a11a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2224      	movs	r2, #36	; 0x24
 800a0ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	6812      	ldr	r2, [r2, #0]
 800a0de:	6812      	ldr	r2, [r2, #0]
 800a0e0:	f022 0201 	bic.w	r2, r2, #1
 800a0e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	6812      	ldr	r2, [r2, #0]
 800a0ee:	6892      	ldr	r2, [r2, #8]
 800a0f0:	f022 4160 	bic.w	r1, r2, #3758096384	; 0xe0000000
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f850 	bl	800a1a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2220      	movs	r2, #32
 800a10c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b084      	sub	sp, #16
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
 800a12a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a132:	2b01      	cmp	r3, #1
 800a134:	d101      	bne.n	800a13a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a136:	2302      	movs	r3, #2
 800a138:	e02d      	b.n	800a196 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2224      	movs	r2, #36	; 0x24
 800a146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	6812      	ldr	r2, [r2, #0]
 800a15a:	6812      	ldr	r2, [r2, #0]
 800a15c:	f022 0201 	bic.w	r2, r2, #1
 800a160:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	6812      	ldr	r2, [r2, #0]
 800a16a:	6892      	ldr	r2, [r2, #8]
 800a16c:	f022 6160 	bic.w	r1, r2, #234881024	; 0xe000000
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	430a      	orrs	r2, r1
 800a174:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f812 	bl	800a1a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2220      	movs	r2, #32
 800a188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
	...

0800a1a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d108      	bne.n	800a1c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a1c0:	e031      	b.n	800a226 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a1c2:	2310      	movs	r3, #16
 800a1c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a1c6:	2310      	movs	r3, #16
 800a1c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	0e5b      	lsrs	r3, r3, #25
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	f003 0307 	and.w	r3, r3, #7
 800a1d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	0f5b      	lsrs	r3, r3, #29
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	f003 0307 	and.w	r3, r3, #7
 800a1e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1ea:	7bbb      	ldrb	r3, [r7, #14]
 800a1ec:	7b3a      	ldrb	r2, [r7, #12]
 800a1ee:	4911      	ldr	r1, [pc, #68]	; (800a234 <UARTEx_SetNbDataToProcess+0x94>)
 800a1f0:	5c8a      	ldrb	r2, [r1, r2]
 800a1f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1f6:	7b3a      	ldrb	r2, [r7, #12]
 800a1f8:	490f      	ldr	r1, [pc, #60]	; (800a238 <UARTEx_SetNbDataToProcess+0x98>)
 800a1fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a200:	b29a      	uxth	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a208:	7bfb      	ldrb	r3, [r7, #15]
 800a20a:	7b7a      	ldrb	r2, [r7, #13]
 800a20c:	4909      	ldr	r1, [pc, #36]	; (800a234 <UARTEx_SetNbDataToProcess+0x94>)
 800a20e:	5c8a      	ldrb	r2, [r1, r2]
 800a210:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a214:	7b7a      	ldrb	r2, [r7, #13]
 800a216:	4908      	ldr	r1, [pc, #32]	; (800a238 <UARTEx_SetNbDataToProcess+0x98>)
 800a218:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a21a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a21e:	b29a      	uxth	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a226:	bf00      	nop
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	0800bae4 	.word	0x0800bae4
 800a238:	0800baec 	.word	0x0800baec

0800a23c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b08a      	sub	sp, #40	; 0x28
 800a240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800a242:	f107 031c 	add.w	r3, r7, #28
 800a246:	2200      	movs	r2, #0
 800a248:	601a      	str	r2, [r3, #0]
 800a24a:	605a      	str	r2, [r3, #4]
 800a24c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800a24e:	463b      	mov	r3, r7
 800a250:	2200      	movs	r2, #0
 800a252:	601a      	str	r2, [r3, #0]
 800a254:	605a      	str	r2, [r3, #4]
 800a256:	609a      	str	r2, [r3, #8]
 800a258:	60da      	str	r2, [r3, #12]
 800a25a:	611a      	str	r2, [r3, #16]
 800a25c:	615a      	str	r2, [r3, #20]
 800a25e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800a260:	4b2f      	ldr	r3, [pc, #188]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a262:	4a30      	ldr	r2, [pc, #192]	; (800a324 <MX_ADC1_Init+0xe8>)
 800a264:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a266:	4b2e      	ldr	r3, [pc, #184]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a268:	2200      	movs	r2, #0
 800a26a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800a26c:	4b2c      	ldr	r3, [pc, #176]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a26e:	2200      	movs	r2, #0
 800a270:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a272:	4b2b      	ldr	r3, [pc, #172]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a274:	2200      	movs	r2, #0
 800a276:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a278:	4b29      	ldr	r3, [pc, #164]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a27a:	2204      	movs	r2, #4
 800a27c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800a27e:	4b28      	ldr	r3, [pc, #160]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a280:	2200      	movs	r2, #0
 800a282:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800a284:	4b26      	ldr	r3, [pc, #152]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a286:	2201      	movs	r2, #1
 800a288:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800a28a:	4b25      	ldr	r3, [pc, #148]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a28c:	2201      	movs	r2, #1
 800a28e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a290:	4b23      	ldr	r3, [pc, #140]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a292:	2200      	movs	r2, #0
 800a294:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a296:	4b22      	ldr	r3, [pc, #136]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a298:	2200      	movs	r2, #0
 800a29a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a29c:	4b20      	ldr	r3, [pc, #128]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a29e:	2200      	movs	r2, #0
 800a2a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800a2a2:	4b1f      	ldr	r3, [pc, #124]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a2a4:	2203      	movs	r2, #3
 800a2a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a2a8:	4b1d      	ldr	r3, [pc, #116]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800a2ae:	4b1c      	ldr	r3, [pc, #112]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800a2b4:	4b1a      	ldr	r3, [pc, #104]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a2bc:	4818      	ldr	r0, [pc, #96]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a2be:	f7f6 fbf5 	bl	8000aac <HAL_ADC_Init>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800a2c8:	f000 fd14 	bl	800acf4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800a2d0:	f107 031c 	add.w	r3, r7, #28
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	4812      	ldr	r0, [pc, #72]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a2d8:	f7f7 f9f6 	bl	80016c8 <HAL_ADCEx_MultiModeConfigChannel>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d001      	beq.n	800a2e6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800a2e2:	f000 fd07 	bl	800acf4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800a2e6:	4b10      	ldr	r3, [pc, #64]	; (800a328 <MX_ADC1_Init+0xec>)
 800a2e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a2ea:	2306      	movs	r3, #6
 800a2ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a2f2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a2f6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a2f8:	2304      	movs	r3, #4
 800a2fa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800a300:	2300      	movs	r3, #0
 800a302:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a304:	463b      	mov	r3, r7
 800a306:	4619      	mov	r1, r3
 800a308:	4805      	ldr	r0, [pc, #20]	; (800a320 <MX_ADC1_Init+0xe4>)
 800a30a:	f7f6 fd6f 	bl	8000dec <HAL_ADC_ConfigChannel>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d001      	beq.n	800a318 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800a314:	f000 fcee 	bl	800acf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a318:	bf00      	nop
 800a31a:	3728      	adds	r7, #40	; 0x28
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	24000140 	.word	0x24000140
 800a324:	40022000 	.word	0x40022000
 800a328:	08600004 	.word	0x08600004

0800a32c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b088      	sub	sp, #32
 800a330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a332:	1d3b      	adds	r3, r7, #4
 800a334:	2200      	movs	r2, #0
 800a336:	601a      	str	r2, [r3, #0]
 800a338:	605a      	str	r2, [r3, #4]
 800a33a:	609a      	str	r2, [r3, #8]
 800a33c:	60da      	str	r2, [r3, #12]
 800a33e:	611a      	str	r2, [r3, #16]
 800a340:	615a      	str	r2, [r3, #20]
 800a342:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800a344:	4b29      	ldr	r3, [pc, #164]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a346:	4a2a      	ldr	r2, [pc, #168]	; (800a3f0 <MX_ADC3_Init+0xc4>)
 800a348:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a34a:	4b28      	ldr	r3, [pc, #160]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a34c:	2200      	movs	r2, #0
 800a34e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800a350:	4b26      	ldr	r3, [pc, #152]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a352:	2200      	movs	r2, #0
 800a354:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a356:	4b25      	ldr	r3, [pc, #148]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a358:	2200      	movs	r2, #0
 800a35a:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a35c:	4b23      	ldr	r3, [pc, #140]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a35e:	2204      	movs	r2, #4
 800a360:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800a362:	4b22      	ldr	r3, [pc, #136]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a364:	2200      	movs	r2, #0
 800a366:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800a368:	4b20      	ldr	r3, [pc, #128]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a36a:	2200      	movs	r2, #0
 800a36c:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800a36e:	4b1f      	ldr	r3, [pc, #124]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a370:	2201      	movs	r2, #1
 800a372:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800a374:	4b1d      	ldr	r3, [pc, #116]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a376:	2200      	movs	r2, #0
 800a378:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a37a:	4b1c      	ldr	r3, [pc, #112]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a380:	4b1a      	ldr	r3, [pc, #104]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a382:	2200      	movs	r2, #0
 800a384:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800a386:	4b19      	ldr	r3, [pc, #100]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a388:	2200      	movs	r2, #0
 800a38a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a38c:	4b17      	ldr	r3, [pc, #92]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a38e:	2200      	movs	r2, #0
 800a390:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800a392:	4b16      	ldr	r3, [pc, #88]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a394:	2200      	movs	r2, #0
 800a396:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800a398:	4b14      	ldr	r3, [pc, #80]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800a3a0:	4812      	ldr	r0, [pc, #72]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a3a2:	f7f6 fb83 	bl	8000aac <HAL_ADC_Init>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d001      	beq.n	800a3b0 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 800a3ac:	f000 fca2 	bl	800acf4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800a3b0:	4b10      	ldr	r3, [pc, #64]	; (800a3f4 <MX_ADC3_Init+0xc8>)
 800a3b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a3b4:	2306      	movs	r3, #6
 800a3b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a3bc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a3c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a3c2:	2304      	movs	r3, #4
 800a3c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a3ce:	1d3b      	adds	r3, r7, #4
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4806      	ldr	r0, [pc, #24]	; (800a3ec <MX_ADC3_Init+0xc0>)
 800a3d4:	f7f6 fd0a 	bl	8000dec <HAL_ADC_ConfigChannel>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 800a3de:	f000 fc89 	bl	800acf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800a3e2:	bf00      	nop
 800a3e4:	3720      	adds	r7, #32
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	240001a4 	.word	0x240001a4
 800a3f0:	58026000 	.word	0x58026000
 800a3f4:	04300002 	.word	0x04300002

0800a3f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08c      	sub	sp, #48	; 0x30
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a400:	f107 031c 	add.w	r3, r7, #28
 800a404:	2200      	movs	r2, #0
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	605a      	str	r2, [r3, #4]
 800a40a:	609a      	str	r2, [r3, #8]
 800a40c:	60da      	str	r2, [r3, #12]
 800a40e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a46      	ldr	r2, [pc, #280]	; (800a530 <HAL_ADC_MspInit+0x138>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d15c      	bne.n	800a4d4 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800a41a:	4a46      	ldr	r2, [pc, #280]	; (800a534 <HAL_ADC_MspInit+0x13c>)
 800a41c:	4b45      	ldr	r3, [pc, #276]	; (800a534 <HAL_ADC_MspInit+0x13c>)
 800a41e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a422:	f043 0320 	orr.w	r3, r3, #32
 800a426:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a42a:	4b42      	ldr	r3, [pc, #264]	; (800a534 <HAL_ADC_MspInit+0x13c>)
 800a42c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a430:	f003 0320 	and.w	r3, r3, #32
 800a434:	61bb      	str	r3, [r7, #24]
 800a436:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a438:	4a3e      	ldr	r2, [pc, #248]	; (800a534 <HAL_ADC_MspInit+0x13c>)
 800a43a:	4b3e      	ldr	r3, [pc, #248]	; (800a534 <HAL_ADC_MspInit+0x13c>)
 800a43c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a440:	f043 0320 	orr.w	r3, r3, #32
 800a444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a448:	4b3a      	ldr	r3, [pc, #232]	; (800a534 <HAL_ADC_MspInit+0x13c>)
 800a44a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a44e:	f003 0320 	and.w	r3, r3, #32
 800a452:	617b      	str	r3, [r7, #20]
 800a454:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a456:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a45a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a45c:	2303      	movs	r3, #3
 800a45e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a460:	2300      	movs	r3, #0
 800a462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a464:	f107 031c 	add.w	r3, r7, #28
 800a468:	4619      	mov	r1, r3
 800a46a:	4833      	ldr	r0, [pc, #204]	; (800a538 <HAL_ADC_MspInit+0x140>)
 800a46c:	f7f9 fe8e 	bl	800418c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800a470:	4b32      	ldr	r3, [pc, #200]	; (800a53c <HAL_ADC_MspInit+0x144>)
 800a472:	4a33      	ldr	r2, [pc, #204]	; (800a540 <HAL_ADC_MspInit+0x148>)
 800a474:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800a476:	4b31      	ldr	r3, [pc, #196]	; (800a53c <HAL_ADC_MspInit+0x144>)
 800a478:	2209      	movs	r2, #9
 800a47a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a47c:	4b2f      	ldr	r3, [pc, #188]	; (800a53c <HAL_ADC_MspInit+0x144>)
 800a47e:	2200      	movs	r2, #0
 800a480:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a482:	4b2e      	ldr	r3, [pc, #184]	; (800a53c <HAL_ADC_MspInit+0x144>)
 800a484:	2200      	movs	r2, #0
 800a486:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800a488:	4b2c      	ldr	r3, [pc, #176]	; (800a53c <HAL_ADC_MspInit+0x144>)
 800a48a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a48e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a490:	4b2a      	ldr	r3, [pc, #168]	; (800a53c <HAL_ADC_MspInit+0x144>)
 800a492:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a496:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a498:	4b28      	ldr	r3, [pc, #160]	; (800a53c <HAL_ADC_MspInit+0x144>)
 800a49a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a49e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800a4a0:	4b26      	ldr	r3, [pc, #152]	; (800a53c <HAL_ADC_MspInit+0x144>)
 800a4a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a4a8:	4b24      	ldr	r3, [pc, #144]	; (800a53c <HAL_ADC_MspInit+0x144>)
 800a4aa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a4ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a4b0:	4b22      	ldr	r3, [pc, #136]	; (800a53c <HAL_ADC_MspInit+0x144>)
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800a4b6:	4821      	ldr	r0, [pc, #132]	; (800a53c <HAL_ADC_MspInit+0x144>)
 800a4b8:	f7f7 fc44 	bl	8001d44 <HAL_DMA_Init>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <HAL_ADC_MspInit+0xce>
    {
      Error_Handler();
 800a4c2:	f000 fc17 	bl	800acf4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4a1c      	ldr	r2, [pc, #112]	; (800a53c <HAL_ADC_MspInit+0x144>)
 800a4ca:	64da      	str	r2, [r3, #76]	; 0x4c
 800a4cc:	4a1b      	ldr	r2, [pc, #108]	; (800a53c <HAL_ADC_MspInit+0x144>)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800a4d2:	e028      	b.n	800a526 <HAL_ADC_MspInit+0x12e>
  else if(adcHandle->Instance==ADC3)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a1a      	ldr	r2, [pc, #104]	; (800a544 <HAL_ADC_MspInit+0x14c>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d123      	bne.n	800a526 <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800a4de:	4a15      	ldr	r2, [pc, #84]	; (800a534 <HAL_ADC_MspInit+0x13c>)
 800a4e0:	4b14      	ldr	r3, [pc, #80]	; (800a534 <HAL_ADC_MspInit+0x13c>)
 800a4e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a4ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a4ee:	4b11      	ldr	r3, [pc, #68]	; (800a534 <HAL_ADC_MspInit+0x13c>)
 800a4f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4f8:	613b      	str	r3, [r7, #16]
 800a4fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4fc:	4a0d      	ldr	r2, [pc, #52]	; (800a534 <HAL_ADC_MspInit+0x13c>)
 800a4fe:	4b0d      	ldr	r3, [pc, #52]	; (800a534 <HAL_ADC_MspInit+0x13c>)
 800a500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a504:	f043 0304 	orr.w	r3, r3, #4
 800a508:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a50c:	4b09      	ldr	r3, [pc, #36]	; (800a534 <HAL_ADC_MspInit+0x13c>)
 800a50e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a512:	f003 0304 	and.w	r3, r3, #4
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800a51a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800a51e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800a522:	f7f6 f921 	bl	8000768 <HAL_SYSCFG_AnalogSwitchConfig>
}
 800a526:	bf00      	nop
 800a528:	3730      	adds	r7, #48	; 0x30
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	40022000 	.word	0x40022000
 800a534:	58024400 	.word	0x58024400
 800a538:	58021400 	.word	0x58021400
 800a53c:	240002cc 	.word	0x240002cc
 800a540:	40020010 	.word	0x40020010
 800a544:	58026000 	.word	0x58026000

0800a548 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b08a      	sub	sp, #40	; 0x28
 800a54c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800a54e:	1d3b      	adds	r3, r7, #4
 800a550:	2224      	movs	r2, #36	; 0x24
 800a552:	2100      	movs	r1, #0
 800a554:	4618      	mov	r0, r3
 800a556:	f001 faa1 	bl	800ba9c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800a55a:	4b17      	ldr	r3, [pc, #92]	; (800a5b8 <MX_DAC1_Init+0x70>)
 800a55c:	4a17      	ldr	r2, [pc, #92]	; (800a5bc <MX_DAC1_Init+0x74>)
 800a55e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800a560:	4815      	ldr	r0, [pc, #84]	; (800a5b8 <MX_DAC1_Init+0x70>)
 800a562:	f7f7 fa9c 	bl	8001a9e <HAL_DAC_Init>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d001      	beq.n	800a570 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800a56c:	f000 fbc2 	bl	800acf4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800a570:	2300      	movs	r3, #0
 800a572:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800a574:	230a      	movs	r3, #10
 800a576:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800a578:	2300      	movs	r3, #0
 800a57a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800a57c:	2301      	movs	r3, #1
 800a57e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800a580:	2300      	movs	r3, #0
 800a582:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800a584:	1d3b      	adds	r3, r7, #4
 800a586:	2200      	movs	r2, #0
 800a588:	4619      	mov	r1, r3
 800a58a:	480b      	ldr	r0, [pc, #44]	; (800a5b8 <MX_DAC1_Init+0x70>)
 800a58c:	f7f7 faaa 	bl	8001ae4 <HAL_DAC_ConfigChannel>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800a596:	f000 fbad 	bl	800acf4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800a59a:	1d3b      	adds	r3, r7, #4
 800a59c:	2210      	movs	r2, #16
 800a59e:	4619      	mov	r1, r3
 800a5a0:	4805      	ldr	r0, [pc, #20]	; (800a5b8 <MX_DAC1_Init+0x70>)
 800a5a2:	f7f7 fa9f 	bl	8001ae4 <HAL_DAC_ConfigChannel>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800a5ac:	f000 fba2 	bl	800acf4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800a5b0:	bf00      	nop
 800a5b2:	3728      	adds	r7, #40	; 0x28
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	24000360 	.word	0x24000360
 800a5bc:	40007400 	.word	0x40007400

0800a5c0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b08a      	sub	sp, #40	; 0x28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5c8:	f107 0314 	add.w	r3, r7, #20
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	605a      	str	r2, [r3, #4]
 800a5d2:	609a      	str	r2, [r3, #8]
 800a5d4:	60da      	str	r2, [r3, #12]
 800a5d6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a18      	ldr	r2, [pc, #96]	; (800a640 <HAL_DAC_MspInit+0x80>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d129      	bne.n	800a636 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800a5e2:	4a18      	ldr	r2, [pc, #96]	; (800a644 <HAL_DAC_MspInit+0x84>)
 800a5e4:	4b17      	ldr	r3, [pc, #92]	; (800a644 <HAL_DAC_MspInit+0x84>)
 800a5e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a5ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a5ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a5f2:	4b14      	ldr	r3, [pc, #80]	; (800a644 <HAL_DAC_MspInit+0x84>)
 800a5f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a5f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5fc:	613b      	str	r3, [r7, #16]
 800a5fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a600:	4a10      	ldr	r2, [pc, #64]	; (800a644 <HAL_DAC_MspInit+0x84>)
 800a602:	4b10      	ldr	r3, [pc, #64]	; (800a644 <HAL_DAC_MspInit+0x84>)
 800a604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a608:	f043 0301 	orr.w	r3, r3, #1
 800a60c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a610:	4b0c      	ldr	r3, [pc, #48]	; (800a644 <HAL_DAC_MspInit+0x84>)
 800a612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a616:	f003 0301 	and.w	r3, r3, #1
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800a61e:	2330      	movs	r3, #48	; 0x30
 800a620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a622:	2303      	movs	r3, #3
 800a624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a626:	2300      	movs	r3, #0
 800a628:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a62a:	f107 0314 	add.w	r3, r7, #20
 800a62e:	4619      	mov	r1, r3
 800a630:	4805      	ldr	r0, [pc, #20]	; (800a648 <HAL_DAC_MspInit+0x88>)
 800a632:	f7f9 fdab 	bl	800418c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800a636:	bf00      	nop
 800a638:	3728      	adds	r7, #40	; 0x28
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	40007400 	.word	0x40007400
 800a644:	58024400 	.word	0x58024400
 800a648:	58020000 	.word	0x58020000

0800a64c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a652:	4a15      	ldr	r2, [pc, #84]	; (800a6a8 <MX_DMA_Init+0x5c>)
 800a654:	4b14      	ldr	r3, [pc, #80]	; (800a6a8 <MX_DMA_Init+0x5c>)
 800a656:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a65a:	f043 0301 	orr.w	r3, r3, #1
 800a65e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a662:	4b11      	ldr	r3, [pc, #68]	; (800a6a8 <MX_DMA_Init+0x5c>)
 800a664:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a668:	f003 0301 	and.w	r3, r3, #1
 800a66c:	607b      	str	r3, [r7, #4]
 800a66e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
 800a670:	2200      	movs	r2, #0
 800a672:	2102      	movs	r1, #2
 800a674:	200b      	movs	r0, #11
 800a676:	f7f7 f9de 	bl	8001a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800a67a:	200b      	movs	r0, #11
 800a67c:	f7f7 f9f5 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800a680:	2200      	movs	r2, #0
 800a682:	2100      	movs	r1, #0
 800a684:	200c      	movs	r0, #12
 800a686:	f7f7 f9d6 	bl	8001a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a68a:	200c      	movs	r0, #12
 800a68c:	f7f7 f9ed 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 0);
 800a690:	2200      	movs	r2, #0
 800a692:	2101      	movs	r1, #1
 800a694:	200d      	movs	r0, #13
 800a696:	f7f7 f9ce 	bl	8001a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800a69a:	200d      	movs	r0, #13
 800a69c:	f7f7 f9e5 	bl	8001a6a <HAL_NVIC_EnableIRQ>

}
 800a6a0:	bf00      	nop
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	58024400 	.word	0x58024400

0800a6ac <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b08e      	sub	sp, #56	; 0x38
 800a6b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	605a      	str	r2, [r3, #4]
 800a6bc:	609a      	str	r2, [r3, #8]
 800a6be:	60da      	str	r2, [r3, #12]
 800a6c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a6c2:	4a92      	ldr	r2, [pc, #584]	; (800a90c <MX_GPIO_Init+0x260>)
 800a6c4:	4b91      	ldr	r3, [pc, #580]	; (800a90c <MX_GPIO_Init+0x260>)
 800a6c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6ca:	f043 0310 	orr.w	r3, r3, #16
 800a6ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a6d2:	4b8e      	ldr	r3, [pc, #568]	; (800a90c <MX_GPIO_Init+0x260>)
 800a6d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6d8:	f003 0310 	and.w	r3, r3, #16
 800a6dc:	623b      	str	r3, [r7, #32]
 800a6de:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a6e0:	4a8a      	ldr	r2, [pc, #552]	; (800a90c <MX_GPIO_Init+0x260>)
 800a6e2:	4b8a      	ldr	r3, [pc, #552]	; (800a90c <MX_GPIO_Init+0x260>)
 800a6e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6e8:	f043 0304 	orr.w	r3, r3, #4
 800a6ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a6f0:	4b86      	ldr	r3, [pc, #536]	; (800a90c <MX_GPIO_Init+0x260>)
 800a6f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6f6:	f003 0304 	and.w	r3, r3, #4
 800a6fa:	61fb      	str	r3, [r7, #28]
 800a6fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a6fe:	4a83      	ldr	r2, [pc, #524]	; (800a90c <MX_GPIO_Init+0x260>)
 800a700:	4b82      	ldr	r3, [pc, #520]	; (800a90c <MX_GPIO_Init+0x260>)
 800a702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a706:	f043 0320 	orr.w	r3, r3, #32
 800a70a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a70e:	4b7f      	ldr	r3, [pc, #508]	; (800a90c <MX_GPIO_Init+0x260>)
 800a710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a714:	f003 0320 	and.w	r3, r3, #32
 800a718:	61bb      	str	r3, [r7, #24]
 800a71a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a71c:	4a7b      	ldr	r2, [pc, #492]	; (800a90c <MX_GPIO_Init+0x260>)
 800a71e:	4b7b      	ldr	r3, [pc, #492]	; (800a90c <MX_GPIO_Init+0x260>)
 800a720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a72c:	4b77      	ldr	r3, [pc, #476]	; (800a90c <MX_GPIO_Init+0x260>)
 800a72e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a736:	617b      	str	r3, [r7, #20]
 800a738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a73a:	4a74      	ldr	r2, [pc, #464]	; (800a90c <MX_GPIO_Init+0x260>)
 800a73c:	4b73      	ldr	r3, [pc, #460]	; (800a90c <MX_GPIO_Init+0x260>)
 800a73e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a742:	f043 0301 	orr.w	r3, r3, #1
 800a746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a74a:	4b70      	ldr	r3, [pc, #448]	; (800a90c <MX_GPIO_Init+0x260>)
 800a74c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	613b      	str	r3, [r7, #16]
 800a756:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a758:	4a6c      	ldr	r2, [pc, #432]	; (800a90c <MX_GPIO_Init+0x260>)
 800a75a:	4b6c      	ldr	r3, [pc, #432]	; (800a90c <MX_GPIO_Init+0x260>)
 800a75c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a760:	f043 0302 	orr.w	r3, r3, #2
 800a764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a768:	4b68      	ldr	r3, [pc, #416]	; (800a90c <MX_GPIO_Init+0x260>)
 800a76a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a76e:	f003 0302 	and.w	r3, r3, #2
 800a772:	60fb      	str	r3, [r7, #12]
 800a774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a776:	4a65      	ldr	r2, [pc, #404]	; (800a90c <MX_GPIO_Init+0x260>)
 800a778:	4b64      	ldr	r3, [pc, #400]	; (800a90c <MX_GPIO_Init+0x260>)
 800a77a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a77e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a786:	4b61      	ldr	r3, [pc, #388]	; (800a90c <MX_GPIO_Init+0x260>)
 800a788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a78c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a790:	60bb      	str	r3, [r7, #8]
 800a792:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a794:	4a5d      	ldr	r2, [pc, #372]	; (800a90c <MX_GPIO_Init+0x260>)
 800a796:	4b5d      	ldr	r3, [pc, #372]	; (800a90c <MX_GPIO_Init+0x260>)
 800a798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a79c:	f043 0308 	orr.w	r3, r3, #8
 800a7a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a7a4:	4b59      	ldr	r3, [pc, #356]	; (800a90c <MX_GPIO_Init+0x260>)
 800a7a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7aa:	f003 0308 	and.w	r3, r3, #8
 800a7ae:	607b      	str	r3, [r7, #4]
 800a7b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2102      	movs	r1, #2
 800a7b6:	4856      	ldr	r0, [pc, #344]	; (800a910 <MX_GPIO_Init+0x264>)
 800a7b8:	f7f9 fe98 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 800a7bc:	2200      	movs	r2, #0
 800a7be:	2101      	movs	r1, #1
 800a7c0:	4854      	ldr	r0, [pc, #336]	; (800a914 <MX_GPIO_Init+0x268>)
 800a7c2:	f7f9 fe93 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a7cc:	4852      	ldr	r0, [pc, #328]	; (800a918 <MX_GPIO_Init+0x26c>)
 800a7ce:	f7f9 fe8d 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	2110      	movs	r1, #16
 800a7d6:	484e      	ldr	r0, [pc, #312]	; (800a910 <MX_GPIO_Init+0x264>)
 800a7d8:	f7f9 fe88 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE11 PE13 PE15 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800a7dc:	f64a 33ff 	movw	r3, #44031	; 0xabff
 800a7e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a7ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4849      	ldr	r0, [pc, #292]	; (800a918 <MX_GPIO_Init+0x26c>)
 800a7f2:	f7f9 fccb 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800a7f6:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800a7fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a800:	2300      	movs	r3, #0
 800a802:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a808:	4619      	mov	r1, r3
 800a80a:	4844      	ldr	r0, [pc, #272]	; (800a91c <MX_GPIO_Init+0x270>)
 800a80c:	f7f9 fcbe 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF12
                           PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800a810:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800a814:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a816:	2303      	movs	r3, #3
 800a818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a81a:	2300      	movs	r3, #0
 800a81c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a81e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a822:	4619      	mov	r1, r3
 800a824:	483e      	ldr	r0, [pc, #248]	; (800a920 <MX_GPIO_Init+0x274>)
 800a826:	f7f9 fcb1 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 800a82a:	f649 73ce 	movw	r3, #40910	; 0x9fce
 800a82e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a830:	2303      	movs	r3, #3
 800a832:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a834:	2300      	movs	r3, #0
 800a836:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a83c:	4619      	mov	r1, r3
 800a83e:	4839      	ldr	r0, [pc, #228]	; (800a924 <MX_GPIO_Init+0x278>)
 800a840:	f7f9 fca4 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800a844:	f64f 73c5 	movw	r3, #65477	; 0xffc5
 800a848:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a84a:	2303      	movs	r3, #3
 800a84c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a84e:	2300      	movs	r3, #0
 800a850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a856:	4619      	mov	r1, r3
 800a858:	482d      	ldr	r0, [pc, #180]	; (800a910 <MX_GPIO_Init+0x264>)
 800a85a:	f7f9 fc97 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a85e:	2302      	movs	r3, #2
 800a860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a862:	2301      	movs	r3, #1
 800a864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a866:	2302      	movs	r3, #2
 800a868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a86a:	2303      	movs	r3, #3
 800a86c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a86e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a872:	4619      	mov	r1, r3
 800a874:	4826      	ldr	r0, [pc, #152]	; (800a910 <MX_GPIO_Init+0x264>)
 800a876:	f7f9 fc89 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a87a:	2301      	movs	r3, #1
 800a87c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a87e:	2301      	movs	r3, #1
 800a880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a882:	2300      	movs	r3, #0
 800a884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a886:	2300      	movs	r3, #0
 800a888:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a88a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a88e:	4619      	mov	r1, r3
 800a890:	4820      	ldr	r0, [pc, #128]	; (800a914 <MX_GPIO_Init+0x268>)
 800a892:	f7f9 fc7b 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG2 PG3 PG4
                           PG5 PG6 PG7 PG8
                           PG9 PG10 PG11 PG12
                           PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800a896:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a89a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a89c:	2303      	movs	r3, #3
 800a89e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a8a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	481a      	ldr	r0, [pc, #104]	; (800a914 <MX_GPIO_Init+0x268>)
 800a8ac:	f7f9 fc6e 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a8b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a8c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	4813      	ldr	r0, [pc, #76]	; (800a918 <MX_GPIO_Init+0x26c>)
 800a8ca:	f7f9 fc5f 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800a8ce:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800a8d2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a8dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	4811      	ldr	r0, [pc, #68]	; (800a928 <MX_GPIO_Init+0x27c>)
 800a8e4:	f7f9 fc52 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a8e8:	2310      	movs	r3, #16
 800a8ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a8f4:	2302      	movs	r3, #2
 800a8f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	4804      	ldr	r0, [pc, #16]	; (800a910 <MX_GPIO_Init+0x264>)
 800a900:	f7f9 fc44 	bl	800418c <HAL_GPIO_Init>

}
 800a904:	bf00      	nop
 800a906:	3738      	adds	r7, #56	; 0x38
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	58024400 	.word	0x58024400
 800a910:	58020400 	.word	0x58020400
 800a914:	58021800 	.word	0x58021800
 800a918:	58021000 	.word	0x58021000
 800a91c:	58020800 	.word	0x58020800
 800a920:	58021400 	.word	0x58021400
 800a924:	58020000 	.word	0x58020000
 800a928:	58020c00 	.word	0x58020c00
 800a92c:	00000000 	.word	0x00000000

0800a930 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a930:	b590      	push	{r4, r7, lr}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
		PT_Anf =PT_End;
 800a938:	4b51      	ldr	r3, [pc, #324]	; (800aa80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800a93a:	cb18      	ldmia	r3, {r3, r4}
 800a93c:	4a51      	ldr	r2, [pc, #324]	; (800aa84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800a93e:	e882 0018 	stmia.w	r2, {r3, r4}
		adc_value =(float)ADCBuf[0];
 800a942:	4b51      	ldr	r3, [pc, #324]	; (800aa88 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	ee07 3a90 	vmov	s15, r3
 800a94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a94e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a952:	ee17 2a90 	vmov	r2, s15
 800a956:	4b4d      	ldr	r3, [pc, #308]	; (800aa8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800a958:	601a      	str	r2, [r3, #0]
		volt_value=3.3f*((float)(adc_value)/65536); // single ended mode
 800a95a:	4b4c      	ldr	r3, [pc, #304]	; (800aa8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	ee07 3a90 	vmov	s15, r3
 800a962:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a966:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800aa90 <HAL_TIM_PeriodElapsedCallback+0x160>
 800a96a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a96e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800aa94 <HAL_TIM_PeriodElapsedCallback+0x164>
 800a972:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a976:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a97a:	4b47      	ldr	r3, [pc, #284]	; (800aa98 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800a97c:	ed83 7b00 	vstr	d7, [r3]
		PID_Calc(pPID1,PIDInputOption, volt_value,LockInOutput);
 800a980:	4b46      	ldr	r3, [pc, #280]	; (800aa9c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	4b46      	ldr	r3, [pc, #280]	; (800aaa0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800a986:	7819      	ldrb	r1, [r3, #0]
 800a988:	4b43      	ldr	r3, [pc, #268]	; (800aa98 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800a98a:	ed93 7b00 	vldr	d7, [r3]
 800a98e:	4b45      	ldr	r3, [pc, #276]	; (800aaa4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800a990:	ed93 6b00 	vldr	d6, [r3]
 800a994:	eeb0 1b46 	vmov.f64	d1, d6
 800a998:	eeb0 0b47 	vmov.f64	d0, d7
 800a99c:	4610      	mov	r0, r2
 800a99e:	f000 fad3 	bl	800af48 <PID_Calc>
		DACoutput1 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG12BIT);
 800a9a2:	4b41      	ldr	r3, [pc, #260]	; (800aaa8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800a9a4:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 800a9a8:	ed9f 6b33 	vldr	d6, [pc, #204]	; 800aa78 <HAL_TIM_PeriodElapsedCallback+0x148>
 800a9ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a9b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800a9b4:	edc7 7a00 	vstr	s15, [r7]
 800a9b8:	883b      	ldrh	r3, [r7, #0]
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	4b3b      	ldr	r3, [pc, #236]	; (800aaac <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800a9be:	801a      	strh	r2, [r3, #0]
		DACoutput2 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG12BIT);
 800a9c0:	4b39      	ldr	r3, [pc, #228]	; (800aaa8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800a9c2:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 800a9c6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 800aa78 <HAL_TIM_PeriodElapsedCallback+0x148>
 800a9ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a9ce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800a9d2:	edc7 7a00 	vstr	s15, [r7]
 800a9d6:	883b      	ldrh	r3, [r7, #0]
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	4b35      	ldr	r3, [pc, #212]	; (800aab0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800a9dc:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_0);
 800a9de:	2101      	movs	r1, #1
 800a9e0:	4834      	ldr	r0, [pc, #208]	; (800aab4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800a9e2:	f7f9 fd9c 	bl	800451e <HAL_GPIO_TogglePin>
		  }*/

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
		//HAL_SPI_Transmit(&hspi1, (uint8_t *)pData, 1, 1);
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
		if (li<2)
 800a9e6:	4b34      	ldr	r3, [pc, #208]	; (800aab8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800a9e8:	881b      	ldrh	r3, [r3, #0]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d80a      	bhi.n	800aa04 <HAL_TIM_PeriodElapsedCallback+0xd4>
		{
			li +=1;
 800a9ee:	4b32      	ldr	r3, [pc, #200]	; (800aab8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800a9f0:	881b      	ldrh	r3, [r3, #0]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	4b30      	ldr	r3, [pc, #192]	; (800aab8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800a9f8:	801a      	strh	r2, [r3, #0]
			spi_data=0xAAAA;
 800a9fa:	4b30      	ldr	r3, [pc, #192]	; (800aabc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800a9fc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800aa00:	801a      	strh	r2, [r3, #0]
 800aa02:	e014      	b.n	800aa2e <HAL_TIM_PeriodElapsedCallback+0xfe>
		}
		else if (li>=2 && li<3)
 800aa04:	4b2c      	ldr	r3, [pc, #176]	; (800aab8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800aa06:	881b      	ldrh	r3, [r3, #0]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d90d      	bls.n	800aa28 <HAL_TIM_PeriodElapsedCallback+0xf8>
 800aa0c:	4b2a      	ldr	r3, [pc, #168]	; (800aab8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800aa0e:	881b      	ldrh	r3, [r3, #0]
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d809      	bhi.n	800aa28 <HAL_TIM_PeriodElapsedCallback+0xf8>
		{
			li +=1;
 800aa14:	4b28      	ldr	r3, [pc, #160]	; (800aab8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800aa16:	881b      	ldrh	r3, [r3, #0]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	4b26      	ldr	r3, [pc, #152]	; (800aab8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800aa1e:	801a      	strh	r2, [r3, #0]
			spi_data =0x000F;
 800aa20:	4b26      	ldr	r3, [pc, #152]	; (800aabc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800aa22:	220f      	movs	r2, #15
 800aa24:	801a      	strh	r2, [r3, #0]
 800aa26:	e002      	b.n	800aa2e <HAL_TIM_PeriodElapsedCallback+0xfe>
		}
		else
		{
			li =0;
 800aa28:	4b23      	ldr	r3, [pc, #140]	; (800aab8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	801a      	strh	r2, [r3, #0]
		}
		SPI1_transmit(spi_data);
 800aa2e:	4b23      	ldr	r3, [pc, #140]	; (800aabc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800aa30:	881b      	ldrh	r3, [r3, #0]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 fb7c 	bl	800b130 <SPI1_transmit>
		PT_End =DWT->CYCCNT;
 800aa38:	4b21      	ldr	r3, [pc, #132]	; (800aac0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	ee07 3a90 	vmov	s15, r3
 800aa40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800aa44:	4b0e      	ldr	r3, [pc, #56]	; (800aa80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800aa46:	ed83 7b00 	vstr	d7, [r3]
		duration = PT_End-PT_Anf;
 800aa4a:	4b0d      	ldr	r3, [pc, #52]	; (800aa80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800aa4c:	ed93 6b00 	vldr	d6, [r3]
 800aa50:	4b0c      	ldr	r3, [pc, #48]	; (800aa84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800aa52:	ed93 7b00 	vldr	d7, [r3]
 800aa56:	ee36 7b47 	vsub.f64	d7, d6, d7
 800aa5a:	4b1a      	ldr	r3, [pc, #104]	; (800aac4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800aa5c:	ed83 7b00 	vstr	d7, [r3]
        HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 800aa60:	2200      	movs	r2, #0
 800aa62:	2102      	movs	r1, #2
 800aa64:	4818      	ldr	r0, [pc, #96]	; (800aac8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800aa66:	f7f9 fd41 	bl	80044ec <HAL_GPIO_WritePin>
}
 800aa6a:	bf00      	nop
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd90      	pop	{r4, r7, pc}
 800aa72:	bf00      	nop
 800aa74:	f3af 8000 	nop.w
 800aa78:	9999999a 	.word	0x9999999a
 800aa7c:	40936399 	.word	0x40936399
 800aa80:	24000048 	.word	0x24000048
 800aa84:	24000040 	.word	0x24000040
 800aa88:	240003a8 	.word	0x240003a8
 800aa8c:	24000034 	.word	0x24000034
 800aa90:	47800000 	.word	0x47800000
 800aa94:	40533333 	.word	0x40533333
 800aa98:	24000038 	.word	0x24000038
 800aa9c:	24000008 	.word	0x24000008
 800aaa0:	24000005 	.word	0x24000005
 800aaa4:	24000058 	.word	0x24000058
 800aaa8:	24000208 	.word	0x24000208
 800aaac:	240003a4 	.word	0x240003a4
 800aab0:	240003c0 	.word	0x240003c0
 800aab4:	58021800 	.word	0x58021800
 800aab8:	24000380 	.word	0x24000380
 800aabc:	24000060 	.word	0x24000060
 800aac0:	e0001000 	.word	0xe0001000
 800aac4:	24000050 	.word	0x24000050
 800aac8:	58020400 	.word	0x58020400
 800aacc:	00000000 	.word	0x00000000

0800aad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800aad0:	b598      	push	{r3, r4, r7, lr}
 800aad2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800aad4:	f7f5 fd88 	bl	80005e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800aad8:	f000 f852 	bl	800ab80 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800aadc:	f000 f8d4 	bl	800ac88 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800aae0:	f7ff fde4 	bl	800a6ac <MX_GPIO_Init>
  MX_DMA_Init();
 800aae4:	f7ff fdb2 	bl	800a64c <MX_DMA_Init>
  MX_DAC1_Init();
 800aae8:	f7ff fd2e 	bl	800a548 <MX_DAC1_Init>
  MX_ADC1_Init();
 800aaec:	f7ff fba6 	bl	800a23c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800aaf0:	f000 fe68 	bl	800b7c4 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 800aaf4:	f7ff fc1a 	bl	800a32c <MX_ADC3_Init>
  MX_TIM2_Init();
 800aaf8:	f000 fd90 	bl	800b61c <MX_TIM2_Init>
  MX_SPI1_Init();
 800aafc:	f000 fb3c 	bl	800b178 <MX_SPI1_Init>
  MX_SPI4_Init();
 800ab00:	f000 fb90 	bl	800b224 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800ab04:	4a18      	ldr	r2, [pc, #96]	; (800ab68 <main+0x98>)
 800ab06:	4b18      	ldr	r3, [pc, #96]	; (800ab68 <main+0x98>)
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab0e:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= 1;
 800ab10:	4a16      	ldr	r2, [pc, #88]	; (800ab6c <main+0x9c>)
 800ab12:	4b16      	ldr	r3, [pc, #88]	; (800ab6c <main+0x9c>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f043 0301 	orr.w	r3, r3, #1
 800ab1a:	6013      	str	r3, [r2, #0]
  Tim2ARR=200e6 / CTRLFREQUENCY-1;
 800ab1c:	4b14      	ldr	r3, [pc, #80]	; (800ab70 <main+0xa0>)
 800ab1e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800ab22:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_PRESCALER(&htim2, TIM2PSC);
 800ab24:	4b13      	ldr	r3, [pc, #76]	; (800ab74 <main+0xa4>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_TIM_SET_AUTORELOAD(&htim2,  Tim2ARR);
 800ab2c:	4b11      	ldr	r3, [pc, #68]	; (800ab74 <main+0xa4>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a0f      	ldr	r2, [pc, #60]	; (800ab70 <main+0xa0>)
 800ab32:	6812      	ldr	r2, [r2, #0]
 800ab34:	62da      	str	r2, [r3, #44]	; 0x2c
 800ab36:	4b0e      	ldr	r3, [pc, #56]	; (800ab70 <main+0xa0>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a0e      	ldr	r2, [pc, #56]	; (800ab74 <main+0xa4>)
 800ab3c:	60d3      	str	r3, [r2, #12]
  paramFreq = CTRLFREQUENCY;
 800ab3e:	4a0e      	ldr	r2, [pc, #56]	; (800ab78 <main+0xa8>)
 800ab40:	a407      	add	r4, pc, #28	; (adr r4, 800ab60 <main+0x90>)
 800ab42:	cc18      	ldmia	r4, {r3, r4}
 800ab44:	e882 0018 	stmia.w	r2, {r3, r4}
  PID_vInit(pPID1);
 800ab48:	4b0c      	ldr	r3, [pc, #48]	; (800ab7c <main+0xac>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 f8f3 	bl	800ad38 <PID_vInit>
  /* USER CODE BEGIN 1 */
	 // HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
	      /* Start DAC */
  //HAL_ADC_Start_DMA(&hadc1,ADCBuf,2);
  SPI1_start();
 800ab52:	f000 fad3 	bl	800b0fc <SPI1_start>
  HAL_TIM_Base_Start_IT(&htim2);
 800ab56:	4807      	ldr	r0, [pc, #28]	; (800ab74 <main+0xa4>)
 800ab58:	f7fc ff0e 	bl	8007978 <HAL_TIM_Base_Start_IT>
 // HAL_SPI_Transmit_DMA(&hspi1, pData,2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800ab5c:	e7fe      	b.n	800ab5c <main+0x8c>
 800ab5e:	bf00      	nop
 800ab60:	00000000 	.word	0x00000000
 800ab64:	40c38800 	.word	0x40c38800
 800ab68:	e000edf0 	.word	0xe000edf0
 800ab6c:	e0001000 	.word	0xe0001000
 800ab70:	240003c8 	.word	0x240003c8
 800ab74:	240004e0 	.word	0x240004e0
 800ab78:	240003b8 	.word	0x240003b8
 800ab7c:	24000008 	.word	0x24000008

0800ab80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b09c      	sub	sp, #112	; 0x70
 800ab84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ab86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab8a:	224c      	movs	r2, #76	; 0x4c
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f000 ff84 	bl	800ba9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ab94:	1d3b      	adds	r3, r7, #4
 800ab96:	2220      	movs	r2, #32
 800ab98:	2100      	movs	r1, #0
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f000 ff7e 	bl	800ba9c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800aba0:	2002      	movs	r0, #2
 800aba2:	f7f9 fcd7 	bl	8004554 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800aba6:	2300      	movs	r3, #0
 800aba8:	603b      	str	r3, [r7, #0]
 800abaa:	4a34      	ldr	r2, [pc, #208]	; (800ac7c <SystemClock_Config+0xfc>)
 800abac:	4b33      	ldr	r3, [pc, #204]	; (800ac7c <SystemClock_Config+0xfc>)
 800abae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb0:	f023 0301 	bic.w	r3, r3, #1
 800abb4:	62d3      	str	r3, [r2, #44]	; 0x2c
 800abb6:	4b31      	ldr	r3, [pc, #196]	; (800ac7c <SystemClock_Config+0xfc>)
 800abb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abba:	f003 0301 	and.w	r3, r3, #1
 800abbe:	603b      	str	r3, [r7, #0]
 800abc0:	4a2f      	ldr	r2, [pc, #188]	; (800ac80 <SystemClock_Config+0x100>)
 800abc2:	4b2f      	ldr	r3, [pc, #188]	; (800ac80 <SystemClock_Config+0x100>)
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abca:	6193      	str	r3, [r2, #24]
 800abcc:	4b2c      	ldr	r3, [pc, #176]	; (800ac80 <SystemClock_Config+0x100>)
 800abce:	699b      	ldr	r3, [r3, #24]
 800abd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800abd4:	603b      	str	r3, [r7, #0]
 800abd6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800abd8:	bf00      	nop
 800abda:	4b29      	ldr	r3, [pc, #164]	; (800ac80 <SystemClock_Config+0x100>)
 800abdc:	699b      	ldr	r3, [r3, #24]
 800abde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abe6:	d1f8      	bne.n	800abda <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800abe8:	4a26      	ldr	r2, [pc, #152]	; (800ac84 <SystemClock_Config+0x104>)
 800abea:	4b26      	ldr	r3, [pc, #152]	; (800ac84 <SystemClock_Config+0x104>)
 800abec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abee:	f023 0303 	bic.w	r3, r3, #3
 800abf2:	f043 0302 	orr.w	r3, r3, #2
 800abf6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800abf8:	2301      	movs	r3, #1
 800abfa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800abfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ac00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ac02:	2302      	movs	r3, #2
 800ac04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ac06:	2302      	movs	r3, #2
 800ac08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 800ac0e:	2364      	movs	r3, #100	; 0x64
 800ac10:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800ac12:	2302      	movs	r3, #2
 800ac14:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800ac16:	2302      	movs	r3, #2
 800ac18:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800ac1e:	230c      	movs	r3, #12
 800ac20:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800ac22:	2300      	movs	r3, #0
 800ac24:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800ac26:	2300      	movs	r3, #0
 800ac28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ac2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7f9 fcca 	bl	80045c8 <HAL_RCC_OscConfig>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d001      	beq.n	800ac3e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800ac3a:	f000 f85b 	bl	800acf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ac3e:	233f      	movs	r3, #63	; 0x3f
 800ac40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ac42:	2303      	movs	r3, #3
 800ac44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800ac46:	2300      	movs	r3, #0
 800ac48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800ac4a:	2308      	movs	r3, #8
 800ac4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800ac4e:	2340      	movs	r3, #64	; 0x40
 800ac50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800ac52:	2340      	movs	r3, #64	; 0x40
 800ac54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800ac56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac5a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800ac5c:	2340      	movs	r3, #64	; 0x40
 800ac5e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800ac60:	1d3b      	adds	r3, r7, #4
 800ac62:	2102      	movs	r1, #2
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fa f8bf 	bl	8004de8 <HAL_RCC_ClockConfig>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d001      	beq.n	800ac74 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800ac70:	f000 f840 	bl	800acf4 <Error_Handler>
  }
}
 800ac74:	bf00      	nop
 800ac76:	3770      	adds	r7, #112	; 0x70
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	58000400 	.word	0x58000400
 800ac80:	58024800 	.word	0x58024800
 800ac84:	58024400 	.word	0x58024400

0800ac88 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b0b0      	sub	sp, #192	; 0xc0
 800ac8c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ac8e:	1d3b      	adds	r3, r7, #4
 800ac90:	22bc      	movs	r2, #188	; 0xbc
 800ac92:	2100      	movs	r1, #0
 800ac94:	4618      	mov	r0, r3
 800ac96:	f000 ff01 	bl	800ba9c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI1
 800ac9a:	4b15      	ldr	r3, [pc, #84]	; (800acf0 <PeriphCommonClock_Config+0x68>)
 800ac9c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 25;
 800aca2:	2319      	movs	r3, #25
 800aca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 1;
 800aca6:	2301      	movs	r3, #1
 800aca8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800acaa:	2302      	movs	r3, #2
 800acac:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 800acae:	2303      	movs	r3, #3
 800acb0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800acb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800acb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800acb8:	2300      	movs	r3, #0
 800acba:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800acc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800acc4:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800acc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800acca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800acce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800acd6:	1d3b      	adds	r3, r7, #4
 800acd8:	4618      	mov	r0, r3
 800acda:	f7fa fc09 	bl	80054f0 <HAL_RCCEx_PeriphCLKConfig>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d001      	beq.n	800ace8 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 800ace4:	f000 f806 	bl	800acf4 <Error_Handler>
  }
}
 800ace8:	bf00      	nop
 800acea:	37c0      	adds	r7, #192	; 0xc0
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	40081000 	.word	0x40081000

0800acf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800acf4:	b480      	push	{r7}
 800acf6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800acf8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800acfa:	e7fe      	b.n	800acfa <Error_Handler+0x6>

0800acfc <PIDInputSWitch>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

float PIDInputSWitch(uint8_t PIDInputOption, float ADCvalue,float LockIn)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b087      	sub	sp, #28
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	4603      	mov	r3, r0
 800ad04:	ed87 0a02 	vstr	s0, [r7, #8]
 800ad08:	edc7 0a01 	vstr	s1, [r7, #4]
 800ad0c:	73fb      	strb	r3, [r7, #15]
	 float PIDInput;
	 if (PIDInputOption == 0)
 800ad0e:	7bfb      	ldrb	r3, [r7, #15]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d102      	bne.n	800ad1a <PIDInputSWitch+0x1e>
			 {
	 	 	 	 PIDInput=LockIn;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	617b      	str	r3, [r7, #20]
 800ad18:	e001      	b.n	800ad1e <PIDInputSWitch+0x22>
			 }
	else
			{
				PIDInput =ADCvalue;
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	617b      	str	r3, [r7, #20]
			}
	 return(PIDInput);
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	ee07 3a90 	vmov	s15, r3
}
 800ad24:	eeb0 0a67 	vmov.f32	s0, s15
 800ad28:	371c      	adds	r7, #28
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	0000      	movs	r0, r0
 800ad34:	0000      	movs	r0, r0
	...

0800ad38 <PID_vInit>:
void PID_vInit(tPID* pPID)
{                                          ///< Zeiger auf Reglerstruktur
 800ad38:	b490      	push	{r4, r7}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
	pPID->_Ts 				= 		1/CTRLFREQUENCY;
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	a47d      	add	r4, pc, #500	; (adr r4, 800af38 <PID_vInit+0x200>)
 800ad44:	cc18      	ldmia	r4, {r3, r4}
 800ad46:	e882 0018 	stmia.w	r2, {r3, r4}
	pPID-> _Kp				= 		0.2;
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	a47c      	add	r4, pc, #496	; (adr r4, 800af40 <PID_vInit+0x208>)
 800ad4e:	cc18      	ldmia	r4, {r3, r4}
 800ad50:	e9c2 3402 	strd	r3, r4, [r2, #8]
	pPID-> _Ki				= 		0;
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	f04f 0300 	mov.w	r3, #0
 800ad5a:	f04f 0400 	mov.w	r4, #0
 800ad5e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	pPID-> _Kd				= 		0.0;
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	f04f 0300 	mov.w	r3, #0
 800ad68:	f04f 0400 	mov.w	r4, #0
 800ad6c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	pPID-> _max				= 		3;
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	f04f 0300 	mov.w	r3, #0
 800ad76:	4c6c      	ldr	r4, [pc, #432]	; (800af28 <PID_vInit+0x1f0>)
 800ad78:	e9c2 3408 	strd	r3, r4, [r2, #32]
	pPID-> _min				= 		-3;
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	f04f 0300 	mov.w	r3, #0
 800ad82:	4c6a      	ldr	r4, [pc, #424]	; (800af2c <PID_vInit+0x1f4>)
 800ad84:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	pPID-> _Kaw				= 		0.0;
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	f04f 0300 	mov.w	r3, #0
 800ad8e:	f04f 0400 	mov.w	r4, #0
 800ad92:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	pPID-> _EnKc			= 		1;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	639a      	str	r2, [r3, #56]	; 0x38
	pPID-> _fc				= 		10;
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	f04f 0300 	mov.w	r3, #0
 800ada2:	4c63      	ldr	r4, [pc, #396]	; (800af30 <PID_vInit+0x1f8>)
 800ada4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
    pPID-> _PIDHold			= 		0.0;
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	f04f 0300 	mov.w	r3, #0
 800adae:	f04f 0400 	mov.w	r4, #0
 800adb2:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pPID->error             =        0;
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	f04f 0300 	mov.w	r3, #0
 800adbc:	f04f 0400 	mov.w	r4, #0
 800adc0:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	pPID->error_1lag        =        0;
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	f04f 0300 	mov.w	r3, #0
 800adca:	f04f 0400 	mov.w	r4, #0
 800adce:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pPID->error_2lag        =        0;
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	f04f 0300 	mov.w	r3, #0
 800add8:	f04f 0400 	mov.w	r4, #0
 800addc:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pPID->error_AnWi        =        0;
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	f04f 0300 	mov.w	r3, #0
 800ade6:	f04f 0400 	mov.w	r4, #0
 800adea:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pPID->preout            =        0;
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	f04f 0300 	mov.w	r3, #0
 800adf4:	f04f 0400 	mov.w	r4, #0
 800adf8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	pPID->_kt               =        -1;
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	f04f 0300 	mov.w	r3, #0
 800ae02:	4c4c      	ldr	r4, [pc, #304]	; (800af34 <PID_vInit+0x1fc>)
 800ae04:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pPID->En                =        1.0;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pPID->ref               =       0.0;
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	f04f 0300 	mov.w	r3, #0
 800ae16:	f04f 0400 	mov.w	r4, #0
 800ae1a:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	pPID->a0                =        0.0;
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	f04f 0300 	mov.w	r3, #0
 800ae24:	f04f 0400 	mov.w	r4, #0
 800ae28:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	pPID->a1 				= 		0.0;
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	f04f 0300 	mov.w	r3, #0
 800ae32:	f04f 0400 	mov.w	r4, #0
 800ae36:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	pPID->a2      			= 		0.0;
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	f04f 0300 	mov.w	r3, #0
 800ae40:	f04f 0400 	mov.w	r4, #0
 800ae44:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	pPID->aw				=		0.0;
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	f04f 0300 	mov.w	r3, #0
 800ae4e:	f04f 0400 	mov.w	r4, #0
 800ae52:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	pPID->omega 			=		0;
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	f04f 0300 	mov.w	r3, #0
 800ae5c:	f04f 0400 	mov.w	r4, #0
 800ae60:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pPID->a0 				= 		pPID-> _Kp+pPID-> _Kd/V2MUV/pPID->_Ts+pPID->_Ki*V2MV*pPID->_Ts;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	ed93 6b02 	vldr	d6, [r3, #8]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	ed93 7b06 	vldr	d7, [r3, #24]
 800ae70:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800af18 <PID_vInit+0x1e0>
 800ae74:	ee87 4b05 	vdiv.f64	d4, d7, d5
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	ed93 5b00 	vldr	d5, [r3]
 800ae7e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800ae82:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	ed93 7b04 	vldr	d7, [r3, #16]
 800ae8c:	ed9f 5b24 	vldr	d5, [pc, #144]	; 800af20 <PID_vInit+0x1e8>
 800ae90:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	ed93 7b00 	vldr	d7, [r3]
 800ae9a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ae9e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
	pPID->a1 				= 		-(pPID-> _Kp+pPID-> _Kd/V2MUV/pPID->_Ts*2.0);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	ed93 6b02 	vldr	d6, [r3, #8]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	ed93 7b06 	vldr	d7, [r3, #24]
 800aeb4:	ed9f 5b18 	vldr	d5, [pc, #96]	; 800af18 <PID_vInit+0x1e0>
 800aeb8:	ee87 4b05 	vdiv.f64	d4, d7, d5
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	ed93 5b00 	vldr	d5, [r3]
 800aec2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800aec6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800aeca:	ee36 7b07 	vadd.f64	d7, d6, d7
 800aece:	eeb1 7b47 	vneg.f64	d7, d7
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
	pPID->a2 				=		pPID->_Kd/V2MUV/pPID->_Ts;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	ed93 7b06 	vldr	d7, [r3, #24]
 800aede:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 800af18 <PID_vInit+0x1e0>
 800aee2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	ed93 6b00 	vldr	d6, [r3]
 800aeec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
	pPID->aw   				=		pPID->_Kaw*pPID->_Ts;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	ed93 7b00 	vldr	d7, [r3]
 800af02:	ee26 7b07 	vmul.f64	d7, d6, d7
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
};
 800af0c:	bf00      	nop
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bc90      	pop	{r4, r7}
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	00000000 	.word	0x00000000
 800af1c:	412e8480 	.word	0x412e8480
 800af20:	00000000 	.word	0x00000000
 800af24:	408f4000 	.word	0x408f4000
 800af28:	40080000 	.word	0x40080000
 800af2c:	c0080000 	.word	0xc0080000
 800af30:	40240000 	.word	0x40240000
 800af34:	bff00000 	.word	0xbff00000
 800af38:	eb1c432d 	.word	0xeb1c432d
 800af3c:	3f1a36e2 	.word	0x3f1a36e2
 800af40:	9999999a 	.word	0x9999999a
 800af44:	3fc99999 	.word	0x3fc99999

0800af48 <PID_Calc>:
void PID_Calc(tPID* pPID,uint8_t PIDInputOption, double ADCvalue,double LockIn)
{
 800af48:	b590      	push	{r4, r7, lr}
 800af4a:	b08d      	sub	sp, #52	; 0x34
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6178      	str	r0, [r7, #20]
 800af50:	460b      	mov	r3, r1
 800af52:	ed87 0b02 	vstr	d0, [r7, #8]
 800af56:	ed87 1b00 	vstr	d1, [r7]
 800af5a:	74fb      	strb	r3, [r7, #19]
	double 			output;
	double 			outputsat;
	double          pd;
	pd          				= 	PIDInputSWitch(PIDInputOption, ADCvalue, LockIn);
 800af5c:	ed97 7b02 	vldr	d7, [r7, #8]
 800af60:	eef7 6bc7 	vcvt.f32.f64	s13, d7
 800af64:	ed97 7b00 	vldr	d7, [r7]
 800af68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800af6c:	7cfb      	ldrb	r3, [r7, #19]
 800af6e:	eef0 0a67 	vmov.f32	s1, s15
 800af72:	eeb0 0a66 	vmov.f32	s0, s13
 800af76:	4618      	mov	r0, r3
 800af78:	f7ff fec0 	bl	800acfc <PIDInputSWitch>
 800af7c:	eef0 7a40 	vmov.f32	s15, s0
 800af80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800af84:	ed87 7b06 	vstr	d7, [r7, #24]
	pPID->error = (pPID->ref - pd)*pPID->_kt;
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	ed93 6b2c 	vldr	d6, [r3, #176]	; 0xb0
 800af8e:	ed97 7b06 	vldr	d7, [r7, #24]
 800af92:	ee36 6b47 	vsub.f64	d6, d6, d7
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 800af9c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	if (pPID->En>=1)
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afac:	2b00      	cmp	r3, #0
 800afae:	dd3b      	ble.n	800b028 <PID_Calc+0xe0>
	{
		output = (pPID->preout+pPID->a0*pPID->error + pPID->a1*pPID->error_1lag + pPID->a2*pPID->error_2lag+pPID->aw*pPID->error_AnWi)/(1+pPID->omega*pPID->_Ts);
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	ed93 5b24 	vldr	d5, [r3, #144]	; 0x90
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800afc2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800afc6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	ed93 5b26 	vldr	d5, [r3, #152]	; 0x98
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800afd6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800afda:	ee36 6b07 	vadd.f64	d6, d6, d7
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	ed93 5b28 	vldr	d5, [r3, #160]	; 0xa0
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800afea:	ee25 7b07 	vmul.f64	d7, d5, d7
 800afee:	ee36 6b07 	vadd.f64	d6, d6, d7
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	ed93 5b2a 	vldr	d5, [r3, #168]	; 0xa8
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800affe:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b002:	ee36 5b07 	vadd.f64	d5, d6, d7
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	ed93 7b00 	vldr	d7, [r3]
 800b012:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b016:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b01a:	ee37 6b06 	vadd.f64	d6, d7, d6
 800b01e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b022:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
 800b026:	e021      	b.n	800b06c <PID_Calc+0x124>
	}
	else
	{
		output = 0;
 800b028:	f04f 0300 	mov.w	r3, #0
 800b02c:	f04f 0400 	mov.w	r4, #0
 800b030:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		pPID->error             =        0;
 800b034:	697a      	ldr	r2, [r7, #20]
 800b036:	f04f 0300 	mov.w	r3, #0
 800b03a:	f04f 0400 	mov.w	r4, #0
 800b03e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		pPID->error_1lag        =        0;
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	f04f 0300 	mov.w	r3, #0
 800b048:	f04f 0400 	mov.w	r4, #0
 800b04c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		pPID->error_2lag        =        0;
 800b050:	697a      	ldr	r2, [r7, #20]
 800b052:	f04f 0300 	mov.w	r3, #0
 800b056:	f04f 0400 	mov.w	r4, #0
 800b05a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		pPID->preout            =        0;
 800b05e:	697a      	ldr	r2, [r7, #20]
 800b060:	f04f 0300 	mov.w	r3, #0
 800b064:	f04f 0400 	mov.w	r4, #0
 800b068:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
//		}
//	if( output < pPID->_min*3 )
//			{
//			   output = 3*pPID->_min;
//			}
	pPID->preout = output;
 800b06c:	697a      	ldr	r2, [r7, #20]
 800b06e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800b072:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	    // Restrict to max/min
	if( output > pPID->_max )
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	ed93 6b08 	vldr	d6, [r3, #32]
 800b07c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800b080:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b088:	d505      	bpl.n	800b096 <PID_Calc+0x14e>
	{
	   outputsat = pPID->_max;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800b090:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800b094:	e013      	b.n	800b0be <PID_Calc+0x176>
	}
	else if( output < pPID->_min )
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 800b09c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800b0a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0a8:	dd05      	ble.n	800b0b6 <PID_Calc+0x16e>
	{
	   outputsat = pPID->_min;
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800b0b0:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800b0b4:	e003      	b.n	800b0be <PID_Calc+0x176>
	}
	else
	{
	   outputsat = output;
 800b0b6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800b0ba:	e9c7 3408 	strd	r3, r4, [r7, #32]
	}
	pPID->error_AnWi              =   outputsat-output;
 800b0be:	ed97 6b08 	vldr	d6, [r7, #32]
 800b0c2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800b0c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	    // Save error to previous error
	pPID->error_2lag = pPID->error_1lag;
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pPID->error_1lag = pPID->error;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
//   tty3 =Kd/pPID->_Ts;
	pPID->outvalue= outputsat;
 800b0e8:	697a      	ldr	r2, [r7, #20]
 800b0ea:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b0ee:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
}
 800b0f2:	bf00      	nop
 800b0f4:	3734      	adds	r7, #52	; 0x34
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd90      	pop	{r4, r7, pc}
	...

0800b0fc <SPI1_start>:
void SPI1_start()
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800b100:	2201      	movs	r2, #1
 800b102:	2110      	movs	r1, #16
 800b104:	4808      	ldr	r0, [pc, #32]	; (800b128 <SPI1_start+0x2c>)
 800b106:	f7f9 f9f1 	bl	80044ec <HAL_GPIO_WritePin>
	  SPI1->CR1 |= SPI_CR1_SPE_Msk;    // enable SPI
 800b10a:	4a08      	ldr	r2, [pc, #32]	; (800b12c <SPI1_start+0x30>)
 800b10c:	4b07      	ldr	r3, [pc, #28]	; (800b12c <SPI1_start+0x30>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f043 0301 	orr.w	r3, r3, #1
 800b114:	6013      	str	r3, [r2, #0]
	  SPI1->CR1 |= SPI_CR1_CSTART_Msk; // master transfer start
 800b116:	4a05      	ldr	r2, [pc, #20]	; (800b12c <SPI1_start+0x30>)
 800b118:	4b04      	ldr	r3, [pc, #16]	; (800b12c <SPI1_start+0x30>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b120:	6013      	str	r3, [r2, #0]

}
 800b122:	bf00      	nop
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	58020400 	.word	0x58020400
 800b12c:	40013000 	.word	0x40013000

0800b130 <SPI1_transmit>:
void SPI1_transmit(uint16_t data)
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	4603      	mov	r3, r0
 800b138:	80fb      	strh	r3, [r7, #6]
    GPIOB->BSRR = GPIO_PIN_4 << 16; // Reset
 800b13a:	4b0c      	ldr	r3, [pc, #48]	; (800b16c <SPI1_transmit+0x3c>)
 800b13c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b140:	619a      	str	r2, [r3, #24]
    *ptxdr_16bits = data;
 800b142:	4b0b      	ldr	r3, [pc, #44]	; (800b170 <SPI1_transmit+0x40>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	88fa      	ldrh	r2, [r7, #6]
 800b148:	801a      	strh	r2, [r3, #0]
    while( !(SPI1->SR & SPI_SR_TXC_Msk));  // check if FiFo transmission complete
 800b14a:	bf00      	nop
 800b14c:	4b09      	ldr	r3, [pc, #36]	; (800b174 <SPI1_transmit+0x44>)
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b154:	2b00      	cmp	r3, #0
 800b156:	d0f9      	beq.n	800b14c <SPI1_transmit+0x1c>
    GPIOB->BSRR = GPIO_PIN_4; // Set
 800b158:	4b04      	ldr	r3, [pc, #16]	; (800b16c <SPI1_transmit+0x3c>)
 800b15a:	2210      	movs	r2, #16
 800b15c:	619a      	str	r2, [r3, #24]

}
 800b15e:	bf00      	nop
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	58020400 	.word	0x58020400
 800b170:	2400000c 	.word	0x2400000c
 800b174:	40013000 	.word	0x40013000

0800b178 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800b17c:	4b27      	ldr	r3, [pc, #156]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b17e:	4a28      	ldr	r2, [pc, #160]	; (800b220 <MX_SPI1_Init+0xa8>)
 800b180:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800b182:	4b26      	ldr	r3, [pc, #152]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b184:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800b188:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800b18a:	4b24      	ldr	r3, [pc, #144]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b18c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b190:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800b192:	4b22      	ldr	r3, [pc, #136]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b194:	220f      	movs	r2, #15
 800b196:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b198:	4b20      	ldr	r3, [pc, #128]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b19a:	2200      	movs	r2, #0
 800b19c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b19e:	4b1f      	ldr	r3, [pc, #124]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800b1a4:	4b1d      	ldr	r3, [pc, #116]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b1a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b1aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800b1ac:	4b1b      	ldr	r3, [pc, #108]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b1b4:	4b19      	ldr	r3, [pc, #100]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800b1ba:	4b18      	ldr	r3, [pc, #96]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b1bc:	2200      	movs	r2, #0
 800b1be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b1c0:	4b16      	ldr	r3, [pc, #88]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800b1c6:	4b15      	ldr	r3, [pc, #84]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800b1cc:	4b13      	ldr	r3, [pc, #76]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800b1d2:	4b12      	ldr	r3, [pc, #72]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800b1d8:	4b10      	ldr	r3, [pc, #64]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b1de:	4b0f      	ldr	r3, [pc, #60]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b1e4:	4b0d      	ldr	r3, [pc, #52]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800b1ea:	4b0c      	ldr	r3, [pc, #48]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800b1f0:	4b0a      	ldr	r3, [pc, #40]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800b1f6:	4b09      	ldr	r3, [pc, #36]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800b1fc:	4b07      	ldr	r3, [pc, #28]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b1fe:	2200      	movs	r2, #0
 800b200:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800b202:	4b06      	ldr	r3, [pc, #24]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b204:	2200      	movs	r2, #0
 800b206:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800b208:	4804      	ldr	r0, [pc, #16]	; (800b21c <MX_SPI1_Init+0xa4>)
 800b20a:	f7fc fa43 	bl	8007694 <HAL_SPI_Init>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d001      	beq.n	800b218 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800b214:	f7ff fd6e 	bl	800acf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800b218:	bf00      	nop
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	24000458 	.word	0x24000458
 800b220:	40013000 	.word	0x40013000

0800b224 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800b228:	4b28      	ldr	r3, [pc, #160]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b22a:	4a29      	ldr	r2, [pc, #164]	; (800b2d0 <MX_SPI4_Init+0xac>)
 800b22c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800b22e:	4b27      	ldr	r3, [pc, #156]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b230:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800b234:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800b236:	4b25      	ldr	r3, [pc, #148]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b238:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b23c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800b23e:	4b23      	ldr	r3, [pc, #140]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b240:	2203      	movs	r2, #3
 800b242:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800b244:	4b21      	ldr	r3, [pc, #132]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b246:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b24a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b24c:	4b1f      	ldr	r3, [pc, #124]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b24e:	2200      	movs	r2, #0
 800b250:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800b252:	4b1e      	ldr	r3, [pc, #120]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b254:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b258:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b25a:	4b1c      	ldr	r3, [pc, #112]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b260:	4b1a      	ldr	r3, [pc, #104]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b262:	2200      	movs	r2, #0
 800b264:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800b266:	4b19      	ldr	r3, [pc, #100]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b268:	2200      	movs	r2, #0
 800b26a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b26c:	4b17      	ldr	r3, [pc, #92]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b26e:	2200      	movs	r2, #0
 800b270:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800b272:	4b16      	ldr	r3, [pc, #88]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b274:	2200      	movs	r2, #0
 800b276:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800b278:	4b14      	ldr	r3, [pc, #80]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b27a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b27e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800b280:	4b12      	ldr	r3, [pc, #72]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b282:	2200      	movs	r2, #0
 800b284:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800b286:	4b11      	ldr	r3, [pc, #68]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b288:	2200      	movs	r2, #0
 800b28a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b28c:	4b0f      	ldr	r3, [pc, #60]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b28e:	2200      	movs	r2, #0
 800b290:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800b292:	4b0e      	ldr	r3, [pc, #56]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b294:	2200      	movs	r2, #0
 800b296:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800b298:	4b0c      	ldr	r3, [pc, #48]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b29a:	2200      	movs	r2, #0
 800b29c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800b29e:	4b0b      	ldr	r3, [pc, #44]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800b2a4:	4b09      	ldr	r3, [pc, #36]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800b2aa:	4b08      	ldr	r3, [pc, #32]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800b2b0:	4b06      	ldr	r3, [pc, #24]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800b2b6:	4805      	ldr	r0, [pc, #20]	; (800b2cc <MX_SPI4_Init+0xa8>)
 800b2b8:	f7fc f9ec 	bl	8007694 <HAL_SPI_Init>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d001      	beq.n	800b2c6 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 800b2c2:	f7ff fd17 	bl	800acf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800b2c6:	bf00      	nop
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	240003d0 	.word	0x240003d0
 800b2d0:	40013400 	.word	0x40013400

0800b2d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b0ba      	sub	sp, #232	; 0xe8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	601a      	str	r2, [r3, #0]
 800b2e4:	605a      	str	r2, [r3, #4]
 800b2e6:	609a      	str	r2, [r3, #8]
 800b2e8:	60da      	str	r2, [r3, #12]
 800b2ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b2ec:	f107 0318 	add.w	r3, r7, #24
 800b2f0:	22bc      	movs	r2, #188	; 0xbc
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f000 fbd1 	bl	800ba9c <memset>
  if(spiHandle->Instance==SPI1)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a41      	ldr	r2, [pc, #260]	; (800b404 <HAL_SPI_MspInit+0x130>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d133      	bne.n	800b36c <HAL_SPI_MspInit+0x98>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b304:	4a40      	ldr	r2, [pc, #256]	; (800b408 <HAL_SPI_MspInit+0x134>)
 800b306:	4b40      	ldr	r3, [pc, #256]	; (800b408 <HAL_SPI_MspInit+0x134>)
 800b308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b30c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b310:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800b314:	4b3c      	ldr	r3, [pc, #240]	; (800b408 <HAL_SPI_MspInit+0x134>)
 800b316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b31a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b31e:	617b      	str	r3, [r7, #20]
 800b320:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b322:	4a39      	ldr	r2, [pc, #228]	; (800b408 <HAL_SPI_MspInit+0x134>)
 800b324:	4b38      	ldr	r3, [pc, #224]	; (800b408 <HAL_SPI_MspInit+0x134>)
 800b326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b32a:	f043 0302 	orr.w	r3, r3, #2
 800b32e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b332:	4b35      	ldr	r3, [pc, #212]	; (800b408 <HAL_SPI_MspInit+0x134>)
 800b334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b338:	f003 0302 	and.w	r3, r3, #2
 800b33c:	613b      	str	r3, [r7, #16]
 800b33e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800b340:	2328      	movs	r3, #40	; 0x28
 800b342:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b346:	2302      	movs	r3, #2
 800b348:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b34c:	2300      	movs	r3, #0
 800b34e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b352:	2303      	movs	r3, #3
 800b354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b358:	2305      	movs	r3, #5
 800b35a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b35e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800b362:	4619      	mov	r1, r3
 800b364:	4829      	ldr	r0, [pc, #164]	; (800b40c <HAL_SPI_MspInit+0x138>)
 800b366:	f7f8 ff11 	bl	800418c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800b36a:	e047      	b.n	800b3fc <HAL_SPI_MspInit+0x128>
  else if(spiHandle->Instance==SPI4)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a27      	ldr	r2, [pc, #156]	; (800b410 <HAL_SPI_MspInit+0x13c>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d142      	bne.n	800b3fc <HAL_SPI_MspInit+0x128>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800b376:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b37a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800b37c:	2300      	movs	r3, #0
 800b37e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b380:	f107 0318 	add.w	r3, r7, #24
 800b384:	4618      	mov	r0, r3
 800b386:	f7fa f8b3 	bl	80054f0 <HAL_RCCEx_PeriphCLKConfig>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d001      	beq.n	800b394 <HAL_SPI_MspInit+0xc0>
      Error_Handler();
 800b390:	f7ff fcb0 	bl	800acf4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800b394:	4a1c      	ldr	r2, [pc, #112]	; (800b408 <HAL_SPI_MspInit+0x134>)
 800b396:	4b1c      	ldr	r3, [pc, #112]	; (800b408 <HAL_SPI_MspInit+0x134>)
 800b398:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b39c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b3a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800b3a4:	4b18      	ldr	r3, [pc, #96]	; (800b408 <HAL_SPI_MspInit+0x134>)
 800b3a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b3aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b3b2:	4a15      	ldr	r2, [pc, #84]	; (800b408 <HAL_SPI_MspInit+0x134>)
 800b3b4:	4b14      	ldr	r3, [pc, #80]	; (800b408 <HAL_SPI_MspInit+0x134>)
 800b3b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3ba:	f043 0310 	orr.w	r3, r3, #16
 800b3be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b3c2:	4b11      	ldr	r3, [pc, #68]	; (800b408 <HAL_SPI_MspInit+0x134>)
 800b3c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3c8:	f003 0310 	and.w	r3, r3, #16
 800b3cc:	60bb      	str	r3, [r7, #8]
 800b3ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800b3d0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800b3d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3d8:	2302      	movs	r3, #2
 800b3da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800b3ea:	2305      	movs	r3, #5
 800b3ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b3f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4807      	ldr	r0, [pc, #28]	; (800b414 <HAL_SPI_MspInit+0x140>)
 800b3f8:	f7f8 fec8 	bl	800418c <HAL_GPIO_Init>
}
 800b3fc:	bf00      	nop
 800b3fe:	37e8      	adds	r7, #232	; 0xe8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	40013000 	.word	0x40013000
 800b408:	58024400 	.word	0x58024400
 800b40c:	58020400 	.word	0x58020400
 800b410:	40013400 	.word	0x40013400
 800b414:	58021000 	.word	0x58021000

0800b418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b41e:	4a0a      	ldr	r2, [pc, #40]	; (800b448 <HAL_MspInit+0x30>)
 800b420:	4b09      	ldr	r3, [pc, #36]	; (800b448 <HAL_MspInit+0x30>)
 800b422:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b426:	f043 0302 	orr.w	r3, r3, #2
 800b42a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b42e:	4b06      	ldr	r3, [pc, #24]	; (800b448 <HAL_MspInit+0x30>)
 800b430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b434:	f003 0302 	and.w	r3, r3, #2
 800b438:	607b      	str	r3, [r7, #4]
 800b43a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr
 800b448:	58024400 	.word	0x58024400

0800b44c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b44c:	b480      	push	{r7}
 800b44e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b450:	e7fe      	b.n	800b450 <NMI_Handler+0x4>

0800b452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b452:	b480      	push	{r7}
 800b454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b456:	e7fe      	b.n	800b456 <HardFault_Handler+0x4>

0800b458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b458:	b480      	push	{r7}
 800b45a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b45c:	e7fe      	b.n	800b45c <MemManage_Handler+0x4>

0800b45e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b45e:	b480      	push	{r7}
 800b460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b462:	e7fe      	b.n	800b462 <BusFault_Handler+0x4>

0800b464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b464:	b480      	push	{r7}
 800b466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b468:	e7fe      	b.n	800b468 <UsageFault_Handler+0x4>

0800b46a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b46a:	b480      	push	{r7}
 800b46c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b46e:	bf00      	nop
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b478:	b480      	push	{r7}
 800b47a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b47c:	bf00      	nop
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr

0800b486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b486:	b480      	push	{r7}
 800b488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b48a:	bf00      	nop
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b498:	f7f5 f918 	bl	80006cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b49c:	bf00      	nop
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800b4a4:	4802      	ldr	r0, [pc, #8]	; (800b4b0 <DMA1_Stream0_IRQHandler+0x10>)
 800b4a6:	f7f7 fd0b 	bl	8002ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800b4aa:	bf00      	nop
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	240002cc 	.word	0x240002cc

0800b4b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800b4b8:	4802      	ldr	r0, [pc, #8]	; (800b4c4 <DMA1_Stream1_IRQHandler+0x10>)
 800b4ba:	f7f7 fd01 	bl	8002ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b4be:	bf00      	nop
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	2400052c 	.word	0x2400052c

0800b4c8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800b4cc:	4802      	ldr	r0, [pc, #8]	; (800b4d8 <DMA1_Stream2_IRQHandler+0x10>)
 800b4ce:	f7f7 fcf7 	bl	8002ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800b4d2:	bf00      	nop
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	24000634 	.word	0x24000634

0800b4dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b4e0:	4802      	ldr	r0, [pc, #8]	; (800b4ec <TIM2_IRQHandler+0x10>)
 800b4e2:	f7fc fb1a 	bl	8007b1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b4e6:	bf00      	nop
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	240004e0 	.word	0x240004e0

0800b4f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800b4f4:	4802      	ldr	r0, [pc, #8]	; (800b500 <USART3_IRQHandler+0x10>)
 800b4f6:	f7fd fb33 	bl	8008b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800b4fa:	bf00      	nop
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	240005a4 	.word	0x240005a4

0800b504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b504:	b480      	push	{r7}
 800b506:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b508:	4a39      	ldr	r2, [pc, #228]	; (800b5f0 <SystemInit+0xec>)
 800b50a:	4b39      	ldr	r3, [pc, #228]	; (800b5f0 <SystemInit+0xec>)
 800b50c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b518:	4b36      	ldr	r3, [pc, #216]	; (800b5f4 <SystemInit+0xf0>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f003 030f 	and.w	r3, r3, #15
 800b520:	2b06      	cmp	r3, #6
 800b522:	d807      	bhi.n	800b534 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b524:	4a33      	ldr	r2, [pc, #204]	; (800b5f4 <SystemInit+0xf0>)
 800b526:	4b33      	ldr	r3, [pc, #204]	; (800b5f4 <SystemInit+0xf0>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f023 030f 	bic.w	r3, r3, #15
 800b52e:	f043 0307 	orr.w	r3, r3, #7
 800b532:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b534:	4a30      	ldr	r2, [pc, #192]	; (800b5f8 <SystemInit+0xf4>)
 800b536:	4b30      	ldr	r3, [pc, #192]	; (800b5f8 <SystemInit+0xf4>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f043 0301 	orr.w	r3, r3, #1
 800b53e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b540:	4b2d      	ldr	r3, [pc, #180]	; (800b5f8 <SystemInit+0xf4>)
 800b542:	2200      	movs	r2, #0
 800b544:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b546:	492c      	ldr	r1, [pc, #176]	; (800b5f8 <SystemInit+0xf4>)
 800b548:	4b2b      	ldr	r3, [pc, #172]	; (800b5f8 <SystemInit+0xf4>)
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	4b2b      	ldr	r3, [pc, #172]	; (800b5fc <SystemInit+0xf8>)
 800b54e:	4013      	ands	r3, r2
 800b550:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800b552:	4b28      	ldr	r3, [pc, #160]	; (800b5f4 <SystemInit+0xf0>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f003 030f 	and.w	r3, r3, #15
 800b55a:	2b07      	cmp	r3, #7
 800b55c:	d907      	bls.n	800b56e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800b55e:	4a25      	ldr	r2, [pc, #148]	; (800b5f4 <SystemInit+0xf0>)
 800b560:	4b24      	ldr	r3, [pc, #144]	; (800b5f4 <SystemInit+0xf0>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f023 030f 	bic.w	r3, r3, #15
 800b568:	f043 0307 	orr.w	r3, r3, #7
 800b56c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800b56e:	4b22      	ldr	r3, [pc, #136]	; (800b5f8 <SystemInit+0xf4>)
 800b570:	2200      	movs	r2, #0
 800b572:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800b574:	4b20      	ldr	r3, [pc, #128]	; (800b5f8 <SystemInit+0xf4>)
 800b576:	2200      	movs	r2, #0
 800b578:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800b57a:	4b1f      	ldr	r3, [pc, #124]	; (800b5f8 <SystemInit+0xf4>)
 800b57c:	2200      	movs	r2, #0
 800b57e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800b580:	4b1d      	ldr	r3, [pc, #116]	; (800b5f8 <SystemInit+0xf4>)
 800b582:	4a1f      	ldr	r2, [pc, #124]	; (800b600 <SystemInit+0xfc>)
 800b584:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800b586:	4b1c      	ldr	r3, [pc, #112]	; (800b5f8 <SystemInit+0xf4>)
 800b588:	4a1e      	ldr	r2, [pc, #120]	; (800b604 <SystemInit+0x100>)
 800b58a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800b58c:	4b1a      	ldr	r3, [pc, #104]	; (800b5f8 <SystemInit+0xf4>)
 800b58e:	4a1e      	ldr	r2, [pc, #120]	; (800b608 <SystemInit+0x104>)
 800b590:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b592:	4b19      	ldr	r3, [pc, #100]	; (800b5f8 <SystemInit+0xf4>)
 800b594:	2200      	movs	r2, #0
 800b596:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800b598:	4b17      	ldr	r3, [pc, #92]	; (800b5f8 <SystemInit+0xf4>)
 800b59a:	4a1b      	ldr	r2, [pc, #108]	; (800b608 <SystemInit+0x104>)
 800b59c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b59e:	4b16      	ldr	r3, [pc, #88]	; (800b5f8 <SystemInit+0xf4>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800b5a4:	4b14      	ldr	r3, [pc, #80]	; (800b5f8 <SystemInit+0xf4>)
 800b5a6:	4a18      	ldr	r2, [pc, #96]	; (800b608 <SystemInit+0x104>)
 800b5a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b5aa:	4b13      	ldr	r3, [pc, #76]	; (800b5f8 <SystemInit+0xf4>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b5b0:	4a11      	ldr	r2, [pc, #68]	; (800b5f8 <SystemInit+0xf4>)
 800b5b2:	4b11      	ldr	r3, [pc, #68]	; (800b5f8 <SystemInit+0xf4>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b5ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b5bc:	4b0e      	ldr	r3, [pc, #56]	; (800b5f8 <SystemInit+0xf4>)
 800b5be:	2200      	movs	r2, #0
 800b5c0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b5c2:	4b12      	ldr	r3, [pc, #72]	; (800b60c <SystemInit+0x108>)
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	4b12      	ldr	r3, [pc, #72]	; (800b610 <SystemInit+0x10c>)
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5ce:	d202      	bcs.n	800b5d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800b5d0:	4b10      	ldr	r3, [pc, #64]	; (800b614 <SystemInit+0x110>)
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800b5d6:	4b10      	ldr	r3, [pc, #64]	; (800b618 <SystemInit+0x114>)
 800b5d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800b5dc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b5de:	4b04      	ldr	r3, [pc, #16]	; (800b5f0 <SystemInit+0xec>)
 800b5e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b5e4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800b5e6:	bf00      	nop
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	e000ed00 	.word	0xe000ed00
 800b5f4:	52002000 	.word	0x52002000
 800b5f8:	58024400 	.word	0x58024400
 800b5fc:	eaf6ed7f 	.word	0xeaf6ed7f
 800b600:	02020200 	.word	0x02020200
 800b604:	01ff0000 	.word	0x01ff0000
 800b608:	01010280 	.word	0x01010280
 800b60c:	5c001000 	.word	0x5c001000
 800b610:	ffff0000 	.word	0xffff0000
 800b614:	51008108 	.word	0x51008108
 800b618:	52004000 	.word	0x52004000

0800b61c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b08e      	sub	sp, #56	; 0x38
 800b620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b626:	2200      	movs	r2, #0
 800b628:	601a      	str	r2, [r3, #0]
 800b62a:	605a      	str	r2, [r3, #4]
 800b62c:	609a      	str	r2, [r3, #8]
 800b62e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b630:	f107 031c 	add.w	r3, r7, #28
 800b634:	2200      	movs	r2, #0
 800b636:	601a      	str	r2, [r3, #0]
 800b638:	605a      	str	r2, [r3, #4]
 800b63a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b63c:	463b      	mov	r3, r7
 800b63e:	2200      	movs	r2, #0
 800b640:	601a      	str	r2, [r3, #0]
 800b642:	605a      	str	r2, [r3, #4]
 800b644:	609a      	str	r2, [r3, #8]
 800b646:	60da      	str	r2, [r3, #12]
 800b648:	611a      	str	r2, [r3, #16]
 800b64a:	615a      	str	r2, [r3, #20]
 800b64c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b64e:	4b2d      	ldr	r3, [pc, #180]	; (800b704 <MX_TIM2_Init+0xe8>)
 800b650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b654:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800b656:	4b2b      	ldr	r3, [pc, #172]	; (800b704 <MX_TIM2_Init+0xe8>)
 800b658:	2200      	movs	r2, #0
 800b65a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b65c:	4b29      	ldr	r3, [pc, #164]	; (800b704 <MX_TIM2_Init+0xe8>)
 800b65e:	2200      	movs	r2, #0
 800b660:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800b662:	4b28      	ldr	r3, [pc, #160]	; (800b704 <MX_TIM2_Init+0xe8>)
 800b664:	f04f 32ff 	mov.w	r2, #4294967295
 800b668:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b66a:	4b26      	ldr	r3, [pc, #152]	; (800b704 <MX_TIM2_Init+0xe8>)
 800b66c:	2200      	movs	r2, #0
 800b66e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b670:	4b24      	ldr	r3, [pc, #144]	; (800b704 <MX_TIM2_Init+0xe8>)
 800b672:	2200      	movs	r2, #0
 800b674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b676:	4823      	ldr	r0, [pc, #140]	; (800b704 <MX_TIM2_Init+0xe8>)
 800b678:	f7fc f927 	bl	80078ca <HAL_TIM_Base_Init>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800b682:	f7ff fb37 	bl	800acf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b68a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b68c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b690:	4619      	mov	r1, r3
 800b692:	481c      	ldr	r0, [pc, #112]	; (800b704 <MX_TIM2_Init+0xe8>)
 800b694:	f7fc fc70 	bl	8007f78 <HAL_TIM_ConfigClockSource>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d001      	beq.n	800b6a2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800b69e:	f7ff fb29 	bl	800acf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800b6a2:	4818      	ldr	r0, [pc, #96]	; (800b704 <MX_TIM2_Init+0xe8>)
 800b6a4:	f7fc f9d8 	bl	8007a58 <HAL_TIM_PWM_Init>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d001      	beq.n	800b6b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800b6ae:	f7ff fb21 	bl	800acf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800b6b2:	2320      	movs	r3, #32
 800b6b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b6ba:	f107 031c 	add.w	r3, r7, #28
 800b6be:	4619      	mov	r1, r3
 800b6c0:	4810      	ldr	r0, [pc, #64]	; (800b704 <MX_TIM2_Init+0xe8>)
 800b6c2:	f7fd f957 	bl	8008974 <HAL_TIMEx_MasterConfigSynchronization>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800b6cc:	f7ff fb12 	bl	800acf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b6d0:	2360      	movs	r3, #96	; 0x60
 800b6d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2;
 800b6d4:	2302      	movs	r3, #2
 800b6d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b6e0:	463b      	mov	r3, r7
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	4807      	ldr	r0, [pc, #28]	; (800b704 <MX_TIM2_Init+0xe8>)
 800b6e8:	f7fc fb36 	bl	8007d58 <HAL_TIM_PWM_ConfigChannel>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d001      	beq.n	800b6f6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800b6f2:	f7ff faff 	bl	800acf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800b6f6:	4803      	ldr	r0, [pc, #12]	; (800b704 <MX_TIM2_Init+0xe8>)
 800b6f8:	f000 f82c 	bl	800b754 <HAL_TIM_MspPostInit>

}
 800b6fc:	bf00      	nop
 800b6fe:	3738      	adds	r7, #56	; 0x38
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	240004e0 	.word	0x240004e0

0800b708 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b718:	d116      	bne.n	800b748 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b71a:	4a0d      	ldr	r2, [pc, #52]	; (800b750 <HAL_TIM_Base_MspInit+0x48>)
 800b71c:	4b0c      	ldr	r3, [pc, #48]	; (800b750 <HAL_TIM_Base_MspInit+0x48>)
 800b71e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b722:	f043 0301 	orr.w	r3, r3, #1
 800b726:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b72a:	4b09      	ldr	r3, [pc, #36]	; (800b750 <HAL_TIM_Base_MspInit+0x48>)
 800b72c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b730:	f003 0301 	and.w	r3, r3, #1
 800b734:	60fb      	str	r3, [r7, #12]
 800b736:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800b738:	2200      	movs	r2, #0
 800b73a:	2101      	movs	r1, #1
 800b73c:	201c      	movs	r0, #28
 800b73e:	f7f6 f97a 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b742:	201c      	movs	r0, #28
 800b744:	f7f6 f991 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800b748:	bf00      	nop
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	58024400 	.word	0x58024400

0800b754 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b088      	sub	sp, #32
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b75c:	f107 030c 	add.w	r3, r7, #12
 800b760:	2200      	movs	r2, #0
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	605a      	str	r2, [r3, #4]
 800b766:	609a      	str	r2, [r3, #8]
 800b768:	60da      	str	r2, [r3, #12]
 800b76a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b774:	d11e      	bne.n	800b7b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b776:	4a11      	ldr	r2, [pc, #68]	; (800b7bc <HAL_TIM_MspPostInit+0x68>)
 800b778:	4b10      	ldr	r3, [pc, #64]	; (800b7bc <HAL_TIM_MspPostInit+0x68>)
 800b77a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b77e:	f043 0301 	orr.w	r3, r3, #1
 800b782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b786:	4b0d      	ldr	r3, [pc, #52]	; (800b7bc <HAL_TIM_MspPostInit+0x68>)
 800b788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b78c:	f003 0301 	and.w	r3, r3, #1
 800b790:	60bb      	str	r3, [r7, #8]
 800b792:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800b794:	2301      	movs	r3, #1
 800b796:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b798:	2302      	movs	r3, #2
 800b79a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b79c:	2300      	movs	r3, #0
 800b79e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7a8:	f107 030c 	add.w	r3, r7, #12
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	4804      	ldr	r0, [pc, #16]	; (800b7c0 <HAL_TIM_MspPostInit+0x6c>)
 800b7b0:	f7f8 fcec 	bl	800418c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800b7b4:	bf00      	nop
 800b7b6:	3720      	adds	r7, #32
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	58024400 	.word	0x58024400
 800b7c0:	58020000 	.word	0x58020000

0800b7c4 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800b7c8:	4b22      	ldr	r3, [pc, #136]	; (800b854 <MX_USART3_UART_Init+0x90>)
 800b7ca:	4a23      	ldr	r2, [pc, #140]	; (800b858 <MX_USART3_UART_Init+0x94>)
 800b7cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800b7ce:	4b21      	ldr	r3, [pc, #132]	; (800b854 <MX_USART3_UART_Init+0x90>)
 800b7d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800b7d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800b7d6:	4b1f      	ldr	r3, [pc, #124]	; (800b854 <MX_USART3_UART_Init+0x90>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b7dc:	4b1d      	ldr	r3, [pc, #116]	; (800b854 <MX_USART3_UART_Init+0x90>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800b7e2:	4b1c      	ldr	r3, [pc, #112]	; (800b854 <MX_USART3_UART_Init+0x90>)
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b7e8:	4b1a      	ldr	r3, [pc, #104]	; (800b854 <MX_USART3_UART_Init+0x90>)
 800b7ea:	220c      	movs	r2, #12
 800b7ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b7ee:	4b19      	ldr	r3, [pc, #100]	; (800b854 <MX_USART3_UART_Init+0x90>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b7f4:	4b17      	ldr	r3, [pc, #92]	; (800b854 <MX_USART3_UART_Init+0x90>)
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b7fa:	4b16      	ldr	r3, [pc, #88]	; (800b854 <MX_USART3_UART_Init+0x90>)
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b800:	4b14      	ldr	r3, [pc, #80]	; (800b854 <MX_USART3_UART_Init+0x90>)
 800b802:	2200      	movs	r2, #0
 800b804:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b806:	4b13      	ldr	r3, [pc, #76]	; (800b854 <MX_USART3_UART_Init+0x90>)
 800b808:	2200      	movs	r2, #0
 800b80a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b80c:	4811      	ldr	r0, [pc, #68]	; (800b854 <MX_USART3_UART_Init+0x90>)
 800b80e:	f7fd f957 	bl	8008ac0 <HAL_UART_Init>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800b818:	f7ff fa6c 	bl	800acf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b81c:	2100      	movs	r1, #0
 800b81e:	480d      	ldr	r0, [pc, #52]	; (800b854 <MX_USART3_UART_Init+0x90>)
 800b820:	f7fe fc41 	bl	800a0a6 <HAL_UARTEx_SetTxFifoThreshold>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d001      	beq.n	800b82e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800b82a:	f7ff fa63 	bl	800acf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b82e:	2100      	movs	r1, #0
 800b830:	4808      	ldr	r0, [pc, #32]	; (800b854 <MX_USART3_UART_Init+0x90>)
 800b832:	f7fe fc76 	bl	800a122 <HAL_UARTEx_SetRxFifoThreshold>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d001      	beq.n	800b840 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800b83c:	f7ff fa5a 	bl	800acf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800b840:	4804      	ldr	r0, [pc, #16]	; (800b854 <MX_USART3_UART_Init+0x90>)
 800b842:	f7fe fbf7 	bl	800a034 <HAL_UARTEx_DisableFifoMode>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d001      	beq.n	800b850 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800b84c:	f7ff fa52 	bl	800acf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800b850:	bf00      	nop
 800b852:	bd80      	pop	{r7, pc}
 800b854:	240005a4 	.word	0x240005a4
 800b858:	40004800 	.word	0x40004800

0800b85c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b0b8      	sub	sp, #224	; 0xe0
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b864:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b868:	2200      	movs	r2, #0
 800b86a:	601a      	str	r2, [r3, #0]
 800b86c:	605a      	str	r2, [r3, #4]
 800b86e:	609a      	str	r2, [r3, #8]
 800b870:	60da      	str	r2, [r3, #12]
 800b872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b874:	f107 0310 	add.w	r3, r7, #16
 800b878:	22bc      	movs	r2, #188	; 0xbc
 800b87a:	2100      	movs	r1, #0
 800b87c:	4618      	mov	r0, r3
 800b87e:	f000 f90d 	bl	800ba9c <memset>
  if(uartHandle->Instance==USART3)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a57      	ldr	r2, [pc, #348]	; (800b9e4 <HAL_UART_MspInit+0x188>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	f040 80a6 	bne.w	800b9da <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800b88e:	2302      	movs	r3, #2
 800b890:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800b892:	2300      	movs	r3, #0
 800b894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b898:	f107 0310 	add.w	r3, r7, #16
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7f9 fe27 	bl	80054f0 <HAL_RCCEx_PeriphCLKConfig>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d001      	beq.n	800b8ac <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800b8a8:	f7ff fa24 	bl	800acf4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b8ac:	4a4e      	ldr	r2, [pc, #312]	; (800b9e8 <HAL_UART_MspInit+0x18c>)
 800b8ae:	4b4e      	ldr	r3, [pc, #312]	; (800b9e8 <HAL_UART_MspInit+0x18c>)
 800b8b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b8b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b8bc:	4b4a      	ldr	r3, [pc, #296]	; (800b9e8 <HAL_UART_MspInit+0x18c>)
 800b8be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b8c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8c6:	60fb      	str	r3, [r7, #12]
 800b8c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b8ca:	4a47      	ldr	r2, [pc, #284]	; (800b9e8 <HAL_UART_MspInit+0x18c>)
 800b8cc:	4b46      	ldr	r3, [pc, #280]	; (800b9e8 <HAL_UART_MspInit+0x18c>)
 800b8ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b8d2:	f043 0308 	orr.w	r3, r3, #8
 800b8d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b8da:	4b43      	ldr	r3, [pc, #268]	; (800b9e8 <HAL_UART_MspInit+0x18c>)
 800b8dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b8e0:	f003 0308 	and.w	r3, r3, #8
 800b8e4:	60bb      	str	r3, [r7, #8]
 800b8e6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800b8e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b8ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8f0:	2302      	movs	r3, #2
 800b8f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b902:	2307      	movs	r3, #7
 800b904:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b908:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b90c:	4619      	mov	r1, r3
 800b90e:	4837      	ldr	r0, [pc, #220]	; (800b9ec <HAL_UART_MspInit+0x190>)
 800b910:	f7f8 fc3c 	bl	800418c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800b914:	4b36      	ldr	r3, [pc, #216]	; (800b9f0 <HAL_UART_MspInit+0x194>)
 800b916:	4a37      	ldr	r2, [pc, #220]	; (800b9f4 <HAL_UART_MspInit+0x198>)
 800b918:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800b91a:	4b35      	ldr	r3, [pc, #212]	; (800b9f0 <HAL_UART_MspInit+0x194>)
 800b91c:	222d      	movs	r2, #45	; 0x2d
 800b91e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b920:	4b33      	ldr	r3, [pc, #204]	; (800b9f0 <HAL_UART_MspInit+0x194>)
 800b922:	2200      	movs	r2, #0
 800b924:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b926:	4b32      	ldr	r3, [pc, #200]	; (800b9f0 <HAL_UART_MspInit+0x194>)
 800b928:	2200      	movs	r2, #0
 800b92a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b92c:	4b30      	ldr	r3, [pc, #192]	; (800b9f0 <HAL_UART_MspInit+0x194>)
 800b92e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b932:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b934:	4b2e      	ldr	r3, [pc, #184]	; (800b9f0 <HAL_UART_MspInit+0x194>)
 800b936:	2200      	movs	r2, #0
 800b938:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b93a:	4b2d      	ldr	r3, [pc, #180]	; (800b9f0 <HAL_UART_MspInit+0x194>)
 800b93c:	2200      	movs	r2, #0
 800b93e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800b940:	4b2b      	ldr	r3, [pc, #172]	; (800b9f0 <HAL_UART_MspInit+0x194>)
 800b942:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b946:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b948:	4b29      	ldr	r3, [pc, #164]	; (800b9f0 <HAL_UART_MspInit+0x194>)
 800b94a:	2200      	movs	r2, #0
 800b94c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b94e:	4b28      	ldr	r3, [pc, #160]	; (800b9f0 <HAL_UART_MspInit+0x194>)
 800b950:	2200      	movs	r2, #0
 800b952:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800b954:	4826      	ldr	r0, [pc, #152]	; (800b9f0 <HAL_UART_MspInit+0x194>)
 800b956:	f7f6 f9f5 	bl	8001d44 <HAL_DMA_Init>
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d001      	beq.n	800b964 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 800b960:	f7ff f9c8 	bl	800acf4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a22      	ldr	r2, [pc, #136]	; (800b9f0 <HAL_UART_MspInit+0x194>)
 800b968:	67da      	str	r2, [r3, #124]	; 0x7c
 800b96a:	4a21      	ldr	r2, [pc, #132]	; (800b9f0 <HAL_UART_MspInit+0x194>)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800b970:	4b21      	ldr	r3, [pc, #132]	; (800b9f8 <HAL_UART_MspInit+0x19c>)
 800b972:	4a22      	ldr	r2, [pc, #136]	; (800b9fc <HAL_UART_MspInit+0x1a0>)
 800b974:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800b976:	4b20      	ldr	r3, [pc, #128]	; (800b9f8 <HAL_UART_MspInit+0x19c>)
 800b978:	222e      	movs	r2, #46	; 0x2e
 800b97a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b97c:	4b1e      	ldr	r3, [pc, #120]	; (800b9f8 <HAL_UART_MspInit+0x19c>)
 800b97e:	2240      	movs	r2, #64	; 0x40
 800b980:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b982:	4b1d      	ldr	r3, [pc, #116]	; (800b9f8 <HAL_UART_MspInit+0x19c>)
 800b984:	2200      	movs	r2, #0
 800b986:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b988:	4b1b      	ldr	r3, [pc, #108]	; (800b9f8 <HAL_UART_MspInit+0x19c>)
 800b98a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b98e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b990:	4b19      	ldr	r3, [pc, #100]	; (800b9f8 <HAL_UART_MspInit+0x19c>)
 800b992:	2200      	movs	r2, #0
 800b994:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b996:	4b18      	ldr	r3, [pc, #96]	; (800b9f8 <HAL_UART_MspInit+0x19c>)
 800b998:	2200      	movs	r2, #0
 800b99a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800b99c:	4b16      	ldr	r3, [pc, #88]	; (800b9f8 <HAL_UART_MspInit+0x19c>)
 800b99e:	2200      	movs	r2, #0
 800b9a0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b9a2:	4b15      	ldr	r3, [pc, #84]	; (800b9f8 <HAL_UART_MspInit+0x19c>)
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b9a8:	4b13      	ldr	r3, [pc, #76]	; (800b9f8 <HAL_UART_MspInit+0x19c>)
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800b9ae:	4812      	ldr	r0, [pc, #72]	; (800b9f8 <HAL_UART_MspInit+0x19c>)
 800b9b0:	f7f6 f9c8 	bl	8001d44 <HAL_DMA_Init>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800b9ba:	f7ff f99b 	bl	800acf4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4a0d      	ldr	r2, [pc, #52]	; (800b9f8 <HAL_UART_MspInit+0x19c>)
 800b9c2:	679a      	str	r2, [r3, #120]	; 0x78
 800b9c4:	4a0c      	ldr	r2, [pc, #48]	; (800b9f8 <HAL_UART_MspInit+0x19c>)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	2027      	movs	r0, #39	; 0x27
 800b9d0:	f7f6 f831 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800b9d4:	2027      	movs	r0, #39	; 0x27
 800b9d6:	f7f6 f848 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800b9da:	bf00      	nop
 800b9dc:	37e0      	adds	r7, #224	; 0xe0
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	40004800 	.word	0x40004800
 800b9e8:	58024400 	.word	0x58024400
 800b9ec:	58020c00 	.word	0x58020c00
 800b9f0:	2400052c 	.word	0x2400052c
 800b9f4:	40020028 	.word	0x40020028
 800b9f8:	24000634 	.word	0x24000634
 800b9fc:	40020040 	.word	0x40020040

0800ba00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800ba00:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ba38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800ba04:	f7ff fd7e 	bl	800b504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ba08:	480c      	ldr	r0, [pc, #48]	; (800ba3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ba0a:	490d      	ldr	r1, [pc, #52]	; (800ba40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ba0c:	4a0d      	ldr	r2, [pc, #52]	; (800ba44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ba0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ba10:	e002      	b.n	800ba18 <LoopCopyDataInit>

0800ba12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ba12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ba14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ba16:	3304      	adds	r3, #4

0800ba18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ba18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ba1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ba1c:	d3f9      	bcc.n	800ba12 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ba1e:	4a0a      	ldr	r2, [pc, #40]	; (800ba48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ba20:	4c0a      	ldr	r4, [pc, #40]	; (800ba4c <LoopFillZerobss+0x22>)
  movs r3, #0
 800ba22:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ba24:	e001      	b.n	800ba2a <LoopFillZerobss>

0800ba26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ba26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ba28:	3204      	adds	r2, #4

0800ba2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ba2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ba2c:	d3fb      	bcc.n	800ba26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ba2e:	f000 f811 	bl	800ba54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ba32:	f7ff f84d 	bl	800aad0 <main>
  bx  lr
 800ba36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ba38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ba3c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800ba40:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 800ba44:	0800bb14 	.word	0x0800bb14
  ldr r2, =_sbss
 800ba48:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 800ba4c:	240006ac 	.word	0x240006ac

0800ba50 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ba50:	e7fe      	b.n	800ba50 <ADC3_IRQHandler>
	...

0800ba54 <__libc_init_array>:
 800ba54:	b570      	push	{r4, r5, r6, lr}
 800ba56:	4e0d      	ldr	r6, [pc, #52]	; (800ba8c <__libc_init_array+0x38>)
 800ba58:	4c0d      	ldr	r4, [pc, #52]	; (800ba90 <__libc_init_array+0x3c>)
 800ba5a:	1ba4      	subs	r4, r4, r6
 800ba5c:	10a4      	asrs	r4, r4, #2
 800ba5e:	2500      	movs	r5, #0
 800ba60:	42a5      	cmp	r5, r4
 800ba62:	d109      	bne.n	800ba78 <__libc_init_array+0x24>
 800ba64:	4e0b      	ldr	r6, [pc, #44]	; (800ba94 <__libc_init_array+0x40>)
 800ba66:	4c0c      	ldr	r4, [pc, #48]	; (800ba98 <__libc_init_array+0x44>)
 800ba68:	f000 f820 	bl	800baac <_init>
 800ba6c:	1ba4      	subs	r4, r4, r6
 800ba6e:	10a4      	asrs	r4, r4, #2
 800ba70:	2500      	movs	r5, #0
 800ba72:	42a5      	cmp	r5, r4
 800ba74:	d105      	bne.n	800ba82 <__libc_init_array+0x2e>
 800ba76:	bd70      	pop	{r4, r5, r6, pc}
 800ba78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba7c:	4798      	blx	r3
 800ba7e:	3501      	adds	r5, #1
 800ba80:	e7ee      	b.n	800ba60 <__libc_init_array+0xc>
 800ba82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba86:	4798      	blx	r3
 800ba88:	3501      	adds	r5, #1
 800ba8a:	e7f2      	b.n	800ba72 <__libc_init_array+0x1e>
 800ba8c:	0800bb0c 	.word	0x0800bb0c
 800ba90:	0800bb0c 	.word	0x0800bb0c
 800ba94:	0800bb0c 	.word	0x0800bb0c
 800ba98:	0800bb10 	.word	0x0800bb10

0800ba9c <memset>:
 800ba9c:	4402      	add	r2, r0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d100      	bne.n	800baa6 <memset+0xa>
 800baa4:	4770      	bx	lr
 800baa6:	f803 1b01 	strb.w	r1, [r3], #1
 800baaa:	e7f9      	b.n	800baa0 <memset+0x4>

0800baac <_init>:
 800baac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baae:	bf00      	nop
 800bab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bab2:	bc08      	pop	{r3}
 800bab4:	469e      	mov	lr, r3
 800bab6:	4770      	bx	lr

0800bab8 <_fini>:
 800bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baba:	bf00      	nop
 800babc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800babe:	bc08      	pop	{r3}
 800bac0:	469e      	mov	lr, r3
 800bac2:	4770      	bx	lr
