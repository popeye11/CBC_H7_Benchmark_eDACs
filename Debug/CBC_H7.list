
CBC_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c458  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c6f0  0800c6f0  0001c6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c730  0800c730  0001c730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c738  0800c738  0001c738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c73c  0800c73c  0001c73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800c740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000068c  24000018  0800c754  00020018  2**3
                  ALLOC
  8 ._user_heap_stack 00003400  240006a4  0800c754  000206a4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e7b2  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004240  00000000  00000000  0004e7f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000017e0  00000000  00000000  00052a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001668  00000000  00000000  00054218  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f65a  00000000  00000000  00055880  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000085d9  00000000  00000000  00064eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006d4b3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006590  00000000  00000000  0006d530  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c6d8 	.word	0x0800c6d8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	0800c6d8 	.word	0x0800c6d8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b97a 	b.w	80005e4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	468c      	mov	ip, r1
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	9e08      	ldr	r6, [sp, #32]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d151      	bne.n	80003bc <__udivmoddi4+0xb4>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d96d      	bls.n	80003fa <__udivmoddi4+0xf2>
 800031e:	fab2 fe82 	clz	lr, r2
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d00b      	beq.n	8000340 <__udivmoddi4+0x38>
 8000328:	f1ce 0c20 	rsb	ip, lr, #32
 800032c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000330:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000334:	fa02 f70e 	lsl.w	r7, r2, lr
 8000338:	ea4c 0c05 	orr.w	ip, ip, r5
 800033c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000340:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000344:	0c25      	lsrs	r5, r4, #16
 8000346:	fbbc f8fa 	udiv	r8, ip, sl
 800034a:	fa1f f987 	uxth.w	r9, r7
 800034e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000352:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000356:	fb08 f309 	mul.w	r3, r8, r9
 800035a:	42ab      	cmp	r3, r5
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x6c>
 800035e:	19ed      	adds	r5, r5, r7
 8000360:	f108 32ff 	add.w	r2, r8, #4294967295
 8000364:	f080 8123 	bcs.w	80005ae <__udivmoddi4+0x2a6>
 8000368:	42ab      	cmp	r3, r5
 800036a:	f240 8120 	bls.w	80005ae <__udivmoddi4+0x2a6>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	443d      	add	r5, r7
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb5 f0fa 	udiv	r0, r5, sl
 800037c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb00 f909 	mul.w	r9, r0, r9
 8000388:	45a1      	cmp	r9, r4
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x98>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	f080 810a 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8107 	bls.w	80005aa <__udivmoddi4+0x2a2>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 0409 	sub.w	r4, r4, r9
 80003a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a8:	2100      	movs	r1, #0
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d061      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80003b2:	2300      	movs	r3, #0
 80003b4:	6034      	str	r4, [r6, #0]
 80003b6:	6073      	str	r3, [r6, #4]
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0xc8>
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d054      	beq.n	800046e <__udivmoddi4+0x166>
 80003c4:	2100      	movs	r1, #0
 80003c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80003ca:	4608      	mov	r0, r1
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	fab3 f183 	clz	r1, r3
 80003d4:	2900      	cmp	r1, #0
 80003d6:	f040 808e 	bne.w	80004f6 <__udivmoddi4+0x1ee>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xdc>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80fa 	bhi.w	80005d8 <__udivmoddi4+0x2d0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb65 0503 	sbc.w	r5, r5, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	46ac      	mov	ip, r5
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d03f      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	b912      	cbnz	r2, 8000402 <__udivmoddi4+0xfa>
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000402:	fab7 fe87 	clz	lr, r7
 8000406:	f1be 0f00 	cmp.w	lr, #0
 800040a:	d134      	bne.n	8000476 <__udivmoddi4+0x16e>
 800040c:	1beb      	subs	r3, r5, r7
 800040e:	0c3a      	lsrs	r2, r7, #16
 8000410:	fa1f fc87 	uxth.w	ip, r7
 8000414:	2101      	movs	r1, #1
 8000416:	fbb3 f8f2 	udiv	r8, r3, r2
 800041a:	0c25      	lsrs	r5, r4, #16
 800041c:	fb02 3318 	mls	r3, r2, r8, r3
 8000420:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000424:	fb0c f308 	mul.w	r3, ip, r8
 8000428:	42ab      	cmp	r3, r5
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x134>
 800042c:	19ed      	adds	r5, r5, r7
 800042e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x132>
 8000434:	42ab      	cmp	r3, r5
 8000436:	f200 80d1 	bhi.w	80005dc <__udivmoddi4+0x2d4>
 800043a:	4680      	mov	r8, r0
 800043c:	1aed      	subs	r5, r5, r3
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb5 f0f2 	udiv	r0, r5, r2
 8000444:	fb02 5510 	mls	r5, r2, r0, r5
 8000448:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800044c:	fb0c fc00 	mul.w	ip, ip, r0
 8000450:	45a4      	cmp	ip, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x15c>
 8000454:	19e4      	adds	r4, r4, r7
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x15a>
 800045c:	45a4      	cmp	ip, r4
 800045e:	f200 80b8 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 040c 	sub.w	r4, r4, ip
 8000468:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800046c:	e79d      	b.n	80003aa <__udivmoddi4+0xa2>
 800046e:	4631      	mov	r1, r6
 8000470:	4630      	mov	r0, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	f1ce 0420 	rsb	r4, lr, #32
 800047a:	fa05 f30e 	lsl.w	r3, r5, lr
 800047e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000482:	fa20 f804 	lsr.w	r8, r0, r4
 8000486:	0c3a      	lsrs	r2, r7, #16
 8000488:	fa25 f404 	lsr.w	r4, r5, r4
 800048c:	ea48 0803 	orr.w	r8, r8, r3
 8000490:	fbb4 f1f2 	udiv	r1, r4, r2
 8000494:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000498:	fb02 4411 	mls	r4, r2, r1, r4
 800049c:	fa1f fc87 	uxth.w	ip, r7
 80004a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004a4:	fb01 f30c 	mul.w	r3, r1, ip
 80004a8:	42ab      	cmp	r3, r5
 80004aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80004ae:	d909      	bls.n	80004c4 <__udivmoddi4+0x1bc>
 80004b0:	19ed      	adds	r5, r5, r7
 80004b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80004b6:	f080 808a 	bcs.w	80005ce <__udivmoddi4+0x2c6>
 80004ba:	42ab      	cmp	r3, r5
 80004bc:	f240 8087 	bls.w	80005ce <__udivmoddi4+0x2c6>
 80004c0:	3902      	subs	r1, #2
 80004c2:	443d      	add	r5, r7
 80004c4:	1aeb      	subs	r3, r5, r3
 80004c6:	fa1f f588 	uxth.w	r5, r8
 80004ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80004ce:	fb02 3310 	mls	r3, r2, r0, r3
 80004d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d6:	fb00 f30c 	mul.w	r3, r0, ip
 80004da:	42ab      	cmp	r3, r5
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1e6>
 80004de:	19ed      	adds	r5, r5, r7
 80004e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e4:	d26f      	bcs.n	80005c6 <__udivmoddi4+0x2be>
 80004e6:	42ab      	cmp	r3, r5
 80004e8:	d96d      	bls.n	80005c6 <__udivmoddi4+0x2be>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443d      	add	r5, r7
 80004ee:	1aeb      	subs	r3, r5, r3
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	e78f      	b.n	8000416 <__udivmoddi4+0x10e>
 80004f6:	f1c1 0720 	rsb	r7, r1, #32
 80004fa:	fa22 f807 	lsr.w	r8, r2, r7
 80004fe:	408b      	lsls	r3, r1
 8000500:	fa05 f401 	lsl.w	r4, r5, r1
 8000504:	ea48 0303 	orr.w	r3, r8, r3
 8000508:	fa20 fe07 	lsr.w	lr, r0, r7
 800050c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000510:	40fd      	lsrs	r5, r7
 8000512:	ea4e 0e04 	orr.w	lr, lr, r4
 8000516:	fbb5 f9fc 	udiv	r9, r5, ip
 800051a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800051e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000522:	fa1f f883 	uxth.w	r8, r3
 8000526:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800052a:	fb09 f408 	mul.w	r4, r9, r8
 800052e:	42ac      	cmp	r4, r5
 8000530:	fa02 f201 	lsl.w	r2, r2, r1
 8000534:	fa00 fa01 	lsl.w	sl, r0, r1
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x244>
 800053a:	18ed      	adds	r5, r5, r3
 800053c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000540:	d243      	bcs.n	80005ca <__udivmoddi4+0x2c2>
 8000542:	42ac      	cmp	r4, r5
 8000544:	d941      	bls.n	80005ca <__udivmoddi4+0x2c2>
 8000546:	f1a9 0902 	sub.w	r9, r9, #2
 800054a:	441d      	add	r5, r3
 800054c:	1b2d      	subs	r5, r5, r4
 800054e:	fa1f fe8e 	uxth.w	lr, lr
 8000552:	fbb5 f0fc 	udiv	r0, r5, ip
 8000556:	fb0c 5510 	mls	r5, ip, r0, r5
 800055a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800055e:	fb00 f808 	mul.w	r8, r0, r8
 8000562:	45a0      	cmp	r8, r4
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x26e>
 8000566:	18e4      	adds	r4, r4, r3
 8000568:	f100 35ff 	add.w	r5, r0, #4294967295
 800056c:	d229      	bcs.n	80005c2 <__udivmoddi4+0x2ba>
 800056e:	45a0      	cmp	r8, r4
 8000570:	d927      	bls.n	80005c2 <__udivmoddi4+0x2ba>
 8000572:	3802      	subs	r0, #2
 8000574:	441c      	add	r4, r3
 8000576:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800057a:	eba4 0408 	sub.w	r4, r4, r8
 800057e:	fba0 8902 	umull	r8, r9, r0, r2
 8000582:	454c      	cmp	r4, r9
 8000584:	46c6      	mov	lr, r8
 8000586:	464d      	mov	r5, r9
 8000588:	d315      	bcc.n	80005b6 <__udivmoddi4+0x2ae>
 800058a:	d012      	beq.n	80005b2 <__udivmoddi4+0x2aa>
 800058c:	b156      	cbz	r6, 80005a4 <__udivmoddi4+0x29c>
 800058e:	ebba 030e 	subs.w	r3, sl, lr
 8000592:	eb64 0405 	sbc.w	r4, r4, r5
 8000596:	fa04 f707 	lsl.w	r7, r4, r7
 800059a:	40cb      	lsrs	r3, r1
 800059c:	431f      	orrs	r7, r3
 800059e:	40cc      	lsrs	r4, r1
 80005a0:	6037      	str	r7, [r6, #0]
 80005a2:	6074      	str	r4, [r6, #4]
 80005a4:	2100      	movs	r1, #0
 80005a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005aa:	4618      	mov	r0, r3
 80005ac:	e6f8      	b.n	80003a0 <__udivmoddi4+0x98>
 80005ae:	4690      	mov	r8, r2
 80005b0:	e6e0      	b.n	8000374 <__udivmoddi4+0x6c>
 80005b2:	45c2      	cmp	sl, r8
 80005b4:	d2ea      	bcs.n	800058c <__udivmoddi4+0x284>
 80005b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80005ba:	eb69 0503 	sbc.w	r5, r9, r3
 80005be:	3801      	subs	r0, #1
 80005c0:	e7e4      	b.n	800058c <__udivmoddi4+0x284>
 80005c2:	4628      	mov	r0, r5
 80005c4:	e7d7      	b.n	8000576 <__udivmoddi4+0x26e>
 80005c6:	4640      	mov	r0, r8
 80005c8:	e791      	b.n	80004ee <__udivmoddi4+0x1e6>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e7be      	b.n	800054c <__udivmoddi4+0x244>
 80005ce:	4601      	mov	r1, r0
 80005d0:	e778      	b.n	80004c4 <__udivmoddi4+0x1bc>
 80005d2:	3802      	subs	r0, #2
 80005d4:	443c      	add	r4, r7
 80005d6:	e745      	b.n	8000464 <__udivmoddi4+0x15c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xe6>
 80005dc:	f1a8 0802 	sub.w	r8, r8, #2
 80005e0:	443d      	add	r5, r7
 80005e2:	e72b      	b.n	800043c <__udivmoddi4+0x134>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ee:	2003      	movs	r0, #3
 80005f0:	f001 fc72 	bl	8001ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005f4:	f005 fc20 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 80005f8:	4601      	mov	r1, r0
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <HAL_Init+0x68>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	4a13      	ldr	r2, [pc, #76]	; (8000654 <HAL_Init+0x6c>)
 8000606:	5cd3      	ldrb	r3, [r2, r3]
 8000608:	f003 031f 	and.w	r3, r3, #31
 800060c:	fa21 f303 	lsr.w	r3, r1, r3
 8000610:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_Init+0x68>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_Init+0x6c>)
 800061c:	5cd3      	ldrb	r3, [r2, r3]
 800061e:	f003 031f 	and.w	r3, r3, #31
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	fa22 f303 	lsr.w	r3, r2, r3
 8000628:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <HAL_Init+0x70>)
 800062a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <HAL_Init+0x74>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000632:	2000      	movs	r0, #0
 8000634:	f000 f814 	bl	8000660 <HAL_InitTick>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	e002      	b.n	8000648 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000642:	f00b fcff 	bl	800c044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	58024400 	.word	0x58024400
 8000654:	0800c720 	.word	0x0800c720
 8000658:	24000010 	.word	0x24000010
 800065c:	2400000c 	.word	0x2400000c

08000660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <HAL_InitTick+0x60>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d101      	bne.n	8000674 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000670:	2301      	movs	r3, #1
 8000672:	e021      	b.n	80006b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <HAL_InitTick+0x64>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <HAL_InitTick+0x60>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4619      	mov	r1, r3
 800067e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000682:	fbb3 f3f1 	udiv	r3, r3, r1
 8000686:	fbb2 f3f3 	udiv	r3, r2, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fc57 	bl	8001f3e <HAL_SYSTICK_Config>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	e00e      	b.n	80006b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b0f      	cmp	r3, #15
 800069e:	d80a      	bhi.n	80006b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a0:	2200      	movs	r2, #0
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	f04f 30ff 	mov.w	r0, #4294967295
 80006a8:	f001 fc21 	bl	8001eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ac:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <HAL_InitTick+0x68>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006b2:	2300      	movs	r3, #0
 80006b4:	e000      	b.n	80006b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	24000004 	.word	0x24000004
 80006c4:	2400000c 	.word	0x2400000c
 80006c8:	24000000 	.word	0x24000000

080006cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_IncTick+0x20>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_IncTick+0x24>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4413      	add	r3, r2
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <HAL_IncTick+0x24>)
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	24000004 	.word	0x24000004
 80006f0:	24000058 	.word	0x24000058

080006f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return uwTick;
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <HAL_GetTick+0x14>)
 80006fa:	681b      	ldr	r3, [r3, #0]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	24000058 	.word	0x24000058

0800070c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000714:	f7ff ffee 	bl	80006f4 <HAL_GetTick>
 8000718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000724:	d005      	beq.n	8000732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_Delay+0x40>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4413      	add	r3, r2
 8000730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000732:	bf00      	nop
 8000734:	f7ff ffde 	bl	80006f4 <HAL_GetTick>
 8000738:	4602      	mov	r2, r0
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	1ad2      	subs	r2, r2, r3
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	429a      	cmp	r2, r3
 8000742:	d3f7      	bcc.n	8000734 <HAL_Delay+0x28>
  {
  }
}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	24000004 	.word	0x24000004

08000750 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <HAL_GetREVID+0x14>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	0c1b      	lsrs	r3, r3, #16
}
 800075a:	4618      	mov	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	5c001000 	.word	0x5c001000

08000768 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8000772:	4907      	ldr	r1, [pc, #28]	; (8000790 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	43db      	mvns	r3, r3
 800077c:	401a      	ands	r2, r3
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	4313      	orrs	r3, r2
 8000782:	604b      	str	r3, [r1, #4]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	58000400 	.word	0x58000400

08000794 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	431a      	orrs	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	609a      	str	r2, [r3, #8]
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80007ba:	b480      	push	{r7}
 80007bc:	b083      	sub	sp, #12
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	431a      	orrs	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	609a      	str	r2, [r3, #8]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3360      	adds	r3, #96	; 0x60
 800080e:	461a      	mov	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	430b      	orrs	r3, r1
 800082a:	431a      	orrs	r2, r3
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000830:	bf00      	nop
 8000832:	371c      	adds	r7, #28
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	691b      	ldr	r3, [r3, #16]
 800084c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	f003 031f 	and.w	r3, r3, #31
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	fa01 f303 	lsl.w	r3, r1, r3
 800085c:	431a      	orrs	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	611a      	str	r2, [r3, #16]
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800086e:	b480      	push	{r7}
 8000870:	b087      	sub	sp, #28
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	3360      	adds	r3, #96	; 0x60
 800087e:	461a      	mov	r2, r3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	431a      	orrs	r2, r3
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	601a      	str	r2, [r3, #0]
  }
}
 8000898:	bf00      	nop
 800089a:	371c      	adds	r7, #28
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d101      	bne.n	80008bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80008b8:	2301      	movs	r3, #1
 80008ba:	e000      	b.n	80008be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b087      	sub	sp, #28
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	3330      	adds	r3, #48	; 0x30
 80008da:	461a      	mov	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	0a1b      	lsrs	r3, r3, #8
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	f003 030c 	and.w	r3, r3, #12
 80008e6:	4413      	add	r3, r2
 80008e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	f003 031f 	and.w	r3, r3, #31
 80008f4:	211f      	movs	r1, #31
 80008f6:	fa01 f303 	lsl.w	r3, r1, r3
 80008fa:	43db      	mvns	r3, r3
 80008fc:	401a      	ands	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	0e9b      	lsrs	r3, r3, #26
 8000902:	f003 011f 	and.w	r1, r3, #31
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	f003 031f 	and.w	r3, r3, #31
 800090c:	fa01 f303 	lsl.w	r3, r1, r3
 8000910:	431a      	orrs	r2, r3
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000916:	bf00      	nop
 8000918:	371c      	adds	r7, #28
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	f023 0203 	bic.w	r2, r3, #3
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	431a      	orrs	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	60da      	str	r2, [r3, #12]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000948:	b480      	push	{r7}
 800094a:	b087      	sub	sp, #28
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	3314      	adds	r3, #20
 8000958:	461a      	mov	r2, r3
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	0e5b      	lsrs	r3, r3, #25
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	4413      	add	r3, r2
 8000966:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	0d1b      	lsrs	r3, r3, #20
 8000970:	f003 031f 	and.w	r3, r3, #31
 8000974:	2107      	movs	r1, #7
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	401a      	ands	r2, r3
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	0d1b      	lsrs	r3, r3, #20
 8000982:	f003 031f 	and.w	r3, r3, #31
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	431a      	orrs	r2, r3
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000992:	bf00      	nop
 8000994:	371c      	adds	r7, #28
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80009b8:	43db      	mvns	r3, r3
 80009ba:	401a      	ands	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0318 	and.w	r3, r3, #24
 80009c2:	4908      	ldr	r1, [pc, #32]	; (80009e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80009c4:	40d9      	lsrs	r1, r3
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	400b      	ands	r3, r1
 80009ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80009ce:	431a      	orrs	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	000fffff 	.word	0x000fffff

080009e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	f003 031f 	and.w	r3, r3, #31
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	689a      	ldr	r2, [r3, #8]
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000a12:	4013      	ands	r3, r2
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	6093      	str	r3, [r2, #8]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	5fffffc0 	.word	0x5fffffc0

08000a28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a3c:	d101      	bne.n	8000a42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e000      	b.n	8000a44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689a      	ldr	r2, [r3, #8]
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <LL_ADC_EnableInternalRegulator+0x24>)
 8000a5e:	4013      	ands	r3, r2
 8000a60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	6fffffc0 	.word	0x6fffffc0

08000a78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000a8c:	d101      	bne.n	8000a92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e000      	b.n	8000a94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689a      	ldr	r2, [r3, #8]
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <LL_ADC_Enable+0x24>)
 8000aae:	4013      	ands	r3, r2
 8000ab0:	f043 0201 	orr.w	r2, r3, #1
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	7fffffc0 	.word	0x7fffffc0

08000ac8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d101      	bne.n	8000ae0 <LL_ADC_IsEnabled+0x18>
 8000adc:	2301      	movs	r3, #1
 8000ade:	e000      	b.n	8000ae2 <LL_ADC_IsEnabled+0x1a>
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689a      	ldr	r2, [r3, #8]
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <LL_ADC_REG_StartConversion+0x24>)
 8000afe:	4013      	ands	r3, r2
 8000b00:	f043 0204 	orr.w	r2, r3, #4
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	7fffffc0 	.word	0x7fffffc0

08000b18 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	d101      	bne.n	8000b30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e000      	b.n	8000b32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	2b08      	cmp	r3, #8
 8000b50:	d101      	bne.n	8000b56 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e18e      	b.n	8000e9c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d109      	bne.n	8000ba0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f00a faa5 	bl	800b0dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff3f 	bl	8000a28 <LL_ADC_IsDeepPowerDownEnabled>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d004      	beq.n	8000bba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff25 	bl	8000a04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ff5a 	bl	8000a78 <LL_ADC_IsInternalRegulatorEnabled>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d114      	bne.n	8000bf4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff3e 	bl	8000a50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000bd4:	4b9a      	ldr	r3, [pc, #616]	; (8000e40 <HAL_ADC_Init+0x2dc>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	099b      	lsrs	r3, r3, #6
 8000bda:	4a9a      	ldr	r2, [pc, #616]	; (8000e44 <HAL_ADC_Init+0x2e0>)
 8000bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000be0:	099b      	lsrs	r3, r3, #6
 8000be2:	3301      	adds	r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000be6:	e002      	b.n	8000bee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1f9      	bne.n	8000be8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff3d 	bl	8000a78 <LL_ADC_IsInternalRegulatorEnabled>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d10d      	bne.n	8000c20 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c08:	f043 0210 	orr.w	r2, r3, #16
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c14:	f043 0201 	orr.w	r2, r3, #1
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff77 	bl	8000b18 <LL_ADC_REG_IsConversionOngoing>
 8000c2a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c30:	f003 0310 	and.w	r3, r3, #16
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f040 8128 	bne.w	8000e8a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f040 8124 	bne.w	8000e8a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c46:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c4a:	f043 0202 	orr.w	r2, r3, #2
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff36 	bl	8000ac8 <LL_ADC_IsEnabled>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d136      	bne.n	8000cd0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a78      	ldr	r2, [pc, #480]	; (8000e48 <HAL_ADC_Init+0x2e4>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d004      	beq.n	8000c76 <HAL_ADC_Init+0x112>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a76      	ldr	r2, [pc, #472]	; (8000e4c <HAL_ADC_Init+0x2e8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d10e      	bne.n	8000c94 <HAL_ADC_Init+0x130>
 8000c76:	4874      	ldr	r0, [pc, #464]	; (8000e48 <HAL_ADC_Init+0x2e4>)
 8000c78:	f7ff ff26 	bl	8000ac8 <LL_ADC_IsEnabled>
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	4873      	ldr	r0, [pc, #460]	; (8000e4c <HAL_ADC_Init+0x2e8>)
 8000c80:	f7ff ff22 	bl	8000ac8 <LL_ADC_IsEnabled>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4323      	orrs	r3, r4
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	bf0c      	ite	eq
 8000c8c:	2301      	moveq	r3, #1
 8000c8e:	2300      	movne	r3, #0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	e008      	b.n	8000ca6 <HAL_ADC_Init+0x142>
 8000c94:	486e      	ldr	r0, [pc, #440]	; (8000e50 <HAL_ADC_Init+0x2ec>)
 8000c96:	f7ff ff17 	bl	8000ac8 <LL_ADC_IsEnabled>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	bf0c      	ite	eq
 8000ca0:	2301      	moveq	r3, #1
 8000ca2:	2300      	movne	r3, #0
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d012      	beq.n	8000cd0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a66      	ldr	r2, [pc, #408]	; (8000e48 <HAL_ADC_Init+0x2e4>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d004      	beq.n	8000cbe <HAL_ADC_Init+0x15a>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a64      	ldr	r2, [pc, #400]	; (8000e4c <HAL_ADC_Init+0x2e8>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d101      	bne.n	8000cc2 <HAL_ADC_Init+0x15e>
 8000cbe:	4a65      	ldr	r2, [pc, #404]	; (8000e54 <HAL_ADC_Init+0x2f0>)
 8000cc0:	e000      	b.n	8000cc4 <HAL_ADC_Init+0x160>
 8000cc2:	4a65      	ldr	r2, [pc, #404]	; (8000e58 <HAL_ADC_Init+0x2f4>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4610      	mov	r0, r2
 8000ccc:	f7ff fd62 	bl	8000794 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000cd0:	f7ff fd3e 	bl	8000750 <HAL_GetREVID>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f241 0303 	movw	r3, #4099	; 0x1003
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d914      	bls.n	8000d08 <HAL_ADC_Init+0x1a4>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2b10      	cmp	r3, #16
 8000ce4:	d110      	bne.n	8000d08 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	7d5b      	ldrb	r3, [r3, #21]
 8000cea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000cf0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000cf6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7f1b      	ldrb	r3, [r3, #28]
 8000cfc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000cfe:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000d00:	f043 030c 	orr.w	r3, r3, #12
 8000d04:	61bb      	str	r3, [r7, #24]
 8000d06:	e00d      	b.n	8000d24 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7d5b      	ldrb	r3, [r3, #21]
 8000d0c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000d12:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000d18:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	7f1b      	ldrb	r3, [r3, #28]
 8000d1e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7f1b      	ldrb	r3, [r3, #28]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d106      	bne.n	8000d3a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a1b      	ldr	r3, [r3, #32]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	045b      	lsls	r3, r3, #17
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d009      	beq.n	8000d56 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d46:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68d9      	ldr	r1, [r3, #12]
 8000d60:	4b3e      	ldr	r3, [pc, #248]	; (8000e5c <HAL_ADC_Init+0x2f8>)
 8000d62:	400b      	ands	r3, r1
 8000d64:	69b9      	ldr	r1, [r7, #24]
 8000d66:	430b      	orrs	r3, r1
 8000d68:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fed2 	bl	8000b18 <LL_ADC_REG_IsConversionOngoing>
 8000d74:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fedf 	bl	8000b3e <LL_ADC_INJ_IsConversionOngoing>
 8000d80:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d14a      	bne.n	8000e1e <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d147      	bne.n	8000e1e <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7d1b      	ldrb	r3, [r3, #20]
 8000d92:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	68d9      	ldr	r1, [r3, #12]
 8000da6:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <HAL_ADC_Init+0x2fc>)
 8000da8:	400b      	ands	r3, r1
 8000daa:	69b9      	ldr	r1, [r7, #24]
 8000dac:	430b      	orrs	r3, r1
 8000dae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d11b      	bne.n	8000df2 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbe:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6919      	ldr	r1, [r3, #16]
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <HAL_ADC_Init+0x300>)
 8000dcc:	400b      	ands	r3, r1
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000dd2:	3901      	subs	r1, #1
 8000dd4:	0408      	lsls	r0, r1, #16
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000dda:	4308      	orrs	r0, r1
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8000de0:	4308      	orrs	r0, r1
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	6c89      	ldr	r1, [r1, #72]	; 0x48
 8000de6:	4301      	orrs	r1, r0
 8000de8:	430b      	orrs	r3, r1
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6113      	str	r3, [r2, #16]
 8000df0:	e007      	b.n	8000e02 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	6912      	ldr	r2, [r2, #16]
 8000dfc:	f022 0201 	bic.w	r2, r2, #1
 8000e00:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	6912      	ldr	r2, [r2, #16]
 8000e0c:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e14:	430a      	orrs	r2, r1
 8000e16:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 fd93 	bl	8001944 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d120      	bne.n	8000e68 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000e30:	f022 010f 	bic.w	r1, r2, #15
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6992      	ldr	r2, [r2, #24]
 8000e38:	3a01      	subs	r2, #1
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e3e:	e01b      	b.n	8000e78 <HAL_ADC_Init+0x314>
 8000e40:	2400000c 	.word	0x2400000c
 8000e44:	053e2d63 	.word	0x053e2d63
 8000e48:	40022000 	.word	0x40022000
 8000e4c:	40022100 	.word	0x40022100
 8000e50:	58026000 	.word	0x58026000
 8000e54:	40022300 	.word	0x40022300
 8000e58:	58026300 	.word	0x58026300
 8000e5c:	fff0c003 	.word	0xfff0c003
 8000e60:	ffffbffc 	.word	0xffffbffc
 8000e64:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	6812      	ldr	r2, [r2, #0]
 8000e70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000e72:	f022 020f 	bic.w	r2, r2, #15
 8000e76:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e7c:	f023 0303 	bic.w	r3, r3, #3
 8000e80:	f043 0201 	orr.w	r2, r3, #1
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	655a      	str	r2, [r3, #84]	; 0x54
 8000e88:	e007      	b.n	8000e9a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e8e:	f043 0210 	orr.w	r2, r3, #16
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3724      	adds	r7, #36	; 0x24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}

08000ea4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a55      	ldr	r2, [pc, #340]	; (800100c <HAL_ADC_Start_DMA+0x168>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d004      	beq.n	8000ec4 <HAL_ADC_Start_DMA+0x20>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a54      	ldr	r2, [pc, #336]	; (8001010 <HAL_ADC_Start_DMA+0x16c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d101      	bne.n	8000ec8 <HAL_ADC_Start_DMA+0x24>
 8000ec4:	4b53      	ldr	r3, [pc, #332]	; (8001014 <HAL_ADC_Start_DMA+0x170>)
 8000ec6:	e000      	b.n	8000eca <HAL_ADC_Start_DMA+0x26>
 8000ec8:	4b53      	ldr	r3, [pc, #332]	; (8001018 <HAL_ADC_Start_DMA+0x174>)
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fd8c 	bl	80009e8 <LL_ADC_GetMultimode>
 8000ed0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fe1e 	bl	8000b18 <LL_ADC_REG_IsConversionOngoing>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 808c 	bne.w	8000ffc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d101      	bne.n	8000ef2 <HAL_ADC_Start_DMA+0x4e>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	e087      	b.n	8001002 <HAL_ADC_Start_DMA+0x15e>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	2b05      	cmp	r3, #5
 8000f04:	d002      	beq.n	8000f0c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	2b09      	cmp	r3, #9
 8000f0a:	d170      	bne.n	8000fee <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f000 fbfb 	bl	8001708 <ADC_Enable>
 8000f12:	4603      	mov	r3, r0
 8000f14:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000f16:	7dfb      	ldrb	r3, [r7, #23]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d163      	bne.n	8000fe4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000f20:	4b3e      	ldr	r3, [pc, #248]	; (800101c <HAL_ADC_Start_DMA+0x178>)
 8000f22:	4013      	ands	r3, r2
 8000f24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a37      	ldr	r2, [pc, #220]	; (8001010 <HAL_ADC_Start_DMA+0x16c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d002      	beq.n	8000f3c <HAL_ADC_Start_DMA+0x98>
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	e000      	b.n	8000f3e <HAL_ADC_Start_DMA+0x9a>
 8000f3c:	4b33      	ldr	r3, [pc, #204]	; (800100c <HAL_ADC_Start_DMA+0x168>)
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	6812      	ldr	r2, [r2, #0]
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d002      	beq.n	8000f4c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d105      	bne.n	8000f58 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d006      	beq.n	8000f72 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f68:	f023 0206 	bic.w	r2, r3, #6
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	659a      	str	r2, [r3, #88]	; 0x58
 8000f70:	e002      	b.n	8000f78 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2200      	movs	r2, #0
 8000f76:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7c:	4a28      	ldr	r2, [pc, #160]	; (8001020 <HAL_ADC_Start_DMA+0x17c>)
 8000f7e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f84:	4a27      	ldr	r2, [pc, #156]	; (8001024 <HAL_ADC_Start_DMA+0x180>)
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8c:	4a26      	ldr	r2, [pc, #152]	; (8001028 <HAL_ADC_Start_DMA+0x184>)
 8000f8e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	221c      	movs	r2, #28
 8000f96:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	6812      	ldr	r2, [r2, #0]
 8000fa8:	6852      	ldr	r2, [r2, #4]
 8000faa:	f042 0210 	orr.w	r2, r2, #16
 8000fae:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f7ff fcb1 	bl	8000922 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3340      	adds	r3, #64	; 0x40
 8000fca:	4619      	mov	r1, r3
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f001 fc70 	bl	80028b4 <HAL_DMA_Start_IT>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fd87 	bl	8000af0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8000fe2:	e00d      	b.n	8001000 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8000fec:	e008      	b.n	8001000 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000ffa:	e001      	b.n	8001000 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001000:	7dfb      	ldrb	r3, [r7, #23]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40022000 	.word	0x40022000
 8001010:	40022100 	.word	0x40022100
 8001014:	40022300 	.word	0x40022300
 8001018:	58026300 	.word	0x58026300
 800101c:	fffff0fe 	.word	0xfffff0fe
 8001020:	0800181d 	.word	0x0800181d
 8001024:	080018f5 	.word	0x080018f5
 8001028:	08001911 	.word	0x08001911

0800102c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b0a1      	sub	sp, #132	; 0x84
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	4a9d      	ldr	r2, [pc, #628]	; (80012f8 <HAL_ADC_ConfigChannel+0x290>)
 8001082:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <HAL_ADC_ConfigChannel+0x2a>
 800108e:	2302      	movs	r3, #2
 8001090:	e321      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x66e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fd3a 	bl	8000b18 <LL_ADC_REG_IsConversionOngoing>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f040 8306 	bne.w	80016b8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d108      	bne.n	80010ca <HAL_ADC_ConfigChannel+0x62>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0e9b      	lsrs	r3, r3, #26
 80010be:	f003 031f 	and.w	r3, r3, #31
 80010c2:	2201      	movs	r2, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	e016      	b.n	80010f8 <HAL_ADC_ConfigChannel+0x90>
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010d2:	fa93 f3a3 	rbit	r3, r3
 80010d6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010da:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80010dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80010e2:	2320      	movs	r3, #32
 80010e4:	e003      	b.n	80010ee <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80010e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80010e8:	fab3 f383 	clz	r3, r3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	2201      	movs	r2, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	6812      	ldr	r2, [r2, #0]
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	6809      	ldr	r1, [r1, #0]
 8001100:	69c9      	ldr	r1, [r1, #28]
 8001102:	430b      	orrs	r3, r1
 8001104:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	6859      	ldr	r1, [r3, #4]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	f7ff fbd9 	bl	80008ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fcfb 	bl	8000b18 <LL_ADC_REG_IsConversionOngoing>
 8001122:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fd08 	bl	8000b3e <LL_ADC_INJ_IsConversionOngoing>
 800112e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001132:	2b00      	cmp	r3, #0
 8001134:	f040 80b3 	bne.w	800129e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800113a:	2b00      	cmp	r3, #0
 800113c:	f040 80af 	bne.w	800129e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	6819      	ldr	r1, [r3, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	461a      	mov	r2, r3
 800114e:	f7ff fbfb 	bl	8000948 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001152:	4b6a      	ldr	r3, [pc, #424]	; (80012fc <HAL_ADC_ConfigChannel+0x294>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800115a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800115e:	d10b      	bne.n	8001178 <HAL_ADC_ConfigChannel+0x110>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	695a      	ldr	r2, [r3, #20]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	e01d      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x14c>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10b      	bne.n	800119e <HAL_ADC_ConfigChannel+0x136>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	695a      	ldr	r2, [r3, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	e00a      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x14c>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	695a      	ldr	r2, [r3, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d027      	beq.n	800120e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	6919      	ldr	r1, [r3, #16]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011cc:	f7ff fb16 	bl	80007fc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	6919      	ldr	r1, [r3, #16]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	7e5b      	ldrb	r3, [r3, #25]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d102      	bne.n	80011e6 <HAL_ADC_ConfigChannel+0x17e>
 80011e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80011e4:	e000      	b.n	80011e8 <HAL_ADC_ConfigChannel+0x180>
 80011e6:	2300      	movs	r3, #0
 80011e8:	461a      	mov	r2, r3
 80011ea:	f7ff fb40 	bl	800086e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	6919      	ldr	r1, [r3, #16]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	7e1b      	ldrb	r3, [r3, #24]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d102      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x19c>
 80011fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001202:	e000      	b.n	8001206 <HAL_ADC_ConfigChannel+0x19e>
 8001204:	2300      	movs	r3, #0
 8001206:	461a      	mov	r2, r3
 8001208:	f7ff fb18 	bl	800083c <LL_ADC_SetDataRightShift>
 800120c:	e047      	b.n	800129e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001214:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	069b      	lsls	r3, r3, #26
 800121e:	429a      	cmp	r2, r3
 8001220:	d107      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800122c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001230:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001238:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	069b      	lsls	r3, r3, #26
 8001242:	429a      	cmp	r2, r3
 8001244:	d107      	bne.n	8001256 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001250:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001254:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800125c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	069b      	lsls	r3, r3, #26
 8001266:	429a      	cmp	r2, r3
 8001268:	d107      	bne.n	800127a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001274:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001278:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001280:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	069b      	lsls	r3, r3, #26
 800128a:	429a      	cmp	r2, r3
 800128c:	d107      	bne.n	800129e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001298:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800129c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fc10 	bl	8000ac8 <LL_ADC_IsEnabled>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f040 820d 	bne.w	80016ca <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	6819      	ldr	r1, [r3, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	461a      	mov	r2, r3
 80012be:	f7ff fb6f 	bl	80009a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <HAL_ADC_ConfigChannel+0x290>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	f040 8133 	bne.w	8001534 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d110      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x298>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	0e9b      	lsrs	r3, r3, #26
 80012e4:	3301      	adds	r3, #1
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	2b09      	cmp	r3, #9
 80012ec:	bf94      	ite	ls
 80012ee:	2301      	movls	r3, #1
 80012f0:	2300      	movhi	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	e01e      	b.n	8001334 <HAL_ADC_ConfigChannel+0x2cc>
 80012f6:	bf00      	nop
 80012f8:	47ff0000 	.word	0x47ff0000
 80012fc:	5c001000 	.word	0x5c001000
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001308:	fa93 f3a3 	rbit	r3, r3
 800130c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800130e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001310:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001318:	2320      	movs	r3, #32
 800131a:	e003      	b.n	8001324 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800131c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	3301      	adds	r3, #1
 8001326:	f003 031f 	and.w	r3, r3, #31
 800132a:	2b09      	cmp	r3, #9
 800132c:	bf94      	ite	ls
 800132e:	2301      	movls	r3, #1
 8001330:	2300      	movhi	r3, #0
 8001332:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001334:	2b00      	cmp	r3, #0
 8001336:	d079      	beq.n	800142c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001340:	2b00      	cmp	r3, #0
 8001342:	d107      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x2ec>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	0e9b      	lsrs	r3, r3, #26
 800134a:	3301      	adds	r3, #1
 800134c:	069b      	lsls	r3, r3, #26
 800134e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001352:	e015      	b.n	8001380 <HAL_ADC_ConfigChannel+0x318>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001364:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800136c:	2320      	movs	r3, #32
 800136e:	e003      	b.n	8001378 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001372:	fab3 f383 	clz	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	3301      	adds	r3, #1
 800137a:	069b      	lsls	r3, r3, #26
 800137c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001388:	2b00      	cmp	r3, #0
 800138a:	d109      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x338>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	0e9b      	lsrs	r3, r3, #26
 8001392:	3301      	adds	r3, #1
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	2101      	movs	r1, #1
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	e017      	b.n	80013d0 <HAL_ADC_ConfigChannel+0x368>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013a8:	fa93 f3a3 	rbit	r3, r3
 80013ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80013ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80013b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80013b8:	2320      	movs	r3, #32
 80013ba:	e003      	b.n	80013c4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80013bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013be:	fab3 f383 	clz	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	3301      	adds	r3, #1
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	2101      	movs	r1, #1
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	ea42 0103 	orr.w	r1, r2, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10a      	bne.n	80013f6 <HAL_ADC_ConfigChannel+0x38e>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	0e9b      	lsrs	r3, r3, #26
 80013e6:	3301      	adds	r3, #1
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	051b      	lsls	r3, r3, #20
 80013f4:	e018      	b.n	8001428 <HAL_ADC_ConfigChannel+0x3c0>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fe:	fa93 f3a3 	rbit	r3, r3
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001406:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800140e:	2320      	movs	r3, #32
 8001410:	e003      	b.n	800141a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001414:	fab3 f383 	clz	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	3301      	adds	r3, #1
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001428:	430b      	orrs	r3, r1
 800142a:	e07e      	b.n	800152a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001434:	2b00      	cmp	r3, #0
 8001436:	d107      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x3e0>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0e9b      	lsrs	r3, r3, #26
 800143e:	3301      	adds	r3, #1
 8001440:	069b      	lsls	r3, r3, #26
 8001442:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001446:	e015      	b.n	8001474 <HAL_ADC_ConfigChannel+0x40c>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001450:	fa93 f3a3 	rbit	r3, r3
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001460:	2320      	movs	r3, #32
 8001462:	e003      	b.n	800146c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001466:	fab3 f383 	clz	r3, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	3301      	adds	r3, #1
 800146e:	069b      	lsls	r3, r3, #26
 8001470:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800147c:	2b00      	cmp	r3, #0
 800147e:	d109      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x42c>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0e9b      	lsrs	r3, r3, #26
 8001486:	3301      	adds	r3, #1
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	2101      	movs	r1, #1
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	e017      	b.n	80014c4 <HAL_ADC_ConfigChannel+0x45c>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa93 f3a3 	rbit	r3, r3
 80014a0:	61bb      	str	r3, [r7, #24]
  return result;
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80014ac:	2320      	movs	r3, #32
 80014ae:	e003      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	fab3 f383 	clz	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	3301      	adds	r3, #1
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	2101      	movs	r1, #1
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	ea42 0103 	orr.w	r1, r2, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10d      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x488>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0e9b      	lsrs	r3, r3, #26
 80014da:	3301      	adds	r3, #1
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	3b1e      	subs	r3, #30
 80014e8:	051b      	lsls	r3, r3, #20
 80014ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ee:	e01b      	b.n	8001528 <HAL_ADC_ConfigChannel+0x4c0>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	fa93 f3a3 	rbit	r3, r3
 80014fc:	60fb      	str	r3, [r7, #12]
  return result;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001508:	2320      	movs	r3, #32
 800150a:	e003      	b.n	8001514 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fab3 f383 	clz	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	3301      	adds	r3, #1
 8001516:	f003 021f 	and.w	r2, r3, #31
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	3b1e      	subs	r3, #30
 8001522:	051b      	lsls	r3, r3, #20
 8001524:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001528:	430b      	orrs	r3, r1
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	6892      	ldr	r2, [r2, #8]
 800152e:	4619      	mov	r1, r3
 8001530:	f7ff fa0a 	bl	8000948 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	f280 80c6 	bge.w	80016ca <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a67      	ldr	r2, [pc, #412]	; (80016e0 <HAL_ADC_ConfigChannel+0x678>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d004      	beq.n	8001552 <HAL_ADC_ConfigChannel+0x4ea>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a65      	ldr	r2, [pc, #404]	; (80016e4 <HAL_ADC_ConfigChannel+0x67c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x4ee>
 8001552:	4b65      	ldr	r3, [pc, #404]	; (80016e8 <HAL_ADC_ConfigChannel+0x680>)
 8001554:	e000      	b.n	8001558 <HAL_ADC_ConfigChannel+0x4f0>
 8001556:	4b65      	ldr	r3, [pc, #404]	; (80016ec <HAL_ADC_ConfigChannel+0x684>)
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff f941 	bl	80007e0 <LL_ADC_GetCommonPathInternalCh>
 800155e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a5e      	ldr	r2, [pc, #376]	; (80016e0 <HAL_ADC_ConfigChannel+0x678>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d004      	beq.n	8001574 <HAL_ADC_ConfigChannel+0x50c>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a5d      	ldr	r2, [pc, #372]	; (80016e4 <HAL_ADC_ConfigChannel+0x67c>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d10e      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x52a>
 8001574:	485a      	ldr	r0, [pc, #360]	; (80016e0 <HAL_ADC_ConfigChannel+0x678>)
 8001576:	f7ff faa7 	bl	8000ac8 <LL_ADC_IsEnabled>
 800157a:	4604      	mov	r4, r0
 800157c:	4859      	ldr	r0, [pc, #356]	; (80016e4 <HAL_ADC_ConfigChannel+0x67c>)
 800157e:	f7ff faa3 	bl	8000ac8 <LL_ADC_IsEnabled>
 8001582:	4603      	mov	r3, r0
 8001584:	4323      	orrs	r3, r4
 8001586:	2b00      	cmp	r3, #0
 8001588:	bf0c      	ite	eq
 800158a:	2301      	moveq	r3, #1
 800158c:	2300      	movne	r3, #0
 800158e:	b2db      	uxtb	r3, r3
 8001590:	e008      	b.n	80015a4 <HAL_ADC_ConfigChannel+0x53c>
 8001592:	4857      	ldr	r0, [pc, #348]	; (80016f0 <HAL_ADC_ConfigChannel+0x688>)
 8001594:	f7ff fa98 	bl	8000ac8 <LL_ADC_IsEnabled>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	bf0c      	ite	eq
 800159e:	2301      	moveq	r3, #1
 80015a0:	2300      	movne	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d07d      	beq.n	80016a4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a51      	ldr	r2, [pc, #324]	; (80016f4 <HAL_ADC_ConfigChannel+0x68c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d130      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x5ac>
 80015b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d12b      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a4b      	ldr	r2, [pc, #300]	; (80016f0 <HAL_ADC_ConfigChannel+0x688>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	f040 8081 	bne.w	80016ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a44      	ldr	r2, [pc, #272]	; (80016e0 <HAL_ADC_ConfigChannel+0x678>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d004      	beq.n	80015dc <HAL_ADC_ConfigChannel+0x574>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a43      	ldr	r2, [pc, #268]	; (80016e4 <HAL_ADC_ConfigChannel+0x67c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d101      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x578>
 80015dc:	4a42      	ldr	r2, [pc, #264]	; (80016e8 <HAL_ADC_ConfigChannel+0x680>)
 80015de:	e000      	b.n	80015e2 <HAL_ADC_ConfigChannel+0x57a>
 80015e0:	4a42      	ldr	r2, [pc, #264]	; (80016ec <HAL_ADC_ConfigChannel+0x684>)
 80015e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015e8:	4619      	mov	r1, r3
 80015ea:	4610      	mov	r0, r2
 80015ec:	f7ff f8e5 	bl	80007ba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015f0:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <HAL_ADC_ConfigChannel+0x690>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	099b      	lsrs	r3, r3, #6
 80015f6:	4a41      	ldr	r2, [pc, #260]	; (80016fc <HAL_ADC_ConfigChannel+0x694>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	099b      	lsrs	r3, r3, #6
 80015fe:	3301      	adds	r3, #1
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001604:	e002      	b.n	800160c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	3b01      	subs	r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f9      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001612:	e05a      	b.n	80016ca <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a39      	ldr	r2, [pc, #228]	; (8001700 <HAL_ADC_ConfigChannel+0x698>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d11e      	bne.n	800165c <HAL_ADC_ConfigChannel+0x5f4>
 800161e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d119      	bne.n	800165c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a30      	ldr	r2, [pc, #192]	; (80016f0 <HAL_ADC_ConfigChannel+0x688>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d14b      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a2a      	ldr	r2, [pc, #168]	; (80016e0 <HAL_ADC_ConfigChannel+0x678>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d004      	beq.n	8001646 <HAL_ADC_ConfigChannel+0x5de>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a28      	ldr	r2, [pc, #160]	; (80016e4 <HAL_ADC_ConfigChannel+0x67c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d101      	bne.n	800164a <HAL_ADC_ConfigChannel+0x5e2>
 8001646:	4a28      	ldr	r2, [pc, #160]	; (80016e8 <HAL_ADC_ConfigChannel+0x680>)
 8001648:	e000      	b.n	800164c <HAL_ADC_ConfigChannel+0x5e4>
 800164a:	4a28      	ldr	r2, [pc, #160]	; (80016ec <HAL_ADC_ConfigChannel+0x684>)
 800164c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800164e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001652:	4619      	mov	r1, r3
 8001654:	4610      	mov	r0, r2
 8001656:	f7ff f8b0 	bl	80007ba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800165a:	e036      	b.n	80016ca <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a28      	ldr	r2, [pc, #160]	; (8001704 <HAL_ADC_ConfigChannel+0x69c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d131      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x662>
 8001666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d12c      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a1e      	ldr	r2, [pc, #120]	; (80016f0 <HAL_ADC_ConfigChannel+0x688>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d127      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a18      	ldr	r2, [pc, #96]	; (80016e0 <HAL_ADC_ConfigChannel+0x678>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d004      	beq.n	800168e <HAL_ADC_ConfigChannel+0x626>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a16      	ldr	r2, [pc, #88]	; (80016e4 <HAL_ADC_ConfigChannel+0x67c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x62a>
 800168e:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <HAL_ADC_ConfigChannel+0x680>)
 8001690:	e000      	b.n	8001694 <HAL_ADC_ConfigChannel+0x62c>
 8001692:	4a16      	ldr	r2, [pc, #88]	; (80016ec <HAL_ADC_ConfigChannel+0x684>)
 8001694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001696:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800169a:	4619      	mov	r1, r3
 800169c:	4610      	mov	r0, r2
 800169e:	f7ff f88c 	bl	80007ba <LL_ADC_SetCommonPathInternalCh>
 80016a2:	e012      	b.n	80016ca <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a8:	f043 0220 	orr.w	r2, r3, #32
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80016b6:	e008      	b.n	80016ca <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016bc:	f043 0220 	orr.w	r2, r3, #32
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80016d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3784      	adds	r7, #132	; 0x84
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd90      	pop	{r4, r7, pc}
 80016de:	bf00      	nop
 80016e0:	40022000 	.word	0x40022000
 80016e4:	40022100 	.word	0x40022100
 80016e8:	40022300 	.word	0x40022300
 80016ec:	58026300 	.word	0x58026300
 80016f0:	58026000 	.word	0x58026000
 80016f4:	cb840000 	.word	0xcb840000
 80016f8:	2400000c 	.word	0x2400000c
 80016fc:	053e2d63 	.word	0x053e2d63
 8001700:	c7520000 	.word	0xc7520000
 8001704:	cfb80000 	.word	0xcfb80000

08001708 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff f9d7 	bl	8000ac8 <LL_ADC_IsEnabled>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d16e      	bne.n	80017fe <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	4b38      	ldr	r3, [pc, #224]	; (8001808 <ADC_Enable+0x100>)
 8001728:	4013      	ands	r3, r2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00d      	beq.n	800174a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001732:	f043 0210 	orr.w	r2, r3, #16
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	f043 0201 	orr.w	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e05a      	b.n	8001800 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f9a6 	bl	8000aa0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001754:	f7fe ffce 	bl	80006f4 <HAL_GetTick>
 8001758:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a2b      	ldr	r2, [pc, #172]	; (800180c <ADC_Enable+0x104>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d004      	beq.n	800176e <ADC_Enable+0x66>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a29      	ldr	r2, [pc, #164]	; (8001810 <ADC_Enable+0x108>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d101      	bne.n	8001772 <ADC_Enable+0x6a>
 800176e:	4b29      	ldr	r3, [pc, #164]	; (8001814 <ADC_Enable+0x10c>)
 8001770:	e000      	b.n	8001774 <ADC_Enable+0x6c>
 8001772:	4b29      	ldr	r3, [pc, #164]	; (8001818 <ADC_Enable+0x110>)
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff f937 	bl	80009e8 <LL_ADC_GetMultimode>
 800177a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a23      	ldr	r2, [pc, #140]	; (8001810 <ADC_Enable+0x108>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d002      	beq.n	800178c <ADC_Enable+0x84>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	e000      	b.n	800178e <ADC_Enable+0x86>
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <ADC_Enable+0x104>)
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	4293      	cmp	r3, r2
 8001794:	d02c      	beq.n	80017f0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d130      	bne.n	80017fe <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800179c:	e028      	b.n	80017f0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f990 	bl	8000ac8 <LL_ADC_IsEnabled>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d104      	bne.n	80017b8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff f974 	bl	8000aa0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017b8:	f7fe ff9c 	bl	80006f4 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d914      	bls.n	80017f0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d00d      	beq.n	80017f0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d8:	f043 0210 	orr.w	r2, r3, #16
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e007      	b.n	8001800 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d1cf      	bne.n	800179e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	8000003f 	.word	0x8000003f
 800180c:	40022000 	.word	0x40022000
 8001810:	40022100 	.word	0x40022100
 8001814:	40022300 	.word	0x40022300
 8001818:	58026300 	.word	0x58026300

0800181c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001828:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001832:	2b00      	cmp	r3, #0
 8001834:	d14b      	bne.n	80018ce <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d021      	beq.n	8001894 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff f825 	bl	80008a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d032      	beq.n	80018c6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d12b      	bne.n	80018c6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d11f      	bne.n	80018c6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188a:	f043 0201 	orr.w	r2, r3, #1
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	655a      	str	r2, [r3, #84]	; 0x54
 8001892:	e018      	b.n	80018c6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d111      	bne.n	80018c6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d105      	bne.n	80018c6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018be:	f043 0201 	orr.w	r2, r3, #1
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f7ff fbb0 	bl	800102c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80018cc:	e00e      	b.n	80018ec <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d2:	f003 0310 	and.w	r3, r3, #16
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f7ff fbba 	bl	8001054 <HAL_ADC_ErrorCallback>
}
 80018e0:	e004      	b.n	80018ec <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	4798      	blx	r3
}
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001900:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f7ff fb9c 	bl	8001040 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001922:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f043 0204 	orr.w	r2, r3, #4
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f7ff fb8c 	bl	8001054 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a70      	ldr	r2, [pc, #448]	; (8001b14 <ADC_ConfigureBoostMode+0x1d0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d004      	beq.n	8001960 <ADC_ConfigureBoostMode+0x1c>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a6f      	ldr	r2, [pc, #444]	; (8001b18 <ADC_ConfigureBoostMode+0x1d4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d109      	bne.n	8001974 <ADC_ConfigureBoostMode+0x30>
 8001960:	4b6e      	ldr	r3, [pc, #440]	; (8001b1c <ADC_ConfigureBoostMode+0x1d8>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf14      	ite	ne
 800196c:	2301      	movne	r3, #1
 800196e:	2300      	moveq	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	e008      	b.n	8001986 <ADC_ConfigureBoostMode+0x42>
 8001974:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <ADC_ConfigureBoostMode+0x1dc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf14      	ite	ne
 8001980:	2301      	movne	r3, #1
 8001982:	2300      	moveq	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d01a      	beq.n	80019c0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800198a:	f004 fbc7 	bl	800611c <HAL_RCC_GetHCLKFreq>
 800198e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001998:	d006      	beq.n	80019a8 <ADC_ConfigureBoostMode+0x64>
 800199a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800199e:	d00b      	beq.n	80019b8 <ADC_ConfigureBoostMode+0x74>
 80019a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a4:	d000      	beq.n	80019a8 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80019a6:	e05d      	b.n	8001a64 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	0c1b      	lsrs	r3, r3, #16
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b4:	60fb      	str	r3, [r7, #12]
        break;
 80019b6:	e055      	b.n	8001a64 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	60fb      	str	r3, [r7, #12]
        break;
 80019be:	e051      	b.n	8001a64 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80019c0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80019c4:	f005 fb04 	bl	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq>
 80019c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80019d2:	d02a      	beq.n	8001a2a <ADC_ConfigureBoostMode+0xe6>
 80019d4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80019d8:	d813      	bhi.n	8001a02 <ADC_ConfigureBoostMode+0xbe>
 80019da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80019de:	d024      	beq.n	8001a2a <ADC_ConfigureBoostMode+0xe6>
 80019e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80019e4:	d806      	bhi.n	80019f4 <ADC_ConfigureBoostMode+0xb0>
 80019e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80019ea:	d01e      	beq.n	8001a2a <ADC_ConfigureBoostMode+0xe6>
 80019ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80019f0:	d01b      	beq.n	8001a2a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80019f2:	e037      	b.n	8001a64 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80019f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019f8:	d017      	beq.n	8001a2a <ADC_ConfigureBoostMode+0xe6>
 80019fa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80019fe:	d014      	beq.n	8001a2a <ADC_ConfigureBoostMode+0xe6>
        break;
 8001a00:	e030      	b.n	8001a64 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8001a02:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001a06:	d021      	beq.n	8001a4c <ADC_ConfigureBoostMode+0x108>
 8001a08:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001a0c:	d806      	bhi.n	8001a1c <ADC_ConfigureBoostMode+0xd8>
 8001a0e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001a12:	d013      	beq.n	8001a3c <ADC_ConfigureBoostMode+0xf8>
 8001a14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a18:	d014      	beq.n	8001a44 <ADC_ConfigureBoostMode+0x100>
        break;
 8001a1a:	e023      	b.n	8001a64 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8001a1c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001a20:	d018      	beq.n	8001a54 <ADC_ConfigureBoostMode+0x110>
 8001a22:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001a26:	d019      	beq.n	8001a5c <ADC_ConfigureBoostMode+0x118>
        break;
 8001a28:	e01c      	b.n	8001a64 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	0c9b      	lsrs	r3, r3, #18
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a38:	60fb      	str	r3, [r7, #12]
        break;
 8001a3a:	e013      	b.n	8001a64 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	091b      	lsrs	r3, r3, #4
 8001a40:	60fb      	str	r3, [r7, #12]
        break;
 8001a42:	e00f      	b.n	8001a64 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	60fb      	str	r3, [r7, #12]
        break;
 8001a4a:	e00b      	b.n	8001a64 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	099b      	lsrs	r3, r3, #6
 8001a50:	60fb      	str	r3, [r7, #12]
        break;
 8001a52:	e007      	b.n	8001a64 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	09db      	lsrs	r3, r3, #7
 8001a58:	60fb      	str	r3, [r7, #12]
        break;
 8001a5a:	e003      	b.n	8001a64 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	0a1b      	lsrs	r3, r3, #8
 8001a60:	60fb      	str	r3, [r7, #12]
        break;
 8001a62:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001a64:	f7fe fe74 	bl	8000750 <HAL_GetREVID>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d815      	bhi.n	8001a9e <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4a2b      	ldr	r2, [pc, #172]	; (8001b24 <ADC_ConfigureBoostMode+0x1e0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d908      	bls.n	8001a8c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	6892      	ldr	r2, [r2, #8]
 8001a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a88:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001a8a:	e03e      	b.n	8001b0a <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	6892      	ldr	r2, [r2, #8]
 8001a96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a9a:	609a      	str	r2, [r3, #8]
}
 8001a9c:	e035      	b.n	8001b0a <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	085b      	lsrs	r3, r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4a20      	ldr	r2, [pc, #128]	; (8001b28 <ADC_ConfigureBoostMode+0x1e4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d808      	bhi.n	8001abe <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	6892      	ldr	r2, [r2, #8]
 8001ab6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001aba:	609a      	str	r2, [r3, #8]
}
 8001abc:	e025      	b.n	8001b0a <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4a1a      	ldr	r2, [pc, #104]	; (8001b2c <ADC_ConfigureBoostMode+0x1e8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d80a      	bhi.n	8001adc <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	6892      	ldr	r2, [r2, #8]
 8001ad0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ad8:	609a      	str	r2, [r3, #8]
}
 8001ada:	e016      	b.n	8001b0a <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <ADC_ConfigureBoostMode+0x1ec>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d80a      	bhi.n	8001afa <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	6892      	ldr	r2, [r2, #8]
 8001aee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af6:	609a      	str	r2, [r3, #8]
}
 8001af8:	e007      	b.n	8001b0a <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	6892      	ldr	r2, [r2, #8]
 8001b04:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001b08:	609a      	str	r2, [r3, #8]
}
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40022000 	.word	0x40022000
 8001b18:	40022100 	.word	0x40022100
 8001b1c:	40022300 	.word	0x40022300
 8001b20:	58026300 	.word	0x58026300
 8001b24:	01312d00 	.word	0x01312d00
 8001b28:	005f5e10 	.word	0x005f5e10
 8001b2c:	00bebc20 	.word	0x00bebc20
 8001b30:	017d7840 	.word	0x017d7840

08001b34 <LL_ADC_IsEnabled>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <LL_ADC_IsEnabled+0x18>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <LL_ADC_IsEnabled+0x1a>
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_ADC_REG_IsConversionOngoing>:
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d101      	bne.n	8001b72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b09f      	sub	sp, #124	; 0x7c
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e0be      	b.n	8001d1c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a5c      	ldr	r2, [pc, #368]	; (8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d102      	bne.n	8001bbe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001bb8:	4b5b      	ldr	r3, [pc, #364]	; (8001d28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	e001      	b.n	8001bc2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10b      	bne.n	8001be0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bcc:	f043 0220 	orr.w	r2, r3, #32
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e09d      	b.n	8001d1c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ffb9 	bl	8001b5a <LL_ADC_REG_IsConversionOngoing>
 8001be8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ffb3 	bl	8001b5a <LL_ADC_REG_IsConversionOngoing>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d17f      	bne.n	8001cfa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d17c      	bne.n	8001cfa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a47      	ldr	r2, [pc, #284]	; (8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d004      	beq.n	8001c14 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a46      	ldr	r2, [pc, #280]	; (8001d28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d101      	bne.n	8001c18 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8001c14:	4b45      	ldr	r3, [pc, #276]	; (8001d2c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001c16:	e000      	b.n	8001c1a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8001c18:	4b45      	ldr	r3, [pc, #276]	; (8001d30 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001c1a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d039      	beq.n	8001c98 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c34:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a3a      	ldr	r2, [pc, #232]	; (8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d004      	beq.n	8001c4a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a38      	ldr	r2, [pc, #224]	; (8001d28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d10e      	bne.n	8001c68 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8001c4a:	4836      	ldr	r0, [pc, #216]	; (8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001c4c:	f7ff ff72 	bl	8001b34 <LL_ADC_IsEnabled>
 8001c50:	4604      	mov	r4, r0
 8001c52:	4835      	ldr	r0, [pc, #212]	; (8001d28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001c54:	f7ff ff6e 	bl	8001b34 <LL_ADC_IsEnabled>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4323      	orrs	r3, r4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bf0c      	ite	eq
 8001c60:	2301      	moveq	r3, #1
 8001c62:	2300      	movne	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	e008      	b.n	8001c7a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8001c68:	4832      	ldr	r0, [pc, #200]	; (8001d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8001c6a:	f7ff ff63 	bl	8001b34 <LL_ADC_IsEnabled>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf0c      	ite	eq
 8001c74:	2301      	moveq	r3, #1
 8001c76:	2300      	movne	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d047      	beq.n	8001d0e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	6811      	ldr	r1, [r2, #0]
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	6892      	ldr	r2, [r2, #8]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	431a      	orrs	r2, r3
 8001c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c94:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c96:	e03a      	b.n	8001d0e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ca2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1e      	ldr	r2, [pc, #120]	; (8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d004      	beq.n	8001cb8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d10e      	bne.n	8001cd6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8001cb8:	481a      	ldr	r0, [pc, #104]	; (8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001cba:	f7ff ff3b 	bl	8001b34 <LL_ADC_IsEnabled>
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	4819      	ldr	r0, [pc, #100]	; (8001d28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001cc2:	f7ff ff37 	bl	8001b34 <LL_ADC_IsEnabled>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4323      	orrs	r3, r4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf0c      	ite	eq
 8001cce:	2301      	moveq	r3, #1
 8001cd0:	2300      	movne	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	e008      	b.n	8001ce8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001cd6:	4817      	ldr	r0, [pc, #92]	; (8001d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8001cd8:	f7ff ff2c 	bl	8001b34 <LL_ADC_IsEnabled>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bf0c      	ite	eq
 8001ce2:	2301      	moveq	r3, #1
 8001ce4:	2300      	movne	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d010      	beq.n	8001d0e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001cf6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cf8:	e009      	b.n	8001d0e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	f043 0220 	orr.w	r2, r3, #32
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001d0c:	e000      	b.n	8001d10 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d0e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d18:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	377c      	adds	r7, #124	; 0x7c
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd90      	pop	{r4, r7, pc}
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40022100 	.word	0x40022100
 8001d2c:	40022300 	.word	0x40022300
 8001d30:	58026300 	.word	0x58026300
 8001d34:	58026000 	.word	0x58026000
 8001d38:	fffff0e0 	.word	0xfffff0e0

08001d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <__NVIC_SetPriorityGrouping+0x40>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <__NVIC_SetPriorityGrouping+0x40>)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	60d3      	str	r3, [r2, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00
 8001d80:	05fa0000 	.word	0x05fa0000

08001d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <__NVIC_GetPriorityGrouping+0x18>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 0307 	and.w	r3, r3, #7
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	db0b      	blt.n	8001dca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db2:	4909      	ldr	r1, [pc, #36]	; (8001dd8 <__NVIC_EnableIRQ+0x38>)
 8001db4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	f002 021f 	and.w	r2, r2, #31
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000e100 	.word	0xe000e100

08001ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	db0a      	blt.n	8001e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df0:	490d      	ldr	r1, [pc, #52]	; (8001e28 <__NVIC_SetPriority+0x4c>)
 8001df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	0112      	lsls	r2, r2, #4
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	440b      	add	r3, r1
 8001e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e04:	e00a      	b.n	8001e1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e06:	4909      	ldr	r1, [pc, #36]	; (8001e2c <__NVIC_SetPriority+0x50>)
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	3b04      	subs	r3, #4
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	0112      	lsls	r2, r2, #4
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	440b      	add	r3, r1
 8001e1a:	761a      	strb	r2, [r3, #24]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000e100 	.word	0xe000e100
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f1c3 0307 	rsb	r3, r3, #7
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	bf28      	it	cs
 8001e4e:	2304      	movcs	r3, #4
 8001e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3304      	adds	r3, #4
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d902      	bls.n	8001e60 <NVIC_EncodePriority+0x30>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3b03      	subs	r3, #3
 8001e5e:	e000      	b.n	8001e62 <NVIC_EncodePriority+0x32>
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	2201      	movs	r2, #1
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	1e5a      	subs	r2, r3, #1
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	401a      	ands	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e76:	2101      	movs	r1, #1
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	1e59      	subs	r1, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	4313      	orrs	r3, r2
         );
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3724      	adds	r7, #36	; 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea4:	d301      	bcc.n	8001eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00f      	b.n	8001eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <SysTick_Config+0x40>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	f7ff ff90 	bl	8001ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <SysTick_Config+0x40>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec2:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <SysTick_Config+0x40>)
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	e000e010 	.word	0xe000e010

08001ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff2b 	bl	8001d3c <__NVIC_SetPriorityGrouping>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001efc:	f7ff ff42 	bl	8001d84 <__NVIC_GetPriorityGrouping>
 8001f00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f7ff ff92 	bl	8001e30 <NVIC_EncodePriority>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff61 	bl	8001ddc <__NVIC_SetPriority>
}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff35 	bl	8001da0 <__NVIC_EnableIRQ>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ffa4 	bl	8001e94 <SysTick_Config>
 8001f4c:	4603      	mov	r3, r0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e014      	b.n	8001f92 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	791b      	ldrb	r3, [r3, #4]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d105      	bne.n	8001f7e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f009 f993 	bl	800b2a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2202      	movs	r2, #2
 8001f82:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	795b      	ldrb	r3, [r3, #5]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_DAC_ConfigChannel+0x18>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e11d      	b.n	80021f0 <HAL_DAC_ConfigChannel+0x254>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d174      	bne.n	80020b2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001fc8:	f7fe fb94 	bl	80006f4 <HAL_GetTick>
 8001fcc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d134      	bne.n	800203e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001fd4:	e011      	b.n	8001ffa <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001fd6:	f7fe fb8d 	bl	80006f4 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d90a      	bls.n	8001ffa <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f043 0208 	orr.w	r2, r3, #8
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e0fa      	b.n	80021f0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002000:	4b7d      	ldr	r3, [pc, #500]	; (80021f8 <HAL_DAC_ConfigChannel+0x25c>)
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1e6      	bne.n	8001fd6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002008:	2001      	movs	r0, #1
 800200a:	f7fe fb7f 	bl	800070c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	6992      	ldr	r2, [r2, #24]
 8002016:	641a      	str	r2, [r3, #64]	; 0x40
 8002018:	e01e      	b.n	8002058 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800201a:	f7fe fb6b 	bl	80006f4 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d90a      	bls.n	800203e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	f043 0208 	orr.w	r2, r3, #8
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2203      	movs	r2, #3
 8002038:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e0d8      	b.n	80021f0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002044:	2b00      	cmp	r3, #0
 8002046:	dbe8      	blt.n	800201a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002048:	2001      	movs	r0, #1
 800204a:	f7fe fb5f 	bl	800070c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	6992      	ldr	r2, [r2, #24]
 8002056:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	f002 0210 	and.w	r2, r2, #16
 8002068:	f240 30ff 	movw	r0, #1023	; 0x3ff
 800206c:	fa00 f202 	lsl.w	r2, r0, r2
 8002070:	43d2      	mvns	r2, r2
 8002072:	4011      	ands	r1, r2
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	69d0      	ldr	r0, [r2, #28]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	f002 0210 	and.w	r2, r2, #16
 800207e:	fa00 f202 	lsl.w	r2, r0, r2
 8002082:	430a      	orrs	r2, r1
 8002084:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	f002 0210 	and.w	r2, r2, #16
 8002096:	20ff      	movs	r0, #255	; 0xff
 8002098:	fa00 f202 	lsl.w	r2, r0, r2
 800209c:	43d2      	mvns	r2, r2
 800209e:	4011      	ands	r1, r2
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	6a10      	ldr	r0, [r2, #32]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	f002 0210 	and.w	r2, r2, #16
 80020aa:	fa00 f202 	lsl.w	r2, r0, r2
 80020ae:	430a      	orrs	r2, r1
 80020b0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d11d      	bne.n	80020f6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	221f      	movs	r2, #31
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4013      	ands	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2207      	movs	r2, #7
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	4013      	ands	r3, r2
 8002110:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d102      	bne.n	8002120 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	e00f      	b.n	8002140 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d102      	bne.n	800212e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002128:	2301      	movs	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	e008      	b.n	8002140 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002136:	2301      	movs	r3, #1
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	e001      	b.n	8002140 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	431a      	orrs	r2, r3
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	6811      	ldr	r1, [r2, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	f002 0210 	and.w	r2, r2, #16
 800217a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800217e:	fa00 f202 	lsl.w	r2, r0, r2
 8002182:	43d2      	mvns	r2, r2
 8002184:	400a      	ands	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	f640 72fe 	movw	r2, #4094	; 0xffe
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4013      	ands	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	6811      	ldr	r1, [r2, #0]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	f002 0210 	and.w	r2, r2, #16
 80021d6:	20c0      	movs	r0, #192	; 0xc0
 80021d8:	fa00 f202 	lsl.w	r2, r0, r2
 80021dc:	43d2      	mvns	r2, r2
 80021de:	400a      	ands	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3720      	adds	r7, #32
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20008000 	.word	0x20008000

080021fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7fe fa76 	bl	80006f4 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e316      	b.n	8002842 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a66      	ldr	r2, [pc, #408]	; (80023b4 <HAL_DMA_Init+0x1b8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d04a      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a65      	ldr	r2, [pc, #404]	; (80023b8 <HAL_DMA_Init+0x1bc>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d045      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a63      	ldr	r2, [pc, #396]	; (80023bc <HAL_DMA_Init+0x1c0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d040      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a62      	ldr	r2, [pc, #392]	; (80023c0 <HAL_DMA_Init+0x1c4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d03b      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a60      	ldr	r2, [pc, #384]	; (80023c4 <HAL_DMA_Init+0x1c8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d036      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a5f      	ldr	r2, [pc, #380]	; (80023c8 <HAL_DMA_Init+0x1cc>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d031      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a5d      	ldr	r2, [pc, #372]	; (80023cc <HAL_DMA_Init+0x1d0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d02c      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a5c      	ldr	r2, [pc, #368]	; (80023d0 <HAL_DMA_Init+0x1d4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d027      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a5a      	ldr	r2, [pc, #360]	; (80023d4 <HAL_DMA_Init+0x1d8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d022      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a59      	ldr	r2, [pc, #356]	; (80023d8 <HAL_DMA_Init+0x1dc>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d01d      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a57      	ldr	r2, [pc, #348]	; (80023dc <HAL_DMA_Init+0x1e0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d018      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a56      	ldr	r2, [pc, #344]	; (80023e0 <HAL_DMA_Init+0x1e4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d013      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a54      	ldr	r2, [pc, #336]	; (80023e4 <HAL_DMA_Init+0x1e8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00e      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a53      	ldr	r2, [pc, #332]	; (80023e8 <HAL_DMA_Init+0x1ec>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d009      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a51      	ldr	r2, [pc, #324]	; (80023ec <HAL_DMA_Init+0x1f0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_DMA_Init+0xb8>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a50      	ldr	r2, [pc, #320]	; (80023f0 <HAL_DMA_Init+0x1f4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_DMA_Init+0xbc>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_DMA_Init+0xbe>
 80022b8:	2300      	movs	r3, #0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 813b 	beq.w	8002536 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a37      	ldr	r2, [pc, #220]	; (80023b4 <HAL_DMA_Init+0x1b8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d04a      	beq.n	8002370 <HAL_DMA_Init+0x174>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a36      	ldr	r2, [pc, #216]	; (80023b8 <HAL_DMA_Init+0x1bc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d045      	beq.n	8002370 <HAL_DMA_Init+0x174>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a34      	ldr	r2, [pc, #208]	; (80023bc <HAL_DMA_Init+0x1c0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d040      	beq.n	8002370 <HAL_DMA_Init+0x174>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a33      	ldr	r2, [pc, #204]	; (80023c0 <HAL_DMA_Init+0x1c4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d03b      	beq.n	8002370 <HAL_DMA_Init+0x174>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a31      	ldr	r2, [pc, #196]	; (80023c4 <HAL_DMA_Init+0x1c8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d036      	beq.n	8002370 <HAL_DMA_Init+0x174>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a30      	ldr	r2, [pc, #192]	; (80023c8 <HAL_DMA_Init+0x1cc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d031      	beq.n	8002370 <HAL_DMA_Init+0x174>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a2e      	ldr	r2, [pc, #184]	; (80023cc <HAL_DMA_Init+0x1d0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d02c      	beq.n	8002370 <HAL_DMA_Init+0x174>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a2d      	ldr	r2, [pc, #180]	; (80023d0 <HAL_DMA_Init+0x1d4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d027      	beq.n	8002370 <HAL_DMA_Init+0x174>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a2b      	ldr	r2, [pc, #172]	; (80023d4 <HAL_DMA_Init+0x1d8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d022      	beq.n	8002370 <HAL_DMA_Init+0x174>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a2a      	ldr	r2, [pc, #168]	; (80023d8 <HAL_DMA_Init+0x1dc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d01d      	beq.n	8002370 <HAL_DMA_Init+0x174>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a28      	ldr	r2, [pc, #160]	; (80023dc <HAL_DMA_Init+0x1e0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d018      	beq.n	8002370 <HAL_DMA_Init+0x174>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a27      	ldr	r2, [pc, #156]	; (80023e0 <HAL_DMA_Init+0x1e4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d013      	beq.n	8002370 <HAL_DMA_Init+0x174>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a25      	ldr	r2, [pc, #148]	; (80023e4 <HAL_DMA_Init+0x1e8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00e      	beq.n	8002370 <HAL_DMA_Init+0x174>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a24      	ldr	r2, [pc, #144]	; (80023e8 <HAL_DMA_Init+0x1ec>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d009      	beq.n	8002370 <HAL_DMA_Init+0x174>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a22      	ldr	r2, [pc, #136]	; (80023ec <HAL_DMA_Init+0x1f0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d004      	beq.n	8002370 <HAL_DMA_Init+0x174>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a21      	ldr	r2, [pc, #132]	; (80023f0 <HAL_DMA_Init+0x1f4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d108      	bne.n	8002382 <HAL_DMA_Init+0x186>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	e007      	b.n	8002392 <HAL_DMA_Init+0x196>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	f022 0201 	bic.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002392:	e02f      	b.n	80023f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002394:	f7fe f9ae 	bl	80006f4 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b05      	cmp	r3, #5
 80023a0:	d928      	bls.n	80023f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2203      	movs	r2, #3
 80023ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e246      	b.n	8002842 <HAL_DMA_Init+0x646>
 80023b4:	40020010 	.word	0x40020010
 80023b8:	40020028 	.word	0x40020028
 80023bc:	40020040 	.word	0x40020040
 80023c0:	40020058 	.word	0x40020058
 80023c4:	40020070 	.word	0x40020070
 80023c8:	40020088 	.word	0x40020088
 80023cc:	400200a0 	.word	0x400200a0
 80023d0:	400200b8 	.word	0x400200b8
 80023d4:	40020410 	.word	0x40020410
 80023d8:	40020428 	.word	0x40020428
 80023dc:	40020440 	.word	0x40020440
 80023e0:	40020458 	.word	0x40020458
 80023e4:	40020470 	.word	0x40020470
 80023e8:	40020488 	.word	0x40020488
 80023ec:	400204a0 	.word	0x400204a0
 80023f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1c8      	bne.n	8002394 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4b83      	ldr	r3, [pc, #524]	; (800261c <HAL_DMA_Init+0x420>)
 800240e:	4013      	ands	r3, r2
 8002410:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800241a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002426:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002432:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	2b04      	cmp	r3, #4
 8002446:	d107      	bne.n	8002458 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	4313      	orrs	r3, r2
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002458:	4b71      	ldr	r3, [pc, #452]	; (8002620 <HAL_DMA_Init+0x424>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b71      	ldr	r3, [pc, #452]	; (8002624 <HAL_DMA_Init+0x428>)
 800245e:	4013      	ands	r3, r2
 8002460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002464:	d328      	bcc.n	80024b8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b28      	cmp	r3, #40	; 0x28
 800246c:	d903      	bls.n	8002476 <HAL_DMA_Init+0x27a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b2e      	cmp	r3, #46	; 0x2e
 8002474:	d917      	bls.n	80024a6 <HAL_DMA_Init+0x2aa>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b3e      	cmp	r3, #62	; 0x3e
 800247c:	d903      	bls.n	8002486 <HAL_DMA_Init+0x28a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b42      	cmp	r3, #66	; 0x42
 8002484:	d90f      	bls.n	80024a6 <HAL_DMA_Init+0x2aa>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b46      	cmp	r3, #70	; 0x46
 800248c:	d903      	bls.n	8002496 <HAL_DMA_Init+0x29a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b48      	cmp	r3, #72	; 0x48
 8002494:	d907      	bls.n	80024a6 <HAL_DMA_Init+0x2aa>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b4e      	cmp	r3, #78	; 0x4e
 800249c:	d905      	bls.n	80024aa <HAL_DMA_Init+0x2ae>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b52      	cmp	r3, #82	; 0x52
 80024a4:	d801      	bhi.n	80024aa <HAL_DMA_Init+0x2ae>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_DMA_Init+0x2b0>
 80024aa:	2300      	movs	r3, #0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f023 0307 	bic.w	r3, r3, #7
 80024ce:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d117      	bne.n	8002512 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00e      	beq.n	8002512 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f002 fb31 	bl	8004b5c <DMA_CheckFifoParam>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2240      	movs	r2, #64	; 0x40
 8002504:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e197      	b.n	8002842 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f002 fa6c 	bl	80049f8 <DMA_CalcBaseAndBitshift>
 8002520:	4603      	mov	r3, r0
 8002522:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	223f      	movs	r2, #63	; 0x3f
 800252e:	409a      	lsls	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	e0cd      	b.n	80026d2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a3b      	ldr	r2, [pc, #236]	; (8002628 <HAL_DMA_Init+0x42c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d022      	beq.n	8002586 <HAL_DMA_Init+0x38a>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a39      	ldr	r2, [pc, #228]	; (800262c <HAL_DMA_Init+0x430>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d01d      	beq.n	8002586 <HAL_DMA_Init+0x38a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a38      	ldr	r2, [pc, #224]	; (8002630 <HAL_DMA_Init+0x434>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d018      	beq.n	8002586 <HAL_DMA_Init+0x38a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a36      	ldr	r2, [pc, #216]	; (8002634 <HAL_DMA_Init+0x438>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d013      	beq.n	8002586 <HAL_DMA_Init+0x38a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a35      	ldr	r2, [pc, #212]	; (8002638 <HAL_DMA_Init+0x43c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d00e      	beq.n	8002586 <HAL_DMA_Init+0x38a>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a33      	ldr	r2, [pc, #204]	; (800263c <HAL_DMA_Init+0x440>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d009      	beq.n	8002586 <HAL_DMA_Init+0x38a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a32      	ldr	r2, [pc, #200]	; (8002640 <HAL_DMA_Init+0x444>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d004      	beq.n	8002586 <HAL_DMA_Init+0x38a>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a30      	ldr	r2, [pc, #192]	; (8002644 <HAL_DMA_Init+0x448>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d101      	bne.n	800258a <HAL_DMA_Init+0x38e>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_DMA_Init+0x390>
 800258a:	2300      	movs	r3, #0
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 8097 	beq.w	80026c0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a24      	ldr	r2, [pc, #144]	; (8002628 <HAL_DMA_Init+0x42c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d021      	beq.n	80025e0 <HAL_DMA_Init+0x3e4>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a22      	ldr	r2, [pc, #136]	; (800262c <HAL_DMA_Init+0x430>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01c      	beq.n	80025e0 <HAL_DMA_Init+0x3e4>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a21      	ldr	r2, [pc, #132]	; (8002630 <HAL_DMA_Init+0x434>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d017      	beq.n	80025e0 <HAL_DMA_Init+0x3e4>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1f      	ldr	r2, [pc, #124]	; (8002634 <HAL_DMA_Init+0x438>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d012      	beq.n	80025e0 <HAL_DMA_Init+0x3e4>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <HAL_DMA_Init+0x43c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00d      	beq.n	80025e0 <HAL_DMA_Init+0x3e4>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a1c      	ldr	r2, [pc, #112]	; (800263c <HAL_DMA_Init+0x440>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d008      	beq.n	80025e0 <HAL_DMA_Init+0x3e4>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1b      	ldr	r2, [pc, #108]	; (8002640 <HAL_DMA_Init+0x444>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d003      	beq.n	80025e0 <HAL_DMA_Init+0x3e4>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a19      	ldr	r2, [pc, #100]	; (8002644 <HAL_DMA_Init+0x448>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2202      	movs	r2, #2
 80025ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_DMA_Init+0x44c>)
 80025fe:	4013      	ands	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b40      	cmp	r3, #64	; 0x40
 8002608:	d020      	beq.n	800264c <HAL_DMA_Init+0x450>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b80      	cmp	r3, #128	; 0x80
 8002610:	d102      	bne.n	8002618 <HAL_DMA_Init+0x41c>
 8002612:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002616:	e01a      	b.n	800264e <HAL_DMA_Init+0x452>
 8002618:	2300      	movs	r3, #0
 800261a:	e018      	b.n	800264e <HAL_DMA_Init+0x452>
 800261c:	fe10803f 	.word	0xfe10803f
 8002620:	5c001000 	.word	0x5c001000
 8002624:	ffff0000 	.word	0xffff0000
 8002628:	58025408 	.word	0x58025408
 800262c:	5802541c 	.word	0x5802541c
 8002630:	58025430 	.word	0x58025430
 8002634:	58025444 	.word	0x58025444
 8002638:	58025458 	.word	0x58025458
 800263c:	5802546c 	.word	0x5802546c
 8002640:	58025480 	.word	0x58025480
 8002644:	58025494 	.word	0x58025494
 8002648:	fffe000f 	.word	0xfffe000f
 800264c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68d2      	ldr	r2, [r2, #12]
 8002652:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002654:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800265c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002664:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800266c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002674:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800267c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	4b6e      	ldr	r3, [pc, #440]	; (800284c <HAL_DMA_Init+0x650>)
 8002694:	4413      	add	r3, r2
 8002696:	4a6e      	ldr	r2, [pc, #440]	; (8002850 <HAL_DMA_Init+0x654>)
 8002698:	fba2 2303 	umull	r2, r3, r2, r3
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	009a      	lsls	r2, r3, #2
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f002 f9a7 	bl	80049f8 <DMA_CalcBaseAndBitshift>
 80026aa:	4603      	mov	r3, r0
 80026ac:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	2201      	movs	r2, #1
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	e008      	b.n	80026d2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2240      	movs	r2, #64	; 0x40
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2203      	movs	r2, #3
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0b7      	b.n	8002842 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a5f      	ldr	r2, [pc, #380]	; (8002854 <HAL_DMA_Init+0x658>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d072      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a5d      	ldr	r2, [pc, #372]	; (8002858 <HAL_DMA_Init+0x65c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d06d      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a5c      	ldr	r2, [pc, #368]	; (800285c <HAL_DMA_Init+0x660>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d068      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a5a      	ldr	r2, [pc, #360]	; (8002860 <HAL_DMA_Init+0x664>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d063      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a59      	ldr	r2, [pc, #356]	; (8002864 <HAL_DMA_Init+0x668>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d05e      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a57      	ldr	r2, [pc, #348]	; (8002868 <HAL_DMA_Init+0x66c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d059      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a56      	ldr	r2, [pc, #344]	; (800286c <HAL_DMA_Init+0x670>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d054      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a54      	ldr	r2, [pc, #336]	; (8002870 <HAL_DMA_Init+0x674>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d04f      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a53      	ldr	r2, [pc, #332]	; (8002874 <HAL_DMA_Init+0x678>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d04a      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a51      	ldr	r2, [pc, #324]	; (8002878 <HAL_DMA_Init+0x67c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d045      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a50      	ldr	r2, [pc, #320]	; (800287c <HAL_DMA_Init+0x680>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d040      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a4e      	ldr	r2, [pc, #312]	; (8002880 <HAL_DMA_Init+0x684>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d03b      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a4d      	ldr	r2, [pc, #308]	; (8002884 <HAL_DMA_Init+0x688>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d036      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a4b      	ldr	r2, [pc, #300]	; (8002888 <HAL_DMA_Init+0x68c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d031      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a4a      	ldr	r2, [pc, #296]	; (800288c <HAL_DMA_Init+0x690>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d02c      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a48      	ldr	r2, [pc, #288]	; (8002890 <HAL_DMA_Init+0x694>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d027      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a47      	ldr	r2, [pc, #284]	; (8002894 <HAL_DMA_Init+0x698>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d022      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a45      	ldr	r2, [pc, #276]	; (8002898 <HAL_DMA_Init+0x69c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d01d      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a44      	ldr	r2, [pc, #272]	; (800289c <HAL_DMA_Init+0x6a0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d018      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a42      	ldr	r2, [pc, #264]	; (80028a0 <HAL_DMA_Init+0x6a4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d013      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a41      	ldr	r2, [pc, #260]	; (80028a4 <HAL_DMA_Init+0x6a8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00e      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a3f      	ldr	r2, [pc, #252]	; (80028a8 <HAL_DMA_Init+0x6ac>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d009      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a3e      	ldr	r2, [pc, #248]	; (80028ac <HAL_DMA_Init+0x6b0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d004      	beq.n	80027c2 <HAL_DMA_Init+0x5c6>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a3c      	ldr	r2, [pc, #240]	; (80028b0 <HAL_DMA_Init+0x6b4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d101      	bne.n	80027c6 <HAL_DMA_Init+0x5ca>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_DMA_Init+0x5cc>
 80027c6:	2300      	movs	r3, #0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d032      	beq.n	8002832 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f002 fa41 	bl	8004c54 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b80      	cmp	r3, #128	; 0x80
 80027d8:	d102      	bne.n	80027e0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6852      	ldr	r2, [r2, #4]
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80027f4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d010      	beq.n	8002820 <HAL_DMA_Init+0x624>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b08      	cmp	r3, #8
 8002804:	d80c      	bhi.n	8002820 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f002 fabe 	bl	8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	e008      	b.n	8002832 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	a7fdabf8 	.word	0xa7fdabf8
 8002850:	cccccccd 	.word	0xcccccccd
 8002854:	40020010 	.word	0x40020010
 8002858:	40020028 	.word	0x40020028
 800285c:	40020040 	.word	0x40020040
 8002860:	40020058 	.word	0x40020058
 8002864:	40020070 	.word	0x40020070
 8002868:	40020088 	.word	0x40020088
 800286c:	400200a0 	.word	0x400200a0
 8002870:	400200b8 	.word	0x400200b8
 8002874:	40020410 	.word	0x40020410
 8002878:	40020428 	.word	0x40020428
 800287c:	40020440 	.word	0x40020440
 8002880:	40020458 	.word	0x40020458
 8002884:	40020470 	.word	0x40020470
 8002888:	40020488 	.word	0x40020488
 800288c:	400204a0 	.word	0x400204a0
 8002890:	400204b8 	.word	0x400204b8
 8002894:	58025408 	.word	0x58025408
 8002898:	5802541c 	.word	0x5802541c
 800289c:	58025430 	.word	0x58025430
 80028a0:	58025444 	.word	0x58025444
 80028a4:	58025458 	.word	0x58025458
 80028a8:	5802546c 	.word	0x5802546c
 80028ac:	58025480 	.word	0x58025480
 80028b0:	58025494 	.word	0x58025494

080028b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e226      	b.n	8002d1e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_DMA_Start_IT+0x2a>
 80028da:	2302      	movs	r3, #2
 80028dc:	e21f      	b.n	8002d1e <HAL_DMA_Start_IT+0x46a>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	f040 820a 	bne.w	8002d08 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a68      	ldr	r2, [pc, #416]	; (8002aa8 <HAL_DMA_Start_IT+0x1f4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d04a      	beq.n	80029a2 <HAL_DMA_Start_IT+0xee>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a66      	ldr	r2, [pc, #408]	; (8002aac <HAL_DMA_Start_IT+0x1f8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d045      	beq.n	80029a2 <HAL_DMA_Start_IT+0xee>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a65      	ldr	r2, [pc, #404]	; (8002ab0 <HAL_DMA_Start_IT+0x1fc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d040      	beq.n	80029a2 <HAL_DMA_Start_IT+0xee>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a63      	ldr	r2, [pc, #396]	; (8002ab4 <HAL_DMA_Start_IT+0x200>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d03b      	beq.n	80029a2 <HAL_DMA_Start_IT+0xee>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a62      	ldr	r2, [pc, #392]	; (8002ab8 <HAL_DMA_Start_IT+0x204>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d036      	beq.n	80029a2 <HAL_DMA_Start_IT+0xee>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a60      	ldr	r2, [pc, #384]	; (8002abc <HAL_DMA_Start_IT+0x208>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d031      	beq.n	80029a2 <HAL_DMA_Start_IT+0xee>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a5f      	ldr	r2, [pc, #380]	; (8002ac0 <HAL_DMA_Start_IT+0x20c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d02c      	beq.n	80029a2 <HAL_DMA_Start_IT+0xee>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a5d      	ldr	r2, [pc, #372]	; (8002ac4 <HAL_DMA_Start_IT+0x210>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d027      	beq.n	80029a2 <HAL_DMA_Start_IT+0xee>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a5c      	ldr	r2, [pc, #368]	; (8002ac8 <HAL_DMA_Start_IT+0x214>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d022      	beq.n	80029a2 <HAL_DMA_Start_IT+0xee>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a5a      	ldr	r2, [pc, #360]	; (8002acc <HAL_DMA_Start_IT+0x218>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d01d      	beq.n	80029a2 <HAL_DMA_Start_IT+0xee>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a59      	ldr	r2, [pc, #356]	; (8002ad0 <HAL_DMA_Start_IT+0x21c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d018      	beq.n	80029a2 <HAL_DMA_Start_IT+0xee>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a57      	ldr	r2, [pc, #348]	; (8002ad4 <HAL_DMA_Start_IT+0x220>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_DMA_Start_IT+0xee>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a56      	ldr	r2, [pc, #344]	; (8002ad8 <HAL_DMA_Start_IT+0x224>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00e      	beq.n	80029a2 <HAL_DMA_Start_IT+0xee>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a54      	ldr	r2, [pc, #336]	; (8002adc <HAL_DMA_Start_IT+0x228>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d009      	beq.n	80029a2 <HAL_DMA_Start_IT+0xee>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a53      	ldr	r2, [pc, #332]	; (8002ae0 <HAL_DMA_Start_IT+0x22c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d004      	beq.n	80029a2 <HAL_DMA_Start_IT+0xee>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a51      	ldr	r2, [pc, #324]	; (8002ae4 <HAL_DMA_Start_IT+0x230>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d108      	bne.n	80029b4 <HAL_DMA_Start_IT+0x100>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	f022 0201 	bic.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	e007      	b.n	80029c4 <HAL_DMA_Start_IT+0x110>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f001 fe68 	bl	80046a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a34      	ldr	r2, [pc, #208]	; (8002aa8 <HAL_DMA_Start_IT+0x1f4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d04a      	beq.n	8002a70 <HAL_DMA_Start_IT+0x1bc>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a33      	ldr	r2, [pc, #204]	; (8002aac <HAL_DMA_Start_IT+0x1f8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d045      	beq.n	8002a70 <HAL_DMA_Start_IT+0x1bc>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a31      	ldr	r2, [pc, #196]	; (8002ab0 <HAL_DMA_Start_IT+0x1fc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d040      	beq.n	8002a70 <HAL_DMA_Start_IT+0x1bc>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a30      	ldr	r2, [pc, #192]	; (8002ab4 <HAL_DMA_Start_IT+0x200>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d03b      	beq.n	8002a70 <HAL_DMA_Start_IT+0x1bc>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a2e      	ldr	r2, [pc, #184]	; (8002ab8 <HAL_DMA_Start_IT+0x204>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d036      	beq.n	8002a70 <HAL_DMA_Start_IT+0x1bc>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a2d      	ldr	r2, [pc, #180]	; (8002abc <HAL_DMA_Start_IT+0x208>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d031      	beq.n	8002a70 <HAL_DMA_Start_IT+0x1bc>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a2b      	ldr	r2, [pc, #172]	; (8002ac0 <HAL_DMA_Start_IT+0x20c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d02c      	beq.n	8002a70 <HAL_DMA_Start_IT+0x1bc>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a2a      	ldr	r2, [pc, #168]	; (8002ac4 <HAL_DMA_Start_IT+0x210>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d027      	beq.n	8002a70 <HAL_DMA_Start_IT+0x1bc>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a28      	ldr	r2, [pc, #160]	; (8002ac8 <HAL_DMA_Start_IT+0x214>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d022      	beq.n	8002a70 <HAL_DMA_Start_IT+0x1bc>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a27      	ldr	r2, [pc, #156]	; (8002acc <HAL_DMA_Start_IT+0x218>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d01d      	beq.n	8002a70 <HAL_DMA_Start_IT+0x1bc>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a25      	ldr	r2, [pc, #148]	; (8002ad0 <HAL_DMA_Start_IT+0x21c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d018      	beq.n	8002a70 <HAL_DMA_Start_IT+0x1bc>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a24      	ldr	r2, [pc, #144]	; (8002ad4 <HAL_DMA_Start_IT+0x220>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d013      	beq.n	8002a70 <HAL_DMA_Start_IT+0x1bc>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <HAL_DMA_Start_IT+0x224>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00e      	beq.n	8002a70 <HAL_DMA_Start_IT+0x1bc>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a21      	ldr	r2, [pc, #132]	; (8002adc <HAL_DMA_Start_IT+0x228>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d009      	beq.n	8002a70 <HAL_DMA_Start_IT+0x1bc>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1f      	ldr	r2, [pc, #124]	; (8002ae0 <HAL_DMA_Start_IT+0x22c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d004      	beq.n	8002a70 <HAL_DMA_Start_IT+0x1bc>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <HAL_DMA_Start_IT+0x230>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_DMA_Start_IT+0x1c0>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <HAL_DMA_Start_IT+0x1c2>
 8002a74:	2300      	movs	r3, #0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d036      	beq.n	8002ae8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	f022 021e 	bic.w	r2, r2, #30
 8002a88:	f042 0216 	orr.w	r2, r2, #22
 8002a8c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d03e      	beq.n	8002b14 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	f042 0208 	orr.w	r2, r2, #8
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	e035      	b.n	8002b14 <HAL_DMA_Start_IT+0x260>
 8002aa8:	40020010 	.word	0x40020010
 8002aac:	40020028 	.word	0x40020028
 8002ab0:	40020040 	.word	0x40020040
 8002ab4:	40020058 	.word	0x40020058
 8002ab8:	40020070 	.word	0x40020070
 8002abc:	40020088 	.word	0x40020088
 8002ac0:	400200a0 	.word	0x400200a0
 8002ac4:	400200b8 	.word	0x400200b8
 8002ac8:	40020410 	.word	0x40020410
 8002acc:	40020428 	.word	0x40020428
 8002ad0:	40020440 	.word	0x40020440
 8002ad4:	40020458 	.word	0x40020458
 8002ad8:	40020470 	.word	0x40020470
 8002adc:	40020488 	.word	0x40020488
 8002ae0:	400204a0 	.word	0x400204a0
 8002ae4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	f022 020e 	bic.w	r2, r2, #14
 8002af6:	f042 020a 	orr.w	r2, r2, #10
 8002afa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	f042 0204 	orr.w	r2, r2, #4
 8002b12:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a83      	ldr	r2, [pc, #524]	; (8002d28 <HAL_DMA_Start_IT+0x474>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d072      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a82      	ldr	r2, [pc, #520]	; (8002d2c <HAL_DMA_Start_IT+0x478>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d06d      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a80      	ldr	r2, [pc, #512]	; (8002d30 <HAL_DMA_Start_IT+0x47c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d068      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a7f      	ldr	r2, [pc, #508]	; (8002d34 <HAL_DMA_Start_IT+0x480>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d063      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a7d      	ldr	r2, [pc, #500]	; (8002d38 <HAL_DMA_Start_IT+0x484>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d05e      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a7c      	ldr	r2, [pc, #496]	; (8002d3c <HAL_DMA_Start_IT+0x488>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d059      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a7a      	ldr	r2, [pc, #488]	; (8002d40 <HAL_DMA_Start_IT+0x48c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d054      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a79      	ldr	r2, [pc, #484]	; (8002d44 <HAL_DMA_Start_IT+0x490>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d04f      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a77      	ldr	r2, [pc, #476]	; (8002d48 <HAL_DMA_Start_IT+0x494>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d04a      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a76      	ldr	r2, [pc, #472]	; (8002d4c <HAL_DMA_Start_IT+0x498>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d045      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a74      	ldr	r2, [pc, #464]	; (8002d50 <HAL_DMA_Start_IT+0x49c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d040      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a73      	ldr	r2, [pc, #460]	; (8002d54 <HAL_DMA_Start_IT+0x4a0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d03b      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a71      	ldr	r2, [pc, #452]	; (8002d58 <HAL_DMA_Start_IT+0x4a4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d036      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a70      	ldr	r2, [pc, #448]	; (8002d5c <HAL_DMA_Start_IT+0x4a8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d031      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a6e      	ldr	r2, [pc, #440]	; (8002d60 <HAL_DMA_Start_IT+0x4ac>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d02c      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a6d      	ldr	r2, [pc, #436]	; (8002d64 <HAL_DMA_Start_IT+0x4b0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d027      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a6b      	ldr	r2, [pc, #428]	; (8002d68 <HAL_DMA_Start_IT+0x4b4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d022      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a6a      	ldr	r2, [pc, #424]	; (8002d6c <HAL_DMA_Start_IT+0x4b8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d01d      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a68      	ldr	r2, [pc, #416]	; (8002d70 <HAL_DMA_Start_IT+0x4bc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d018      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a67      	ldr	r2, [pc, #412]	; (8002d74 <HAL_DMA_Start_IT+0x4c0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d013      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a65      	ldr	r2, [pc, #404]	; (8002d78 <HAL_DMA_Start_IT+0x4c4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00e      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a64      	ldr	r2, [pc, #400]	; (8002d7c <HAL_DMA_Start_IT+0x4c8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d009      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a62      	ldr	r2, [pc, #392]	; (8002d80 <HAL_DMA_Start_IT+0x4cc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d004      	beq.n	8002c04 <HAL_DMA_Start_IT+0x350>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a61      	ldr	r2, [pc, #388]	; (8002d84 <HAL_DMA_Start_IT+0x4d0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d101      	bne.n	8002c08 <HAL_DMA_Start_IT+0x354>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <HAL_DMA_Start_IT+0x356>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01a      	beq.n	8002c44 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c2a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d007      	beq.n	8002c44 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c42:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a37      	ldr	r2, [pc, #220]	; (8002d28 <HAL_DMA_Start_IT+0x474>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d04a      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x430>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a36      	ldr	r2, [pc, #216]	; (8002d2c <HAL_DMA_Start_IT+0x478>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d045      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x430>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a34      	ldr	r2, [pc, #208]	; (8002d30 <HAL_DMA_Start_IT+0x47c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d040      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x430>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a33      	ldr	r2, [pc, #204]	; (8002d34 <HAL_DMA_Start_IT+0x480>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d03b      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x430>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a31      	ldr	r2, [pc, #196]	; (8002d38 <HAL_DMA_Start_IT+0x484>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d036      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x430>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a30      	ldr	r2, [pc, #192]	; (8002d3c <HAL_DMA_Start_IT+0x488>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d031      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x430>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a2e      	ldr	r2, [pc, #184]	; (8002d40 <HAL_DMA_Start_IT+0x48c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d02c      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x430>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a2d      	ldr	r2, [pc, #180]	; (8002d44 <HAL_DMA_Start_IT+0x490>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d027      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x430>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a2b      	ldr	r2, [pc, #172]	; (8002d48 <HAL_DMA_Start_IT+0x494>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d022      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x430>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a2a      	ldr	r2, [pc, #168]	; (8002d4c <HAL_DMA_Start_IT+0x498>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d01d      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x430>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a28      	ldr	r2, [pc, #160]	; (8002d50 <HAL_DMA_Start_IT+0x49c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d018      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x430>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a27      	ldr	r2, [pc, #156]	; (8002d54 <HAL_DMA_Start_IT+0x4a0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d013      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x430>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a25      	ldr	r2, [pc, #148]	; (8002d58 <HAL_DMA_Start_IT+0x4a4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00e      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x430>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a24      	ldr	r2, [pc, #144]	; (8002d5c <HAL_DMA_Start_IT+0x4a8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d009      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x430>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a22      	ldr	r2, [pc, #136]	; (8002d60 <HAL_DMA_Start_IT+0x4ac>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d004      	beq.n	8002ce4 <HAL_DMA_Start_IT+0x430>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a21      	ldr	r2, [pc, #132]	; (8002d64 <HAL_DMA_Start_IT+0x4b0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d108      	bne.n	8002cf6 <HAL_DMA_Start_IT+0x442>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	e012      	b.n	8002d1c <HAL_DMA_Start_IT+0x468>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	f042 0201 	orr.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e009      	b.n	8002d1c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40020010 	.word	0x40020010
 8002d2c:	40020028 	.word	0x40020028
 8002d30:	40020040 	.word	0x40020040
 8002d34:	40020058 	.word	0x40020058
 8002d38:	40020070 	.word	0x40020070
 8002d3c:	40020088 	.word	0x40020088
 8002d40:	400200a0 	.word	0x400200a0
 8002d44:	400200b8 	.word	0x400200b8
 8002d48:	40020410 	.word	0x40020410
 8002d4c:	40020428 	.word	0x40020428
 8002d50:	40020440 	.word	0x40020440
 8002d54:	40020458 	.word	0x40020458
 8002d58:	40020470 	.word	0x40020470
 8002d5c:	40020488 	.word	0x40020488
 8002d60:	400204a0 	.word	0x400204a0
 8002d64:	400204b8 	.word	0x400204b8
 8002d68:	58025408 	.word	0x58025408
 8002d6c:	5802541c 	.word	0x5802541c
 8002d70:	58025430 	.word	0x58025430
 8002d74:	58025444 	.word	0x58025444
 8002d78:	58025458 	.word	0x58025458
 8002d7c:	5802546c 	.word	0x5802546c
 8002d80:	58025480 	.word	0x58025480
 8002d84:	58025494 	.word	0x58025494

08002d88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002d90:	f7fd fcb0 	bl	80006f4 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e2dc      	b.n	800335a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d008      	beq.n	8002dbe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2280      	movs	r2, #128	; 0x80
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e2cd      	b.n	800335a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a76      	ldr	r2, [pc, #472]	; (8002f9c <HAL_DMA_Abort+0x214>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d04a      	beq.n	8002e5e <HAL_DMA_Abort+0xd6>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a74      	ldr	r2, [pc, #464]	; (8002fa0 <HAL_DMA_Abort+0x218>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d045      	beq.n	8002e5e <HAL_DMA_Abort+0xd6>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a73      	ldr	r2, [pc, #460]	; (8002fa4 <HAL_DMA_Abort+0x21c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d040      	beq.n	8002e5e <HAL_DMA_Abort+0xd6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a71      	ldr	r2, [pc, #452]	; (8002fa8 <HAL_DMA_Abort+0x220>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d03b      	beq.n	8002e5e <HAL_DMA_Abort+0xd6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a70      	ldr	r2, [pc, #448]	; (8002fac <HAL_DMA_Abort+0x224>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d036      	beq.n	8002e5e <HAL_DMA_Abort+0xd6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a6e      	ldr	r2, [pc, #440]	; (8002fb0 <HAL_DMA_Abort+0x228>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d031      	beq.n	8002e5e <HAL_DMA_Abort+0xd6>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6d      	ldr	r2, [pc, #436]	; (8002fb4 <HAL_DMA_Abort+0x22c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d02c      	beq.n	8002e5e <HAL_DMA_Abort+0xd6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a6b      	ldr	r2, [pc, #428]	; (8002fb8 <HAL_DMA_Abort+0x230>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d027      	beq.n	8002e5e <HAL_DMA_Abort+0xd6>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a6a      	ldr	r2, [pc, #424]	; (8002fbc <HAL_DMA_Abort+0x234>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d022      	beq.n	8002e5e <HAL_DMA_Abort+0xd6>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a68      	ldr	r2, [pc, #416]	; (8002fc0 <HAL_DMA_Abort+0x238>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01d      	beq.n	8002e5e <HAL_DMA_Abort+0xd6>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a67      	ldr	r2, [pc, #412]	; (8002fc4 <HAL_DMA_Abort+0x23c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d018      	beq.n	8002e5e <HAL_DMA_Abort+0xd6>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a65      	ldr	r2, [pc, #404]	; (8002fc8 <HAL_DMA_Abort+0x240>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_DMA_Abort+0xd6>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a64      	ldr	r2, [pc, #400]	; (8002fcc <HAL_DMA_Abort+0x244>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00e      	beq.n	8002e5e <HAL_DMA_Abort+0xd6>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a62      	ldr	r2, [pc, #392]	; (8002fd0 <HAL_DMA_Abort+0x248>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d009      	beq.n	8002e5e <HAL_DMA_Abort+0xd6>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a61      	ldr	r2, [pc, #388]	; (8002fd4 <HAL_DMA_Abort+0x24c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_DMA_Abort+0xd6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a5f      	ldr	r2, [pc, #380]	; (8002fd8 <HAL_DMA_Abort+0x250>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <HAL_DMA_Abort+0xda>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_DMA_Abort+0xdc>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d013      	beq.n	8002e90 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	f022 021e 	bic.w	r2, r2, #30
 8002e76:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	6952      	ldr	r2, [r2, #20]
 8002e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e86:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	e00a      	b.n	8002ea6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	f022 020e 	bic.w	r2, r2, #14
 8002e9e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a3c      	ldr	r2, [pc, #240]	; (8002f9c <HAL_DMA_Abort+0x214>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d072      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a3a      	ldr	r2, [pc, #232]	; (8002fa0 <HAL_DMA_Abort+0x218>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d06d      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a39      	ldr	r2, [pc, #228]	; (8002fa4 <HAL_DMA_Abort+0x21c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d068      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a37      	ldr	r2, [pc, #220]	; (8002fa8 <HAL_DMA_Abort+0x220>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d063      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a36      	ldr	r2, [pc, #216]	; (8002fac <HAL_DMA_Abort+0x224>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d05e      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a34      	ldr	r2, [pc, #208]	; (8002fb0 <HAL_DMA_Abort+0x228>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d059      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a33      	ldr	r2, [pc, #204]	; (8002fb4 <HAL_DMA_Abort+0x22c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d054      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a31      	ldr	r2, [pc, #196]	; (8002fb8 <HAL_DMA_Abort+0x230>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d04f      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a30      	ldr	r2, [pc, #192]	; (8002fbc <HAL_DMA_Abort+0x234>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d04a      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2e      	ldr	r2, [pc, #184]	; (8002fc0 <HAL_DMA_Abort+0x238>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d045      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a2d      	ldr	r2, [pc, #180]	; (8002fc4 <HAL_DMA_Abort+0x23c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d040      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a2b      	ldr	r2, [pc, #172]	; (8002fc8 <HAL_DMA_Abort+0x240>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d03b      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a2a      	ldr	r2, [pc, #168]	; (8002fcc <HAL_DMA_Abort+0x244>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d036      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a28      	ldr	r2, [pc, #160]	; (8002fd0 <HAL_DMA_Abort+0x248>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d031      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a27      	ldr	r2, [pc, #156]	; (8002fd4 <HAL_DMA_Abort+0x24c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d02c      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a25      	ldr	r2, [pc, #148]	; (8002fd8 <HAL_DMA_Abort+0x250>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d027      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a24      	ldr	r2, [pc, #144]	; (8002fdc <HAL_DMA_Abort+0x254>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d022      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <HAL_DMA_Abort+0x258>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d01d      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a21      	ldr	r2, [pc, #132]	; (8002fe4 <HAL_DMA_Abort+0x25c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d018      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <HAL_DMA_Abort+0x260>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a1e      	ldr	r2, [pc, #120]	; (8002fec <HAL_DMA_Abort+0x264>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00e      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1c      	ldr	r2, [pc, #112]	; (8002ff0 <HAL_DMA_Abort+0x268>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d009      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <HAL_DMA_Abort+0x26c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_DMA_Abort+0x20e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a19      	ldr	r2, [pc, #100]	; (8002ff8 <HAL_DMA_Abort+0x270>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d132      	bne.n	8002ffc <HAL_DMA_Abort+0x274>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e031      	b.n	8002ffe <HAL_DMA_Abort+0x276>
 8002f9a:	bf00      	nop
 8002f9c:	40020010 	.word	0x40020010
 8002fa0:	40020028 	.word	0x40020028
 8002fa4:	40020040 	.word	0x40020040
 8002fa8:	40020058 	.word	0x40020058
 8002fac:	40020070 	.word	0x40020070
 8002fb0:	40020088 	.word	0x40020088
 8002fb4:	400200a0 	.word	0x400200a0
 8002fb8:	400200b8 	.word	0x400200b8
 8002fbc:	40020410 	.word	0x40020410
 8002fc0:	40020428 	.word	0x40020428
 8002fc4:	40020440 	.word	0x40020440
 8002fc8:	40020458 	.word	0x40020458
 8002fcc:	40020470 	.word	0x40020470
 8002fd0:	40020488 	.word	0x40020488
 8002fd4:	400204a0 	.word	0x400204a0
 8002fd8:	400204b8 	.word	0x400204b8
 8002fdc:	58025408 	.word	0x58025408
 8002fe0:	5802541c 	.word	0x5802541c
 8002fe4:	58025430 	.word	0x58025430
 8002fe8:	58025444 	.word	0x58025444
 8002fec:	58025458 	.word	0x58025458
 8002ff0:	5802546c 	.word	0x5802546c
 8002ff4:	58025480 	.word	0x58025480
 8002ff8:	58025494 	.word	0x58025494
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d007      	beq.n	8003012 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003010:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6d      	ldr	r2, [pc, #436]	; (80031cc <HAL_DMA_Abort+0x444>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d04a      	beq.n	80030b2 <HAL_DMA_Abort+0x32a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6b      	ldr	r2, [pc, #428]	; (80031d0 <HAL_DMA_Abort+0x448>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d045      	beq.n	80030b2 <HAL_DMA_Abort+0x32a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a6a      	ldr	r2, [pc, #424]	; (80031d4 <HAL_DMA_Abort+0x44c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d040      	beq.n	80030b2 <HAL_DMA_Abort+0x32a>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a68      	ldr	r2, [pc, #416]	; (80031d8 <HAL_DMA_Abort+0x450>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d03b      	beq.n	80030b2 <HAL_DMA_Abort+0x32a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a67      	ldr	r2, [pc, #412]	; (80031dc <HAL_DMA_Abort+0x454>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d036      	beq.n	80030b2 <HAL_DMA_Abort+0x32a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a65      	ldr	r2, [pc, #404]	; (80031e0 <HAL_DMA_Abort+0x458>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d031      	beq.n	80030b2 <HAL_DMA_Abort+0x32a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a64      	ldr	r2, [pc, #400]	; (80031e4 <HAL_DMA_Abort+0x45c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d02c      	beq.n	80030b2 <HAL_DMA_Abort+0x32a>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a62      	ldr	r2, [pc, #392]	; (80031e8 <HAL_DMA_Abort+0x460>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d027      	beq.n	80030b2 <HAL_DMA_Abort+0x32a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a61      	ldr	r2, [pc, #388]	; (80031ec <HAL_DMA_Abort+0x464>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d022      	beq.n	80030b2 <HAL_DMA_Abort+0x32a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a5f      	ldr	r2, [pc, #380]	; (80031f0 <HAL_DMA_Abort+0x468>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01d      	beq.n	80030b2 <HAL_DMA_Abort+0x32a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a5e      	ldr	r2, [pc, #376]	; (80031f4 <HAL_DMA_Abort+0x46c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d018      	beq.n	80030b2 <HAL_DMA_Abort+0x32a>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a5c      	ldr	r2, [pc, #368]	; (80031f8 <HAL_DMA_Abort+0x470>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_DMA_Abort+0x32a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a5b      	ldr	r2, [pc, #364]	; (80031fc <HAL_DMA_Abort+0x474>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00e      	beq.n	80030b2 <HAL_DMA_Abort+0x32a>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a59      	ldr	r2, [pc, #356]	; (8003200 <HAL_DMA_Abort+0x478>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_DMA_Abort+0x32a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a58      	ldr	r2, [pc, #352]	; (8003204 <HAL_DMA_Abort+0x47c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_DMA_Abort+0x32a>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a56      	ldr	r2, [pc, #344]	; (8003208 <HAL_DMA_Abort+0x480>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d108      	bne.n	80030c4 <HAL_DMA_Abort+0x33c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	f022 0201 	bic.w	r2, r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	e007      	b.n	80030d4 <HAL_DMA_Abort+0x34c>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	f022 0201 	bic.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030d4:	e013      	b.n	80030fe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030d6:	f7fd fb0d 	bl	80006f4 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b05      	cmp	r3, #5
 80030e2:	d90c      	bls.n	80030fe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2203      	movs	r2, #3
 80030f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e12d      	b.n	800335a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1e5      	bne.n	80030d6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a2f      	ldr	r2, [pc, #188]	; (80031cc <HAL_DMA_Abort+0x444>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d04a      	beq.n	80031aa <HAL_DMA_Abort+0x422>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a2d      	ldr	r2, [pc, #180]	; (80031d0 <HAL_DMA_Abort+0x448>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d045      	beq.n	80031aa <HAL_DMA_Abort+0x422>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2c      	ldr	r2, [pc, #176]	; (80031d4 <HAL_DMA_Abort+0x44c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d040      	beq.n	80031aa <HAL_DMA_Abort+0x422>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a2a      	ldr	r2, [pc, #168]	; (80031d8 <HAL_DMA_Abort+0x450>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d03b      	beq.n	80031aa <HAL_DMA_Abort+0x422>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a29      	ldr	r2, [pc, #164]	; (80031dc <HAL_DMA_Abort+0x454>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d036      	beq.n	80031aa <HAL_DMA_Abort+0x422>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a27      	ldr	r2, [pc, #156]	; (80031e0 <HAL_DMA_Abort+0x458>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d031      	beq.n	80031aa <HAL_DMA_Abort+0x422>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <HAL_DMA_Abort+0x45c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d02c      	beq.n	80031aa <HAL_DMA_Abort+0x422>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a24      	ldr	r2, [pc, #144]	; (80031e8 <HAL_DMA_Abort+0x460>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d027      	beq.n	80031aa <HAL_DMA_Abort+0x422>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a23      	ldr	r2, [pc, #140]	; (80031ec <HAL_DMA_Abort+0x464>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d022      	beq.n	80031aa <HAL_DMA_Abort+0x422>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a21      	ldr	r2, [pc, #132]	; (80031f0 <HAL_DMA_Abort+0x468>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d01d      	beq.n	80031aa <HAL_DMA_Abort+0x422>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <HAL_DMA_Abort+0x46c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d018      	beq.n	80031aa <HAL_DMA_Abort+0x422>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1e      	ldr	r2, [pc, #120]	; (80031f8 <HAL_DMA_Abort+0x470>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d013      	beq.n	80031aa <HAL_DMA_Abort+0x422>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <HAL_DMA_Abort+0x474>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00e      	beq.n	80031aa <HAL_DMA_Abort+0x422>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1b      	ldr	r2, [pc, #108]	; (8003200 <HAL_DMA_Abort+0x478>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d009      	beq.n	80031aa <HAL_DMA_Abort+0x422>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a1a      	ldr	r2, [pc, #104]	; (8003204 <HAL_DMA_Abort+0x47c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d004      	beq.n	80031aa <HAL_DMA_Abort+0x422>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a18      	ldr	r2, [pc, #96]	; (8003208 <HAL_DMA_Abort+0x480>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d101      	bne.n	80031ae <HAL_DMA_Abort+0x426>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_DMA_Abort+0x428>
 80031ae:	2300      	movs	r3, #0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d02b      	beq.n	800320c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b8:	60fb      	str	r3, [r7, #12]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031be:	f003 031f 	and.w	r3, r3, #31
 80031c2:	223f      	movs	r2, #63	; 0x3f
 80031c4:	409a      	lsls	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	609a      	str	r2, [r3, #8]
 80031ca:	e02a      	b.n	8003222 <HAL_DMA_Abort+0x49a>
 80031cc:	40020010 	.word	0x40020010
 80031d0:	40020028 	.word	0x40020028
 80031d4:	40020040 	.word	0x40020040
 80031d8:	40020058 	.word	0x40020058
 80031dc:	40020070 	.word	0x40020070
 80031e0:	40020088 	.word	0x40020088
 80031e4:	400200a0 	.word	0x400200a0
 80031e8:	400200b8 	.word	0x400200b8
 80031ec:	40020410 	.word	0x40020410
 80031f0:	40020428 	.word	0x40020428
 80031f4:	40020440 	.word	0x40020440
 80031f8:	40020458 	.word	0x40020458
 80031fc:	40020470 	.word	0x40020470
 8003200:	40020488 	.word	0x40020488
 8003204:	400204a0 	.word	0x400204a0
 8003208:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003210:	60bb      	str	r3, [r7, #8]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	2201      	movs	r2, #1
 800321c:	409a      	lsls	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a4f      	ldr	r2, [pc, #316]	; (8003364 <HAL_DMA_Abort+0x5dc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d072      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a4d      	ldr	r2, [pc, #308]	; (8003368 <HAL_DMA_Abort+0x5e0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d06d      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a4c      	ldr	r2, [pc, #304]	; (800336c <HAL_DMA_Abort+0x5e4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d068      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a4a      	ldr	r2, [pc, #296]	; (8003370 <HAL_DMA_Abort+0x5e8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d063      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a49      	ldr	r2, [pc, #292]	; (8003374 <HAL_DMA_Abort+0x5ec>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d05e      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a47      	ldr	r2, [pc, #284]	; (8003378 <HAL_DMA_Abort+0x5f0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d059      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a46      	ldr	r2, [pc, #280]	; (800337c <HAL_DMA_Abort+0x5f4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d054      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a44      	ldr	r2, [pc, #272]	; (8003380 <HAL_DMA_Abort+0x5f8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d04f      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a43      	ldr	r2, [pc, #268]	; (8003384 <HAL_DMA_Abort+0x5fc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d04a      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a41      	ldr	r2, [pc, #260]	; (8003388 <HAL_DMA_Abort+0x600>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d045      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a40      	ldr	r2, [pc, #256]	; (800338c <HAL_DMA_Abort+0x604>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d040      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a3e      	ldr	r2, [pc, #248]	; (8003390 <HAL_DMA_Abort+0x608>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d03b      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a3d      	ldr	r2, [pc, #244]	; (8003394 <HAL_DMA_Abort+0x60c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d036      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a3b      	ldr	r2, [pc, #236]	; (8003398 <HAL_DMA_Abort+0x610>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d031      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a3a      	ldr	r2, [pc, #232]	; (800339c <HAL_DMA_Abort+0x614>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d02c      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a38      	ldr	r2, [pc, #224]	; (80033a0 <HAL_DMA_Abort+0x618>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d027      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a37      	ldr	r2, [pc, #220]	; (80033a4 <HAL_DMA_Abort+0x61c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d022      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a35      	ldr	r2, [pc, #212]	; (80033a8 <HAL_DMA_Abort+0x620>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01d      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a34      	ldr	r2, [pc, #208]	; (80033ac <HAL_DMA_Abort+0x624>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d018      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a32      	ldr	r2, [pc, #200]	; (80033b0 <HAL_DMA_Abort+0x628>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a31      	ldr	r2, [pc, #196]	; (80033b4 <HAL_DMA_Abort+0x62c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00e      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a2f      	ldr	r2, [pc, #188]	; (80033b8 <HAL_DMA_Abort+0x630>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d009      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2e      	ldr	r2, [pc, #184]	; (80033bc <HAL_DMA_Abort+0x634>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d004      	beq.n	8003312 <HAL_DMA_Abort+0x58a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <HAL_DMA_Abort+0x638>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d101      	bne.n	8003316 <HAL_DMA_Abort+0x58e>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <HAL_DMA_Abort+0x590>
 8003316:	2300      	movs	r3, #0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d015      	beq.n	8003348 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003324:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00c      	beq.n	8003348 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800333c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003346:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40020010 	.word	0x40020010
 8003368:	40020028 	.word	0x40020028
 800336c:	40020040 	.word	0x40020040
 8003370:	40020058 	.word	0x40020058
 8003374:	40020070 	.word	0x40020070
 8003378:	40020088 	.word	0x40020088
 800337c:	400200a0 	.word	0x400200a0
 8003380:	400200b8 	.word	0x400200b8
 8003384:	40020410 	.word	0x40020410
 8003388:	40020428 	.word	0x40020428
 800338c:	40020440 	.word	0x40020440
 8003390:	40020458 	.word	0x40020458
 8003394:	40020470 	.word	0x40020470
 8003398:	40020488 	.word	0x40020488
 800339c:	400204a0 	.word	0x400204a0
 80033a0:	400204b8 	.word	0x400204b8
 80033a4:	58025408 	.word	0x58025408
 80033a8:	5802541c 	.word	0x5802541c
 80033ac:	58025430 	.word	0x58025430
 80033b0:	58025444 	.word	0x58025444
 80033b4:	58025458 	.word	0x58025458
 80033b8:	5802546c 	.word	0x5802546c
 80033bc:	58025480 	.word	0x58025480
 80033c0:	58025494 	.word	0x58025494

080033c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e205      	b.n	80037e2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d004      	beq.n	80033ec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2280      	movs	r2, #128	; 0x80
 80033e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e1fa      	b.n	80037e2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a8c      	ldr	r2, [pc, #560]	; (8003624 <HAL_DMA_Abort_IT+0x260>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d04a      	beq.n	800348c <HAL_DMA_Abort_IT+0xc8>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a8b      	ldr	r2, [pc, #556]	; (8003628 <HAL_DMA_Abort_IT+0x264>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d045      	beq.n	800348c <HAL_DMA_Abort_IT+0xc8>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a89      	ldr	r2, [pc, #548]	; (800362c <HAL_DMA_Abort_IT+0x268>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d040      	beq.n	800348c <HAL_DMA_Abort_IT+0xc8>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a88      	ldr	r2, [pc, #544]	; (8003630 <HAL_DMA_Abort_IT+0x26c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d03b      	beq.n	800348c <HAL_DMA_Abort_IT+0xc8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a86      	ldr	r2, [pc, #536]	; (8003634 <HAL_DMA_Abort_IT+0x270>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d036      	beq.n	800348c <HAL_DMA_Abort_IT+0xc8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a85      	ldr	r2, [pc, #532]	; (8003638 <HAL_DMA_Abort_IT+0x274>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d031      	beq.n	800348c <HAL_DMA_Abort_IT+0xc8>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a83      	ldr	r2, [pc, #524]	; (800363c <HAL_DMA_Abort_IT+0x278>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d02c      	beq.n	800348c <HAL_DMA_Abort_IT+0xc8>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a82      	ldr	r2, [pc, #520]	; (8003640 <HAL_DMA_Abort_IT+0x27c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d027      	beq.n	800348c <HAL_DMA_Abort_IT+0xc8>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a80      	ldr	r2, [pc, #512]	; (8003644 <HAL_DMA_Abort_IT+0x280>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d022      	beq.n	800348c <HAL_DMA_Abort_IT+0xc8>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a7f      	ldr	r2, [pc, #508]	; (8003648 <HAL_DMA_Abort_IT+0x284>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d01d      	beq.n	800348c <HAL_DMA_Abort_IT+0xc8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a7d      	ldr	r2, [pc, #500]	; (800364c <HAL_DMA_Abort_IT+0x288>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d018      	beq.n	800348c <HAL_DMA_Abort_IT+0xc8>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a7c      	ldr	r2, [pc, #496]	; (8003650 <HAL_DMA_Abort_IT+0x28c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d013      	beq.n	800348c <HAL_DMA_Abort_IT+0xc8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a7a      	ldr	r2, [pc, #488]	; (8003654 <HAL_DMA_Abort_IT+0x290>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00e      	beq.n	800348c <HAL_DMA_Abort_IT+0xc8>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a79      	ldr	r2, [pc, #484]	; (8003658 <HAL_DMA_Abort_IT+0x294>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d009      	beq.n	800348c <HAL_DMA_Abort_IT+0xc8>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a77      	ldr	r2, [pc, #476]	; (800365c <HAL_DMA_Abort_IT+0x298>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_DMA_Abort_IT+0xc8>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a76      	ldr	r2, [pc, #472]	; (8003660 <HAL_DMA_Abort_IT+0x29c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d101      	bne.n	8003490 <HAL_DMA_Abort_IT+0xcc>
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <HAL_DMA_Abort_IT+0xce>
 8003490:	2300      	movs	r3, #0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d065      	beq.n	8003562 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2204      	movs	r2, #4
 800349a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a60      	ldr	r2, [pc, #384]	; (8003624 <HAL_DMA_Abort_IT+0x260>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d04a      	beq.n	800353e <HAL_DMA_Abort_IT+0x17a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a5e      	ldr	r2, [pc, #376]	; (8003628 <HAL_DMA_Abort_IT+0x264>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d045      	beq.n	800353e <HAL_DMA_Abort_IT+0x17a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a5d      	ldr	r2, [pc, #372]	; (800362c <HAL_DMA_Abort_IT+0x268>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d040      	beq.n	800353e <HAL_DMA_Abort_IT+0x17a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a5b      	ldr	r2, [pc, #364]	; (8003630 <HAL_DMA_Abort_IT+0x26c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d03b      	beq.n	800353e <HAL_DMA_Abort_IT+0x17a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a5a      	ldr	r2, [pc, #360]	; (8003634 <HAL_DMA_Abort_IT+0x270>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d036      	beq.n	800353e <HAL_DMA_Abort_IT+0x17a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a58      	ldr	r2, [pc, #352]	; (8003638 <HAL_DMA_Abort_IT+0x274>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d031      	beq.n	800353e <HAL_DMA_Abort_IT+0x17a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a57      	ldr	r2, [pc, #348]	; (800363c <HAL_DMA_Abort_IT+0x278>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d02c      	beq.n	800353e <HAL_DMA_Abort_IT+0x17a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a55      	ldr	r2, [pc, #340]	; (8003640 <HAL_DMA_Abort_IT+0x27c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d027      	beq.n	800353e <HAL_DMA_Abort_IT+0x17a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a54      	ldr	r2, [pc, #336]	; (8003644 <HAL_DMA_Abort_IT+0x280>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d022      	beq.n	800353e <HAL_DMA_Abort_IT+0x17a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a52      	ldr	r2, [pc, #328]	; (8003648 <HAL_DMA_Abort_IT+0x284>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d01d      	beq.n	800353e <HAL_DMA_Abort_IT+0x17a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a51      	ldr	r2, [pc, #324]	; (800364c <HAL_DMA_Abort_IT+0x288>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d018      	beq.n	800353e <HAL_DMA_Abort_IT+0x17a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a4f      	ldr	r2, [pc, #316]	; (8003650 <HAL_DMA_Abort_IT+0x28c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d013      	beq.n	800353e <HAL_DMA_Abort_IT+0x17a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a4e      	ldr	r2, [pc, #312]	; (8003654 <HAL_DMA_Abort_IT+0x290>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00e      	beq.n	800353e <HAL_DMA_Abort_IT+0x17a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a4c      	ldr	r2, [pc, #304]	; (8003658 <HAL_DMA_Abort_IT+0x294>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d009      	beq.n	800353e <HAL_DMA_Abort_IT+0x17a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a4b      	ldr	r2, [pc, #300]	; (800365c <HAL_DMA_Abort_IT+0x298>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d004      	beq.n	800353e <HAL_DMA_Abort_IT+0x17a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a49      	ldr	r2, [pc, #292]	; (8003660 <HAL_DMA_Abort_IT+0x29c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d108      	bne.n	8003550 <HAL_DMA_Abort_IT+0x18c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	f022 0201 	bic.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	e147      	b.n	80037e0 <HAL_DMA_Abort_IT+0x41c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e13e      	b.n	80037e0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	f022 020e 	bic.w	r2, r2, #14
 8003570:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a2b      	ldr	r2, [pc, #172]	; (8003624 <HAL_DMA_Abort_IT+0x260>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d04a      	beq.n	8003612 <HAL_DMA_Abort_IT+0x24e>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a29      	ldr	r2, [pc, #164]	; (8003628 <HAL_DMA_Abort_IT+0x264>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d045      	beq.n	8003612 <HAL_DMA_Abort_IT+0x24e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a28      	ldr	r2, [pc, #160]	; (800362c <HAL_DMA_Abort_IT+0x268>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d040      	beq.n	8003612 <HAL_DMA_Abort_IT+0x24e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a26      	ldr	r2, [pc, #152]	; (8003630 <HAL_DMA_Abort_IT+0x26c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d03b      	beq.n	8003612 <HAL_DMA_Abort_IT+0x24e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a25      	ldr	r2, [pc, #148]	; (8003634 <HAL_DMA_Abort_IT+0x270>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d036      	beq.n	8003612 <HAL_DMA_Abort_IT+0x24e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a23      	ldr	r2, [pc, #140]	; (8003638 <HAL_DMA_Abort_IT+0x274>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d031      	beq.n	8003612 <HAL_DMA_Abort_IT+0x24e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a22      	ldr	r2, [pc, #136]	; (800363c <HAL_DMA_Abort_IT+0x278>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d02c      	beq.n	8003612 <HAL_DMA_Abort_IT+0x24e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a20      	ldr	r2, [pc, #128]	; (8003640 <HAL_DMA_Abort_IT+0x27c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d027      	beq.n	8003612 <HAL_DMA_Abort_IT+0x24e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1f      	ldr	r2, [pc, #124]	; (8003644 <HAL_DMA_Abort_IT+0x280>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d022      	beq.n	8003612 <HAL_DMA_Abort_IT+0x24e>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1d      	ldr	r2, [pc, #116]	; (8003648 <HAL_DMA_Abort_IT+0x284>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01d      	beq.n	8003612 <HAL_DMA_Abort_IT+0x24e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1c      	ldr	r2, [pc, #112]	; (800364c <HAL_DMA_Abort_IT+0x288>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d018      	beq.n	8003612 <HAL_DMA_Abort_IT+0x24e>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1a      	ldr	r2, [pc, #104]	; (8003650 <HAL_DMA_Abort_IT+0x28c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_DMA_Abort_IT+0x24e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a19      	ldr	r2, [pc, #100]	; (8003654 <HAL_DMA_Abort_IT+0x290>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00e      	beq.n	8003612 <HAL_DMA_Abort_IT+0x24e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a17      	ldr	r2, [pc, #92]	; (8003658 <HAL_DMA_Abort_IT+0x294>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d009      	beq.n	8003612 <HAL_DMA_Abort_IT+0x24e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a16      	ldr	r2, [pc, #88]	; (800365c <HAL_DMA_Abort_IT+0x298>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_DMA_Abort_IT+0x24e>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a14      	ldr	r2, [pc, #80]	; (8003660 <HAL_DMA_Abort_IT+0x29c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d128      	bne.n	8003664 <HAL_DMA_Abort_IT+0x2a0>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6812      	ldr	r2, [r2, #0]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	f022 0201 	bic.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	e027      	b.n	8003674 <HAL_DMA_Abort_IT+0x2b0>
 8003624:	40020010 	.word	0x40020010
 8003628:	40020028 	.word	0x40020028
 800362c:	40020040 	.word	0x40020040
 8003630:	40020058 	.word	0x40020058
 8003634:	40020070 	.word	0x40020070
 8003638:	40020088 	.word	0x40020088
 800363c:	400200a0 	.word	0x400200a0
 8003640:	400200b8 	.word	0x400200b8
 8003644:	40020410 	.word	0x40020410
 8003648:	40020428 	.word	0x40020428
 800364c:	40020440 	.word	0x40020440
 8003650:	40020458 	.word	0x40020458
 8003654:	40020470 	.word	0x40020470
 8003658:	40020488 	.word	0x40020488
 800365c:	400204a0 	.word	0x400204a0
 8003660:	400204b8 	.word	0x400204b8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a5c      	ldr	r2, [pc, #368]	; (80037ec <HAL_DMA_Abort_IT+0x428>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d072      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a5b      	ldr	r2, [pc, #364]	; (80037f0 <HAL_DMA_Abort_IT+0x42c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d06d      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a59      	ldr	r2, [pc, #356]	; (80037f4 <HAL_DMA_Abort_IT+0x430>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d068      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a58      	ldr	r2, [pc, #352]	; (80037f8 <HAL_DMA_Abort_IT+0x434>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d063      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a56      	ldr	r2, [pc, #344]	; (80037fc <HAL_DMA_Abort_IT+0x438>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d05e      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a55      	ldr	r2, [pc, #340]	; (8003800 <HAL_DMA_Abort_IT+0x43c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d059      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a53      	ldr	r2, [pc, #332]	; (8003804 <HAL_DMA_Abort_IT+0x440>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d054      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a52      	ldr	r2, [pc, #328]	; (8003808 <HAL_DMA_Abort_IT+0x444>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d04f      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a50      	ldr	r2, [pc, #320]	; (800380c <HAL_DMA_Abort_IT+0x448>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d04a      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a4f      	ldr	r2, [pc, #316]	; (8003810 <HAL_DMA_Abort_IT+0x44c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d045      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a4d      	ldr	r2, [pc, #308]	; (8003814 <HAL_DMA_Abort_IT+0x450>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d040      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a4c      	ldr	r2, [pc, #304]	; (8003818 <HAL_DMA_Abort_IT+0x454>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d03b      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a4a      	ldr	r2, [pc, #296]	; (800381c <HAL_DMA_Abort_IT+0x458>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d036      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a49      	ldr	r2, [pc, #292]	; (8003820 <HAL_DMA_Abort_IT+0x45c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d031      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a47      	ldr	r2, [pc, #284]	; (8003824 <HAL_DMA_Abort_IT+0x460>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d02c      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a46      	ldr	r2, [pc, #280]	; (8003828 <HAL_DMA_Abort_IT+0x464>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d027      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a44      	ldr	r2, [pc, #272]	; (800382c <HAL_DMA_Abort_IT+0x468>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d022      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a43      	ldr	r2, [pc, #268]	; (8003830 <HAL_DMA_Abort_IT+0x46c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d01d      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a41      	ldr	r2, [pc, #260]	; (8003834 <HAL_DMA_Abort_IT+0x470>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d018      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a40      	ldr	r2, [pc, #256]	; (8003838 <HAL_DMA_Abort_IT+0x474>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d013      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a3e      	ldr	r2, [pc, #248]	; (800383c <HAL_DMA_Abort_IT+0x478>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00e      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a3d      	ldr	r2, [pc, #244]	; (8003840 <HAL_DMA_Abort_IT+0x47c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d009      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a3b      	ldr	r2, [pc, #236]	; (8003844 <HAL_DMA_Abort_IT+0x480>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d004      	beq.n	8003764 <HAL_DMA_Abort_IT+0x3a0>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a3a      	ldr	r2, [pc, #232]	; (8003848 <HAL_DMA_Abort_IT+0x484>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d101      	bne.n	8003768 <HAL_DMA_Abort_IT+0x3a4>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <HAL_DMA_Abort_IT+0x3a6>
 8003768:	2300      	movs	r3, #0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d028      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800377c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	2201      	movs	r2, #1
 800378e:	409a      	lsls	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800379c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00c      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40020010 	.word	0x40020010
 80037f0:	40020028 	.word	0x40020028
 80037f4:	40020040 	.word	0x40020040
 80037f8:	40020058 	.word	0x40020058
 80037fc:	40020070 	.word	0x40020070
 8003800:	40020088 	.word	0x40020088
 8003804:	400200a0 	.word	0x400200a0
 8003808:	400200b8 	.word	0x400200b8
 800380c:	40020410 	.word	0x40020410
 8003810:	40020428 	.word	0x40020428
 8003814:	40020440 	.word	0x40020440
 8003818:	40020458 	.word	0x40020458
 800381c:	40020470 	.word	0x40020470
 8003820:	40020488 	.word	0x40020488
 8003824:	400204a0 	.word	0x400204a0
 8003828:	400204b8 	.word	0x400204b8
 800382c:	58025408 	.word	0x58025408
 8003830:	5802541c 	.word	0x5802541c
 8003834:	58025430 	.word	0x58025430
 8003838:	58025444 	.word	0x58025444
 800383c:	58025458 	.word	0x58025458
 8003840:	5802546c 	.word	0x5802546c
 8003844:	58025480 	.word	0x58025480
 8003848:	58025494 	.word	0x58025494

0800384c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003858:	4b67      	ldr	r3, [pc, #412]	; (80039f8 <HAL_DMA_IRQHandler+0x1ac>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a67      	ldr	r2, [pc, #412]	; (80039fc <HAL_DMA_IRQHandler+0x1b0>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	0a9b      	lsrs	r3, r3, #10
 8003864:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003870:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a5f      	ldr	r2, [pc, #380]	; (8003a00 <HAL_DMA_IRQHandler+0x1b4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d04a      	beq.n	800391e <HAL_DMA_IRQHandler+0xd2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a5d      	ldr	r2, [pc, #372]	; (8003a04 <HAL_DMA_IRQHandler+0x1b8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d045      	beq.n	800391e <HAL_DMA_IRQHandler+0xd2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a5c      	ldr	r2, [pc, #368]	; (8003a08 <HAL_DMA_IRQHandler+0x1bc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d040      	beq.n	800391e <HAL_DMA_IRQHandler+0xd2>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a5a      	ldr	r2, [pc, #360]	; (8003a0c <HAL_DMA_IRQHandler+0x1c0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d03b      	beq.n	800391e <HAL_DMA_IRQHandler+0xd2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a59      	ldr	r2, [pc, #356]	; (8003a10 <HAL_DMA_IRQHandler+0x1c4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d036      	beq.n	800391e <HAL_DMA_IRQHandler+0xd2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a57      	ldr	r2, [pc, #348]	; (8003a14 <HAL_DMA_IRQHandler+0x1c8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d031      	beq.n	800391e <HAL_DMA_IRQHandler+0xd2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a56      	ldr	r2, [pc, #344]	; (8003a18 <HAL_DMA_IRQHandler+0x1cc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d02c      	beq.n	800391e <HAL_DMA_IRQHandler+0xd2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a54      	ldr	r2, [pc, #336]	; (8003a1c <HAL_DMA_IRQHandler+0x1d0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d027      	beq.n	800391e <HAL_DMA_IRQHandler+0xd2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a53      	ldr	r2, [pc, #332]	; (8003a20 <HAL_DMA_IRQHandler+0x1d4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d022      	beq.n	800391e <HAL_DMA_IRQHandler+0xd2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a51      	ldr	r2, [pc, #324]	; (8003a24 <HAL_DMA_IRQHandler+0x1d8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01d      	beq.n	800391e <HAL_DMA_IRQHandler+0xd2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a50      	ldr	r2, [pc, #320]	; (8003a28 <HAL_DMA_IRQHandler+0x1dc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d018      	beq.n	800391e <HAL_DMA_IRQHandler+0xd2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a4e      	ldr	r2, [pc, #312]	; (8003a2c <HAL_DMA_IRQHandler+0x1e0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <HAL_DMA_IRQHandler+0xd2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a4d      	ldr	r2, [pc, #308]	; (8003a30 <HAL_DMA_IRQHandler+0x1e4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00e      	beq.n	800391e <HAL_DMA_IRQHandler+0xd2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a4b      	ldr	r2, [pc, #300]	; (8003a34 <HAL_DMA_IRQHandler+0x1e8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d009      	beq.n	800391e <HAL_DMA_IRQHandler+0xd2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a4a      	ldr	r2, [pc, #296]	; (8003a38 <HAL_DMA_IRQHandler+0x1ec>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d004      	beq.n	800391e <HAL_DMA_IRQHandler+0xd2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a48      	ldr	r2, [pc, #288]	; (8003a3c <HAL_DMA_IRQHandler+0x1f0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d101      	bne.n	8003922 <HAL_DMA_IRQHandler+0xd6>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <HAL_DMA_IRQHandler+0xd8>
 8003922:	2300      	movs	r3, #0
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 842b 	beq.w	8004180 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	2208      	movs	r2, #8
 8003934:	409a      	lsls	r2, r3
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80a2 	beq.w	8003a84 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a2e      	ldr	r2, [pc, #184]	; (8003a00 <HAL_DMA_IRQHandler+0x1b4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d04a      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x194>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a2d      	ldr	r2, [pc, #180]	; (8003a04 <HAL_DMA_IRQHandler+0x1b8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d045      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x194>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a2b      	ldr	r2, [pc, #172]	; (8003a08 <HAL_DMA_IRQHandler+0x1bc>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d040      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x194>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a2a      	ldr	r2, [pc, #168]	; (8003a0c <HAL_DMA_IRQHandler+0x1c0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d03b      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x194>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a28      	ldr	r2, [pc, #160]	; (8003a10 <HAL_DMA_IRQHandler+0x1c4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d036      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x194>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a27      	ldr	r2, [pc, #156]	; (8003a14 <HAL_DMA_IRQHandler+0x1c8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d031      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x194>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a25      	ldr	r2, [pc, #148]	; (8003a18 <HAL_DMA_IRQHandler+0x1cc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d02c      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x194>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a24      	ldr	r2, [pc, #144]	; (8003a1c <HAL_DMA_IRQHandler+0x1d0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d027      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x194>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a22      	ldr	r2, [pc, #136]	; (8003a20 <HAL_DMA_IRQHandler+0x1d4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d022      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x194>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a21      	ldr	r2, [pc, #132]	; (8003a24 <HAL_DMA_IRQHandler+0x1d8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d01d      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x194>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1f      	ldr	r2, [pc, #124]	; (8003a28 <HAL_DMA_IRQHandler+0x1dc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d018      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x194>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1e      	ldr	r2, [pc, #120]	; (8003a2c <HAL_DMA_IRQHandler+0x1e0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d013      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x194>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <HAL_DMA_IRQHandler+0x1e4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00e      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x194>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1b      	ldr	r2, [pc, #108]	; (8003a34 <HAL_DMA_IRQHandler+0x1e8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d009      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x194>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a19      	ldr	r2, [pc, #100]	; (8003a38 <HAL_DMA_IRQHandler+0x1ec>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x194>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <HAL_DMA_IRQHandler+0x1f0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d12f      	bne.n	8003a40 <HAL_DMA_IRQHandler+0x1f4>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf14      	ite	ne
 80039ee:	2301      	movne	r3, #1
 80039f0:	2300      	moveq	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	e02e      	b.n	8003a54 <HAL_DMA_IRQHandler+0x208>
 80039f6:	bf00      	nop
 80039f8:	2400000c 	.word	0x2400000c
 80039fc:	1b4e81b5 	.word	0x1b4e81b5
 8003a00:	40020010 	.word	0x40020010
 8003a04:	40020028 	.word	0x40020028
 8003a08:	40020040 	.word	0x40020040
 8003a0c:	40020058 	.word	0x40020058
 8003a10:	40020070 	.word	0x40020070
 8003a14:	40020088 	.word	0x40020088
 8003a18:	400200a0 	.word	0x400200a0
 8003a1c:	400200b8 	.word	0x400200b8
 8003a20:	40020410 	.word	0x40020410
 8003a24:	40020428 	.word	0x40020428
 8003a28:	40020440 	.word	0x40020440
 8003a2c:	40020458 	.word	0x40020458
 8003a30:	40020470 	.word	0x40020470
 8003a34:	40020488 	.word	0x40020488
 8003a38:	400204a0 	.word	0x400204a0
 8003a3c:	400204b8 	.word	0x400204b8
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bf14      	ite	ne
 8003a4e:	2301      	movne	r3, #1
 8003a50:	2300      	moveq	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	f022 0204 	bic.w	r2, r2, #4
 8003a66:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	2208      	movs	r2, #8
 8003a72:	409a      	lsls	r2, r3
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7c:	f043 0201 	orr.w	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d06e      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a69      	ldr	r2, [pc, #420]	; (8003c44 <HAL_DMA_IRQHandler+0x3f8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d04a      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x2ee>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a67      	ldr	r2, [pc, #412]	; (8003c48 <HAL_DMA_IRQHandler+0x3fc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d045      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x2ee>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a66      	ldr	r2, [pc, #408]	; (8003c4c <HAL_DMA_IRQHandler+0x400>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d040      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x2ee>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a64      	ldr	r2, [pc, #400]	; (8003c50 <HAL_DMA_IRQHandler+0x404>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d03b      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x2ee>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a63      	ldr	r2, [pc, #396]	; (8003c54 <HAL_DMA_IRQHandler+0x408>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d036      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x2ee>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a61      	ldr	r2, [pc, #388]	; (8003c58 <HAL_DMA_IRQHandler+0x40c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d031      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x2ee>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a60      	ldr	r2, [pc, #384]	; (8003c5c <HAL_DMA_IRQHandler+0x410>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d02c      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x2ee>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a5e      	ldr	r2, [pc, #376]	; (8003c60 <HAL_DMA_IRQHandler+0x414>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d027      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x2ee>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a5d      	ldr	r2, [pc, #372]	; (8003c64 <HAL_DMA_IRQHandler+0x418>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d022      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x2ee>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a5b      	ldr	r2, [pc, #364]	; (8003c68 <HAL_DMA_IRQHandler+0x41c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01d      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x2ee>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a5a      	ldr	r2, [pc, #360]	; (8003c6c <HAL_DMA_IRQHandler+0x420>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d018      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x2ee>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a58      	ldr	r2, [pc, #352]	; (8003c70 <HAL_DMA_IRQHandler+0x424>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d013      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x2ee>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a57      	ldr	r2, [pc, #348]	; (8003c74 <HAL_DMA_IRQHandler+0x428>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00e      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x2ee>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a55      	ldr	r2, [pc, #340]	; (8003c78 <HAL_DMA_IRQHandler+0x42c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d009      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x2ee>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a54      	ldr	r2, [pc, #336]	; (8003c7c <HAL_DMA_IRQHandler+0x430>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d004      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x2ee>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a52      	ldr	r2, [pc, #328]	; (8003c80 <HAL_DMA_IRQHandler+0x434>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d10a      	bne.n	8003b50 <HAL_DMA_IRQHandler+0x304>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	e003      	b.n	8003b58 <HAL_DMA_IRQHandler+0x30c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2300      	movs	r3, #0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	2201      	movs	r2, #1
 8003b66:	409a      	lsls	r2, r3
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	f043 0202 	orr.w	r2, r3, #2
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	2204      	movs	r2, #4
 8003b82:	409a      	lsls	r2, r3
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 808f 	beq.w	8003cac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2c      	ldr	r2, [pc, #176]	; (8003c44 <HAL_DMA_IRQHandler+0x3f8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d04a      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x3e2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2a      	ldr	r2, [pc, #168]	; (8003c48 <HAL_DMA_IRQHandler+0x3fc>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d045      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x3e2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a29      	ldr	r2, [pc, #164]	; (8003c4c <HAL_DMA_IRQHandler+0x400>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d040      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x3e2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a27      	ldr	r2, [pc, #156]	; (8003c50 <HAL_DMA_IRQHandler+0x404>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d03b      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x3e2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <HAL_DMA_IRQHandler+0x408>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d036      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x3e2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a24      	ldr	r2, [pc, #144]	; (8003c58 <HAL_DMA_IRQHandler+0x40c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d031      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x3e2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a23      	ldr	r2, [pc, #140]	; (8003c5c <HAL_DMA_IRQHandler+0x410>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d02c      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x3e2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a21      	ldr	r2, [pc, #132]	; (8003c60 <HAL_DMA_IRQHandler+0x414>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d027      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x3e2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a20      	ldr	r2, [pc, #128]	; (8003c64 <HAL_DMA_IRQHandler+0x418>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d022      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x3e2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a1e      	ldr	r2, [pc, #120]	; (8003c68 <HAL_DMA_IRQHandler+0x41c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01d      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x3e2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1d      	ldr	r2, [pc, #116]	; (8003c6c <HAL_DMA_IRQHandler+0x420>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d018      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x3e2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <HAL_DMA_IRQHandler+0x424>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x3e2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a1a      	ldr	r2, [pc, #104]	; (8003c74 <HAL_DMA_IRQHandler+0x428>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x3e2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <HAL_DMA_IRQHandler+0x42c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d009      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x3e2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <HAL_DMA_IRQHandler+0x430>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x3e2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a15      	ldr	r2, [pc, #84]	; (8003c80 <HAL_DMA_IRQHandler+0x434>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d12a      	bne.n	8003c84 <HAL_DMA_IRQHandler+0x438>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf14      	ite	ne
 8003c3c:	2301      	movne	r3, #1
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	e023      	b.n	8003c8c <HAL_DMA_IRQHandler+0x440>
 8003c44:	40020010 	.word	0x40020010
 8003c48:	40020028 	.word	0x40020028
 8003c4c:	40020040 	.word	0x40020040
 8003c50:	40020058 	.word	0x40020058
 8003c54:	40020070 	.word	0x40020070
 8003c58:	40020088 	.word	0x40020088
 8003c5c:	400200a0 	.word	0x400200a0
 8003c60:	400200b8 	.word	0x400200b8
 8003c64:	40020410 	.word	0x40020410
 8003c68:	40020428 	.word	0x40020428
 8003c6c:	40020440 	.word	0x40020440
 8003c70:	40020458 	.word	0x40020458
 8003c74:	40020470 	.word	0x40020470
 8003c78:	40020488 	.word	0x40020488
 8003c7c:	400204a0 	.word	0x400204a0
 8003c80:	400204b8 	.word	0x400204b8
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00d      	beq.n	8003cac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	2204      	movs	r2, #4
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	f043 0204 	orr.w	r2, r3, #4
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80a6 	beq.w	8003e0e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a85      	ldr	r2, [pc, #532]	; (8003edc <HAL_DMA_IRQHandler+0x690>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d04a      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x516>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a83      	ldr	r2, [pc, #524]	; (8003ee0 <HAL_DMA_IRQHandler+0x694>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d045      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x516>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a82      	ldr	r2, [pc, #520]	; (8003ee4 <HAL_DMA_IRQHandler+0x698>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d040      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x516>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a80      	ldr	r2, [pc, #512]	; (8003ee8 <HAL_DMA_IRQHandler+0x69c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d03b      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x516>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a7f      	ldr	r2, [pc, #508]	; (8003eec <HAL_DMA_IRQHandler+0x6a0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d036      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x516>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a7d      	ldr	r2, [pc, #500]	; (8003ef0 <HAL_DMA_IRQHandler+0x6a4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d031      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x516>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a7c      	ldr	r2, [pc, #496]	; (8003ef4 <HAL_DMA_IRQHandler+0x6a8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d02c      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x516>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a7a      	ldr	r2, [pc, #488]	; (8003ef8 <HAL_DMA_IRQHandler+0x6ac>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d027      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x516>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a79      	ldr	r2, [pc, #484]	; (8003efc <HAL_DMA_IRQHandler+0x6b0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d022      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x516>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a77      	ldr	r2, [pc, #476]	; (8003f00 <HAL_DMA_IRQHandler+0x6b4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01d      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x516>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a76      	ldr	r2, [pc, #472]	; (8003f04 <HAL_DMA_IRQHandler+0x6b8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d018      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x516>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a74      	ldr	r2, [pc, #464]	; (8003f08 <HAL_DMA_IRQHandler+0x6bc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x516>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a73      	ldr	r2, [pc, #460]	; (8003f0c <HAL_DMA_IRQHandler+0x6c0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00e      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x516>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a71      	ldr	r2, [pc, #452]	; (8003f10 <HAL_DMA_IRQHandler+0x6c4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d009      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x516>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a70      	ldr	r2, [pc, #448]	; (8003f14 <HAL_DMA_IRQHandler+0x6c8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x516>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a6e      	ldr	r2, [pc, #440]	; (8003f18 <HAL_DMA_IRQHandler+0x6cc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d10a      	bne.n	8003d78 <HAL_DMA_IRQHandler+0x52c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf14      	ite	ne
 8003d70:	2301      	movne	r3, #1
 8003d72:	2300      	moveq	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	e009      	b.n	8003d8c <HAL_DMA_IRQHandler+0x540>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	bf14      	ite	ne
 8003d86:	2301      	movne	r3, #1
 8003d88:	2300      	moveq	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d03e      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2210      	movs	r2, #16
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d018      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d108      	bne.n	8003dce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d024      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	4798      	blx	r3
 8003dcc:	e01f      	b.n	8003e0e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01b      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	4798      	blx	r3
 8003dde:	e016      	b.n	8003e0e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d107      	bne.n	8003dfe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	f022 0208 	bic.w	r2, r2, #8
 8003dfc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	2220      	movs	r2, #32
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 8110 	beq.w	8004044 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a2c      	ldr	r2, [pc, #176]	; (8003edc <HAL_DMA_IRQHandler+0x690>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d04a      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x678>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a2b      	ldr	r2, [pc, #172]	; (8003ee0 <HAL_DMA_IRQHandler+0x694>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d045      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x678>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a29      	ldr	r2, [pc, #164]	; (8003ee4 <HAL_DMA_IRQHandler+0x698>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d040      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x678>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a28      	ldr	r2, [pc, #160]	; (8003ee8 <HAL_DMA_IRQHandler+0x69c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d03b      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x678>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a26      	ldr	r2, [pc, #152]	; (8003eec <HAL_DMA_IRQHandler+0x6a0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d036      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x678>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a25      	ldr	r2, [pc, #148]	; (8003ef0 <HAL_DMA_IRQHandler+0x6a4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d031      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x678>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a23      	ldr	r2, [pc, #140]	; (8003ef4 <HAL_DMA_IRQHandler+0x6a8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d02c      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x678>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a22      	ldr	r2, [pc, #136]	; (8003ef8 <HAL_DMA_IRQHandler+0x6ac>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d027      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x678>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a20      	ldr	r2, [pc, #128]	; (8003efc <HAL_DMA_IRQHandler+0x6b0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d022      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x678>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <HAL_DMA_IRQHandler+0x6b4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d01d      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x678>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1d      	ldr	r2, [pc, #116]	; (8003f04 <HAL_DMA_IRQHandler+0x6b8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d018      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x678>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <HAL_DMA_IRQHandler+0x6bc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d013      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x678>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1a      	ldr	r2, [pc, #104]	; (8003f0c <HAL_DMA_IRQHandler+0x6c0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00e      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x678>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a19      	ldr	r2, [pc, #100]	; (8003f10 <HAL_DMA_IRQHandler+0x6c4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d009      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x678>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a17      	ldr	r2, [pc, #92]	; (8003f14 <HAL_DMA_IRQHandler+0x6c8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d004      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x678>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a16      	ldr	r2, [pc, #88]	; (8003f18 <HAL_DMA_IRQHandler+0x6cc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d12b      	bne.n	8003f1c <HAL_DMA_IRQHandler+0x6d0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	bf14      	ite	ne
 8003ed2:	2301      	movne	r3, #1
 8003ed4:	2300      	moveq	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	e02a      	b.n	8003f30 <HAL_DMA_IRQHandler+0x6e4>
 8003eda:	bf00      	nop
 8003edc:	40020010 	.word	0x40020010
 8003ee0:	40020028 	.word	0x40020028
 8003ee4:	40020040 	.word	0x40020040
 8003ee8:	40020058 	.word	0x40020058
 8003eec:	40020070 	.word	0x40020070
 8003ef0:	40020088 	.word	0x40020088
 8003ef4:	400200a0 	.word	0x400200a0
 8003ef8:	400200b8 	.word	0x400200b8
 8003efc:	40020410 	.word	0x40020410
 8003f00:	40020428 	.word	0x40020428
 8003f04:	40020440 	.word	0x40020440
 8003f08:	40020458 	.word	0x40020458
 8003f0c:	40020470 	.word	0x40020470
 8003f10:	40020488 	.word	0x40020488
 8003f14:	400204a0 	.word	0x400204a0
 8003f18:	400204b8 	.word	0x400204b8
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	bf14      	ite	ne
 8003f2a:	2301      	movne	r3, #1
 8003f2c:	2300      	moveq	r3, #0
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8087 	beq.w	8004044 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	2220      	movs	r2, #32
 8003f40:	409a      	lsls	r2, r3
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d139      	bne.n	8003fc6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	f022 0216 	bic.w	r2, r2, #22
 8003f60:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	6952      	ldr	r2, [r2, #20]
 8003f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f70:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d103      	bne.n	8003f82 <HAL_DMA_IRQHandler+0x736>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d007      	beq.n	8003f92 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	f022 0208 	bic.w	r2, r2, #8
 8003f90:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	223f      	movs	r2, #63	; 0x3f
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 834a 	beq.w	8004650 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	4798      	blx	r3
          }
          return;
 8003fc4:	e344      	b.n	8004650 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d018      	beq.n	8004006 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d108      	bne.n	8003ff4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d02c      	beq.n	8004044 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4798      	blx	r3
 8003ff2:	e027      	b.n	8004044 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d023      	beq.n	8004044 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	4798      	blx	r3
 8004004:	e01e      	b.n	8004044 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10f      	bne.n	8004034 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	6812      	ldr	r2, [r2, #0]
 800401e:	f022 0210 	bic.w	r2, r2, #16
 8004022:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8306 	beq.w	800465a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8088 	beq.w	800416c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2204      	movs	r2, #4
 8004060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a7a      	ldr	r2, [pc, #488]	; (8004254 <HAL_DMA_IRQHandler+0xa08>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d04a      	beq.n	8004104 <HAL_DMA_IRQHandler+0x8b8>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a79      	ldr	r2, [pc, #484]	; (8004258 <HAL_DMA_IRQHandler+0xa0c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d045      	beq.n	8004104 <HAL_DMA_IRQHandler+0x8b8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a77      	ldr	r2, [pc, #476]	; (800425c <HAL_DMA_IRQHandler+0xa10>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d040      	beq.n	8004104 <HAL_DMA_IRQHandler+0x8b8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a76      	ldr	r2, [pc, #472]	; (8004260 <HAL_DMA_IRQHandler+0xa14>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d03b      	beq.n	8004104 <HAL_DMA_IRQHandler+0x8b8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a74      	ldr	r2, [pc, #464]	; (8004264 <HAL_DMA_IRQHandler+0xa18>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d036      	beq.n	8004104 <HAL_DMA_IRQHandler+0x8b8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a73      	ldr	r2, [pc, #460]	; (8004268 <HAL_DMA_IRQHandler+0xa1c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d031      	beq.n	8004104 <HAL_DMA_IRQHandler+0x8b8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a71      	ldr	r2, [pc, #452]	; (800426c <HAL_DMA_IRQHandler+0xa20>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d02c      	beq.n	8004104 <HAL_DMA_IRQHandler+0x8b8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a70      	ldr	r2, [pc, #448]	; (8004270 <HAL_DMA_IRQHandler+0xa24>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d027      	beq.n	8004104 <HAL_DMA_IRQHandler+0x8b8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a6e      	ldr	r2, [pc, #440]	; (8004274 <HAL_DMA_IRQHandler+0xa28>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d022      	beq.n	8004104 <HAL_DMA_IRQHandler+0x8b8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a6d      	ldr	r2, [pc, #436]	; (8004278 <HAL_DMA_IRQHandler+0xa2c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d01d      	beq.n	8004104 <HAL_DMA_IRQHandler+0x8b8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a6b      	ldr	r2, [pc, #428]	; (800427c <HAL_DMA_IRQHandler+0xa30>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d018      	beq.n	8004104 <HAL_DMA_IRQHandler+0x8b8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a6a      	ldr	r2, [pc, #424]	; (8004280 <HAL_DMA_IRQHandler+0xa34>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <HAL_DMA_IRQHandler+0x8b8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a68      	ldr	r2, [pc, #416]	; (8004284 <HAL_DMA_IRQHandler+0xa38>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00e      	beq.n	8004104 <HAL_DMA_IRQHandler+0x8b8>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a67      	ldr	r2, [pc, #412]	; (8004288 <HAL_DMA_IRQHandler+0xa3c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d009      	beq.n	8004104 <HAL_DMA_IRQHandler+0x8b8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a65      	ldr	r2, [pc, #404]	; (800428c <HAL_DMA_IRQHandler+0xa40>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <HAL_DMA_IRQHandler+0x8b8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a64      	ldr	r2, [pc, #400]	; (8004290 <HAL_DMA_IRQHandler+0xa44>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d108      	bne.n	8004116 <HAL_DMA_IRQHandler+0x8ca>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	f022 0201 	bic.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e007      	b.n	8004126 <HAL_DMA_IRQHandler+0x8da>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	f022 0201 	bic.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3301      	adds	r3, #1
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412e:	4293      	cmp	r3, r2
 8004130:	d807      	bhi.n	8004142 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f2      	bne.n	8004126 <HAL_DMA_IRQHandler+0x8da>
 8004140:	e000      	b.n	8004144 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004142:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d004      	beq.n	8004164 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2203      	movs	r2, #3
 800415e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004162:	e003      	b.n	800416c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8272 	beq.w	800465a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	4798      	blx	r3
 800417e:	e26c      	b.n	800465a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a43      	ldr	r2, [pc, #268]	; (8004294 <HAL_DMA_IRQHandler+0xa48>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d022      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x984>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a42      	ldr	r2, [pc, #264]	; (8004298 <HAL_DMA_IRQHandler+0xa4c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d01d      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x984>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a40      	ldr	r2, [pc, #256]	; (800429c <HAL_DMA_IRQHandler+0xa50>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d018      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x984>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a3f      	ldr	r2, [pc, #252]	; (80042a0 <HAL_DMA_IRQHandler+0xa54>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d013      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x984>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a3d      	ldr	r2, [pc, #244]	; (80042a4 <HAL_DMA_IRQHandler+0xa58>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00e      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x984>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a3c      	ldr	r2, [pc, #240]	; (80042a8 <HAL_DMA_IRQHandler+0xa5c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d009      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x984>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a3a      	ldr	r2, [pc, #232]	; (80042ac <HAL_DMA_IRQHandler+0xa60>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d004      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x984>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a39      	ldr	r2, [pc, #228]	; (80042b0 <HAL_DMA_IRQHandler+0xa64>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d101      	bne.n	80041d4 <HAL_DMA_IRQHandler+0x988>
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <HAL_DMA_IRQHandler+0x98a>
 80041d4:	2300      	movs	r3, #0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 823f 	beq.w	800465a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	2204      	movs	r2, #4
 80041ee:	409a      	lsls	r2, r3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80cd 	beq.w	8004394 <HAL_DMA_IRQHandler+0xb48>
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80c7 	beq.w	8004394 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	2204      	movs	r2, #4
 8004210:	409a      	lsls	r2, r3
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d049      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 8210 	beq.w	8004654 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800423c:	e20a      	b.n	8004654 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8206 	beq.w	8004654 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004250:	e200      	b.n	8004654 <HAL_DMA_IRQHandler+0xe08>
 8004252:	bf00      	nop
 8004254:	40020010 	.word	0x40020010
 8004258:	40020028 	.word	0x40020028
 800425c:	40020040 	.word	0x40020040
 8004260:	40020058 	.word	0x40020058
 8004264:	40020070 	.word	0x40020070
 8004268:	40020088 	.word	0x40020088
 800426c:	400200a0 	.word	0x400200a0
 8004270:	400200b8 	.word	0x400200b8
 8004274:	40020410 	.word	0x40020410
 8004278:	40020428 	.word	0x40020428
 800427c:	40020440 	.word	0x40020440
 8004280:	40020458 	.word	0x40020458
 8004284:	40020470 	.word	0x40020470
 8004288:	40020488 	.word	0x40020488
 800428c:	400204a0 	.word	0x400204a0
 8004290:	400204b8 	.word	0x400204b8
 8004294:	58025408 	.word	0x58025408
 8004298:	5802541c 	.word	0x5802541c
 800429c:	58025430 	.word	0x58025430
 80042a0:	58025444 	.word	0x58025444
 80042a4:	58025458 	.word	0x58025458
 80042a8:	5802546c 	.word	0x5802546c
 80042ac:	58025480 	.word	0x58025480
 80042b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d160      	bne.n	8004380 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a8c      	ldr	r2, [pc, #560]	; (80044f4 <HAL_DMA_IRQHandler+0xca8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d04a      	beq.n	800435e <HAL_DMA_IRQHandler+0xb12>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a8a      	ldr	r2, [pc, #552]	; (80044f8 <HAL_DMA_IRQHandler+0xcac>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d045      	beq.n	800435e <HAL_DMA_IRQHandler+0xb12>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a89      	ldr	r2, [pc, #548]	; (80044fc <HAL_DMA_IRQHandler+0xcb0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d040      	beq.n	800435e <HAL_DMA_IRQHandler+0xb12>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a87      	ldr	r2, [pc, #540]	; (8004500 <HAL_DMA_IRQHandler+0xcb4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d03b      	beq.n	800435e <HAL_DMA_IRQHandler+0xb12>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a86      	ldr	r2, [pc, #536]	; (8004504 <HAL_DMA_IRQHandler+0xcb8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d036      	beq.n	800435e <HAL_DMA_IRQHandler+0xb12>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a84      	ldr	r2, [pc, #528]	; (8004508 <HAL_DMA_IRQHandler+0xcbc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d031      	beq.n	800435e <HAL_DMA_IRQHandler+0xb12>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a83      	ldr	r2, [pc, #524]	; (800450c <HAL_DMA_IRQHandler+0xcc0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d02c      	beq.n	800435e <HAL_DMA_IRQHandler+0xb12>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a81      	ldr	r2, [pc, #516]	; (8004510 <HAL_DMA_IRQHandler+0xcc4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d027      	beq.n	800435e <HAL_DMA_IRQHandler+0xb12>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a80      	ldr	r2, [pc, #512]	; (8004514 <HAL_DMA_IRQHandler+0xcc8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d022      	beq.n	800435e <HAL_DMA_IRQHandler+0xb12>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a7e      	ldr	r2, [pc, #504]	; (8004518 <HAL_DMA_IRQHandler+0xccc>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d01d      	beq.n	800435e <HAL_DMA_IRQHandler+0xb12>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a7d      	ldr	r2, [pc, #500]	; (800451c <HAL_DMA_IRQHandler+0xcd0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d018      	beq.n	800435e <HAL_DMA_IRQHandler+0xb12>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a7b      	ldr	r2, [pc, #492]	; (8004520 <HAL_DMA_IRQHandler+0xcd4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d013      	beq.n	800435e <HAL_DMA_IRQHandler+0xb12>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a7a      	ldr	r2, [pc, #488]	; (8004524 <HAL_DMA_IRQHandler+0xcd8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00e      	beq.n	800435e <HAL_DMA_IRQHandler+0xb12>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a78      	ldr	r2, [pc, #480]	; (8004528 <HAL_DMA_IRQHandler+0xcdc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d009      	beq.n	800435e <HAL_DMA_IRQHandler+0xb12>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a77      	ldr	r2, [pc, #476]	; (800452c <HAL_DMA_IRQHandler+0xce0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d004      	beq.n	800435e <HAL_DMA_IRQHandler+0xb12>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a75      	ldr	r2, [pc, #468]	; (8004530 <HAL_DMA_IRQHandler+0xce4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d108      	bne.n	8004370 <HAL_DMA_IRQHandler+0xb24>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	f022 0208 	bic.w	r2, r2, #8
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	e007      	b.n	8004380 <HAL_DMA_IRQHandler+0xb34>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	f022 0204 	bic.w	r2, r2, #4
 800437e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 8165 	beq.w	8004654 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004392:	e15f      	b.n	8004654 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	2202      	movs	r2, #2
 800439e:	409a      	lsls	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 80c5 	beq.w	8004534 <HAL_DMA_IRQHandler+0xce8>
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80bf 	beq.w	8004534 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	2202      	movs	r2, #2
 80043c0:	409a      	lsls	r2, r3
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d018      	beq.n	8004402 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 813a 	beq.w	8004658 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043ec:	e134      	b.n	8004658 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 8130 	beq.w	8004658 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004400:	e12a      	b.n	8004658 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b00      	cmp	r3, #0
 800440a:	d168      	bne.n	80044de <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a38      	ldr	r2, [pc, #224]	; (80044f4 <HAL_DMA_IRQHandler+0xca8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d04a      	beq.n	80044ac <HAL_DMA_IRQHandler+0xc60>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a37      	ldr	r2, [pc, #220]	; (80044f8 <HAL_DMA_IRQHandler+0xcac>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d045      	beq.n	80044ac <HAL_DMA_IRQHandler+0xc60>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a35      	ldr	r2, [pc, #212]	; (80044fc <HAL_DMA_IRQHandler+0xcb0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d040      	beq.n	80044ac <HAL_DMA_IRQHandler+0xc60>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a34      	ldr	r2, [pc, #208]	; (8004500 <HAL_DMA_IRQHandler+0xcb4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d03b      	beq.n	80044ac <HAL_DMA_IRQHandler+0xc60>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a32      	ldr	r2, [pc, #200]	; (8004504 <HAL_DMA_IRQHandler+0xcb8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d036      	beq.n	80044ac <HAL_DMA_IRQHandler+0xc60>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a31      	ldr	r2, [pc, #196]	; (8004508 <HAL_DMA_IRQHandler+0xcbc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d031      	beq.n	80044ac <HAL_DMA_IRQHandler+0xc60>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a2f      	ldr	r2, [pc, #188]	; (800450c <HAL_DMA_IRQHandler+0xcc0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d02c      	beq.n	80044ac <HAL_DMA_IRQHandler+0xc60>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a2e      	ldr	r2, [pc, #184]	; (8004510 <HAL_DMA_IRQHandler+0xcc4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d027      	beq.n	80044ac <HAL_DMA_IRQHandler+0xc60>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a2c      	ldr	r2, [pc, #176]	; (8004514 <HAL_DMA_IRQHandler+0xcc8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d022      	beq.n	80044ac <HAL_DMA_IRQHandler+0xc60>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a2b      	ldr	r2, [pc, #172]	; (8004518 <HAL_DMA_IRQHandler+0xccc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d01d      	beq.n	80044ac <HAL_DMA_IRQHandler+0xc60>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a29      	ldr	r2, [pc, #164]	; (800451c <HAL_DMA_IRQHandler+0xcd0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d018      	beq.n	80044ac <HAL_DMA_IRQHandler+0xc60>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a28      	ldr	r2, [pc, #160]	; (8004520 <HAL_DMA_IRQHandler+0xcd4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d013      	beq.n	80044ac <HAL_DMA_IRQHandler+0xc60>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a26      	ldr	r2, [pc, #152]	; (8004524 <HAL_DMA_IRQHandler+0xcd8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00e      	beq.n	80044ac <HAL_DMA_IRQHandler+0xc60>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a25      	ldr	r2, [pc, #148]	; (8004528 <HAL_DMA_IRQHandler+0xcdc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d009      	beq.n	80044ac <HAL_DMA_IRQHandler+0xc60>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a23      	ldr	r2, [pc, #140]	; (800452c <HAL_DMA_IRQHandler+0xce0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d004      	beq.n	80044ac <HAL_DMA_IRQHandler+0xc60>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a22      	ldr	r2, [pc, #136]	; (8004530 <HAL_DMA_IRQHandler+0xce4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d108      	bne.n	80044be <HAL_DMA_IRQHandler+0xc72>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	f022 0214 	bic.w	r2, r2, #20
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e007      	b.n	80044ce <HAL_DMA_IRQHandler+0xc82>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	f022 020a 	bic.w	r2, r2, #10
 80044cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 80b8 	beq.w	8004658 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044f0:	e0b2      	b.n	8004658 <HAL_DMA_IRQHandler+0xe0c>
 80044f2:	bf00      	nop
 80044f4:	40020010 	.word	0x40020010
 80044f8:	40020028 	.word	0x40020028
 80044fc:	40020040 	.word	0x40020040
 8004500:	40020058 	.word	0x40020058
 8004504:	40020070 	.word	0x40020070
 8004508:	40020088 	.word	0x40020088
 800450c:	400200a0 	.word	0x400200a0
 8004510:	400200b8 	.word	0x400200b8
 8004514:	40020410 	.word	0x40020410
 8004518:	40020428 	.word	0x40020428
 800451c:	40020440 	.word	0x40020440
 8004520:	40020458 	.word	0x40020458
 8004524:	40020470 	.word	0x40020470
 8004528:	40020488 	.word	0x40020488
 800452c:	400204a0 	.word	0x400204a0
 8004530:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	2208      	movs	r2, #8
 800453e:	409a      	lsls	r2, r3
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	4013      	ands	r3, r2
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8088 	beq.w	800465a <HAL_DMA_IRQHandler+0xe0e>
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 8082 	beq.w	800465a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a41      	ldr	r2, [pc, #260]	; (8004660 <HAL_DMA_IRQHandler+0xe14>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d04a      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xdaa>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a3f      	ldr	r2, [pc, #252]	; (8004664 <HAL_DMA_IRQHandler+0xe18>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d045      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xdaa>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a3e      	ldr	r2, [pc, #248]	; (8004668 <HAL_DMA_IRQHandler+0xe1c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d040      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xdaa>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a3c      	ldr	r2, [pc, #240]	; (800466c <HAL_DMA_IRQHandler+0xe20>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d03b      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xdaa>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a3b      	ldr	r2, [pc, #236]	; (8004670 <HAL_DMA_IRQHandler+0xe24>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d036      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xdaa>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a39      	ldr	r2, [pc, #228]	; (8004674 <HAL_DMA_IRQHandler+0xe28>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d031      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xdaa>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a38      	ldr	r2, [pc, #224]	; (8004678 <HAL_DMA_IRQHandler+0xe2c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d02c      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xdaa>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a36      	ldr	r2, [pc, #216]	; (800467c <HAL_DMA_IRQHandler+0xe30>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d027      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xdaa>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a35      	ldr	r2, [pc, #212]	; (8004680 <HAL_DMA_IRQHandler+0xe34>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d022      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xdaa>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a33      	ldr	r2, [pc, #204]	; (8004684 <HAL_DMA_IRQHandler+0xe38>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d01d      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xdaa>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a32      	ldr	r2, [pc, #200]	; (8004688 <HAL_DMA_IRQHandler+0xe3c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d018      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xdaa>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a30      	ldr	r2, [pc, #192]	; (800468c <HAL_DMA_IRQHandler+0xe40>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d013      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xdaa>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a2f      	ldr	r2, [pc, #188]	; (8004690 <HAL_DMA_IRQHandler+0xe44>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00e      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xdaa>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a2d      	ldr	r2, [pc, #180]	; (8004694 <HAL_DMA_IRQHandler+0xe48>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d009      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xdaa>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a2c      	ldr	r2, [pc, #176]	; (8004698 <HAL_DMA_IRQHandler+0xe4c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d004      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xdaa>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a2a      	ldr	r2, [pc, #168]	; (800469c <HAL_DMA_IRQHandler+0xe50>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d108      	bne.n	8004608 <HAL_DMA_IRQHandler+0xdbc>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	f022 021c 	bic.w	r2, r2, #28
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e007      	b.n	8004618 <HAL_DMA_IRQHandler+0xdcc>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	f022 020e 	bic.w	r2, r2, #14
 8004616:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461c:	f003 031f 	and.w	r3, r3, #31
 8004620:	2201      	movs	r2, #1
 8004622:	409a      	lsls	r2, r3
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	4798      	blx	r3
 800464e:	e004      	b.n	800465a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004650:	bf00      	nop
 8004652:	e002      	b.n	800465a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004654:	bf00      	nop
 8004656:	e000      	b.n	800465a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004658:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800465a:	3728      	adds	r7, #40	; 0x28
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40020010 	.word	0x40020010
 8004664:	40020028 	.word	0x40020028
 8004668:	40020040 	.word	0x40020040
 800466c:	40020058 	.word	0x40020058
 8004670:	40020070 	.word	0x40020070
 8004674:	40020088 	.word	0x40020088
 8004678:	400200a0 	.word	0x400200a0
 800467c:	400200b8 	.word	0x400200b8
 8004680:	40020410 	.word	0x40020410
 8004684:	40020428 	.word	0x40020428
 8004688:	40020440 	.word	0x40020440
 800468c:	40020458 	.word	0x40020458
 8004690:	40020470 	.word	0x40020470
 8004694:	40020488 	.word	0x40020488
 8004698:	400204a0 	.word	0x400204a0
 800469c:	400204b8 	.word	0x400204b8

080046a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a84      	ldr	r2, [pc, #528]	; (80048d0 <DMA_SetConfig+0x230>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d072      	beq.n	80047aa <DMA_SetConfig+0x10a>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a82      	ldr	r2, [pc, #520]	; (80048d4 <DMA_SetConfig+0x234>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d06d      	beq.n	80047aa <DMA_SetConfig+0x10a>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a81      	ldr	r2, [pc, #516]	; (80048d8 <DMA_SetConfig+0x238>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d068      	beq.n	80047aa <DMA_SetConfig+0x10a>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a7f      	ldr	r2, [pc, #508]	; (80048dc <DMA_SetConfig+0x23c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d063      	beq.n	80047aa <DMA_SetConfig+0x10a>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a7e      	ldr	r2, [pc, #504]	; (80048e0 <DMA_SetConfig+0x240>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d05e      	beq.n	80047aa <DMA_SetConfig+0x10a>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a7c      	ldr	r2, [pc, #496]	; (80048e4 <DMA_SetConfig+0x244>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d059      	beq.n	80047aa <DMA_SetConfig+0x10a>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a7b      	ldr	r2, [pc, #492]	; (80048e8 <DMA_SetConfig+0x248>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d054      	beq.n	80047aa <DMA_SetConfig+0x10a>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a79      	ldr	r2, [pc, #484]	; (80048ec <DMA_SetConfig+0x24c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d04f      	beq.n	80047aa <DMA_SetConfig+0x10a>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a78      	ldr	r2, [pc, #480]	; (80048f0 <DMA_SetConfig+0x250>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d04a      	beq.n	80047aa <DMA_SetConfig+0x10a>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a76      	ldr	r2, [pc, #472]	; (80048f4 <DMA_SetConfig+0x254>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d045      	beq.n	80047aa <DMA_SetConfig+0x10a>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a75      	ldr	r2, [pc, #468]	; (80048f8 <DMA_SetConfig+0x258>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d040      	beq.n	80047aa <DMA_SetConfig+0x10a>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a73      	ldr	r2, [pc, #460]	; (80048fc <DMA_SetConfig+0x25c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d03b      	beq.n	80047aa <DMA_SetConfig+0x10a>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a72      	ldr	r2, [pc, #456]	; (8004900 <DMA_SetConfig+0x260>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d036      	beq.n	80047aa <DMA_SetConfig+0x10a>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a70      	ldr	r2, [pc, #448]	; (8004904 <DMA_SetConfig+0x264>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d031      	beq.n	80047aa <DMA_SetConfig+0x10a>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a6f      	ldr	r2, [pc, #444]	; (8004908 <DMA_SetConfig+0x268>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d02c      	beq.n	80047aa <DMA_SetConfig+0x10a>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a6d      	ldr	r2, [pc, #436]	; (800490c <DMA_SetConfig+0x26c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d027      	beq.n	80047aa <DMA_SetConfig+0x10a>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a6c      	ldr	r2, [pc, #432]	; (8004910 <DMA_SetConfig+0x270>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d022      	beq.n	80047aa <DMA_SetConfig+0x10a>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a6a      	ldr	r2, [pc, #424]	; (8004914 <DMA_SetConfig+0x274>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d01d      	beq.n	80047aa <DMA_SetConfig+0x10a>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a69      	ldr	r2, [pc, #420]	; (8004918 <DMA_SetConfig+0x278>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d018      	beq.n	80047aa <DMA_SetConfig+0x10a>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a67      	ldr	r2, [pc, #412]	; (800491c <DMA_SetConfig+0x27c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <DMA_SetConfig+0x10a>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a66      	ldr	r2, [pc, #408]	; (8004920 <DMA_SetConfig+0x280>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00e      	beq.n	80047aa <DMA_SetConfig+0x10a>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a64      	ldr	r2, [pc, #400]	; (8004924 <DMA_SetConfig+0x284>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d009      	beq.n	80047aa <DMA_SetConfig+0x10a>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a63      	ldr	r2, [pc, #396]	; (8004928 <DMA_SetConfig+0x288>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d004      	beq.n	80047aa <DMA_SetConfig+0x10a>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a61      	ldr	r2, [pc, #388]	; (800492c <DMA_SetConfig+0x28c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d101      	bne.n	80047ae <DMA_SetConfig+0x10e>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <DMA_SetConfig+0x110>
 80047ae:	2300      	movs	r3, #0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80047bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a3e      	ldr	r2, [pc, #248]	; (80048d0 <DMA_SetConfig+0x230>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d04a      	beq.n	8004870 <DMA_SetConfig+0x1d0>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a3d      	ldr	r2, [pc, #244]	; (80048d4 <DMA_SetConfig+0x234>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d045      	beq.n	8004870 <DMA_SetConfig+0x1d0>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a3b      	ldr	r2, [pc, #236]	; (80048d8 <DMA_SetConfig+0x238>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d040      	beq.n	8004870 <DMA_SetConfig+0x1d0>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a3a      	ldr	r2, [pc, #232]	; (80048dc <DMA_SetConfig+0x23c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d03b      	beq.n	8004870 <DMA_SetConfig+0x1d0>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a38      	ldr	r2, [pc, #224]	; (80048e0 <DMA_SetConfig+0x240>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d036      	beq.n	8004870 <DMA_SetConfig+0x1d0>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a37      	ldr	r2, [pc, #220]	; (80048e4 <DMA_SetConfig+0x244>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d031      	beq.n	8004870 <DMA_SetConfig+0x1d0>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a35      	ldr	r2, [pc, #212]	; (80048e8 <DMA_SetConfig+0x248>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d02c      	beq.n	8004870 <DMA_SetConfig+0x1d0>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a34      	ldr	r2, [pc, #208]	; (80048ec <DMA_SetConfig+0x24c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d027      	beq.n	8004870 <DMA_SetConfig+0x1d0>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a32      	ldr	r2, [pc, #200]	; (80048f0 <DMA_SetConfig+0x250>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d022      	beq.n	8004870 <DMA_SetConfig+0x1d0>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a31      	ldr	r2, [pc, #196]	; (80048f4 <DMA_SetConfig+0x254>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d01d      	beq.n	8004870 <DMA_SetConfig+0x1d0>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a2f      	ldr	r2, [pc, #188]	; (80048f8 <DMA_SetConfig+0x258>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d018      	beq.n	8004870 <DMA_SetConfig+0x1d0>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a2e      	ldr	r2, [pc, #184]	; (80048fc <DMA_SetConfig+0x25c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <DMA_SetConfig+0x1d0>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a2c      	ldr	r2, [pc, #176]	; (8004900 <DMA_SetConfig+0x260>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00e      	beq.n	8004870 <DMA_SetConfig+0x1d0>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a2b      	ldr	r2, [pc, #172]	; (8004904 <DMA_SetConfig+0x264>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d009      	beq.n	8004870 <DMA_SetConfig+0x1d0>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a29      	ldr	r2, [pc, #164]	; (8004908 <DMA_SetConfig+0x268>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <DMA_SetConfig+0x1d0>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a28      	ldr	r2, [pc, #160]	; (800490c <DMA_SetConfig+0x26c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d101      	bne.n	8004874 <DMA_SetConfig+0x1d4>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <DMA_SetConfig+0x1d6>
 8004874:	2300      	movs	r3, #0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d05a      	beq.n	8004930 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	223f      	movs	r2, #63	; 0x3f
 8004884:	409a      	lsls	r2, r3
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004898:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b40      	cmp	r3, #64	; 0x40
 80048a8:	d108      	bne.n	80048bc <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80048ba:	e087      	b.n	80049cc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	60da      	str	r2, [r3, #12]
}
 80048cc:	e07e      	b.n	80049cc <DMA_SetConfig+0x32c>
 80048ce:	bf00      	nop
 80048d0:	40020010 	.word	0x40020010
 80048d4:	40020028 	.word	0x40020028
 80048d8:	40020040 	.word	0x40020040
 80048dc:	40020058 	.word	0x40020058
 80048e0:	40020070 	.word	0x40020070
 80048e4:	40020088 	.word	0x40020088
 80048e8:	400200a0 	.word	0x400200a0
 80048ec:	400200b8 	.word	0x400200b8
 80048f0:	40020410 	.word	0x40020410
 80048f4:	40020428 	.word	0x40020428
 80048f8:	40020440 	.word	0x40020440
 80048fc:	40020458 	.word	0x40020458
 8004900:	40020470 	.word	0x40020470
 8004904:	40020488 	.word	0x40020488
 8004908:	400204a0 	.word	0x400204a0
 800490c:	400204b8 	.word	0x400204b8
 8004910:	58025408 	.word	0x58025408
 8004914:	5802541c 	.word	0x5802541c
 8004918:	58025430 	.word	0x58025430
 800491c:	58025444 	.word	0x58025444
 8004920:	58025458 	.word	0x58025458
 8004924:	5802546c 	.word	0x5802546c
 8004928:	58025480 	.word	0x58025480
 800492c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a28      	ldr	r2, [pc, #160]	; (80049d8 <DMA_SetConfig+0x338>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d022      	beq.n	8004980 <DMA_SetConfig+0x2e0>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a27      	ldr	r2, [pc, #156]	; (80049dc <DMA_SetConfig+0x33c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d01d      	beq.n	8004980 <DMA_SetConfig+0x2e0>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a25      	ldr	r2, [pc, #148]	; (80049e0 <DMA_SetConfig+0x340>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d018      	beq.n	8004980 <DMA_SetConfig+0x2e0>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a24      	ldr	r2, [pc, #144]	; (80049e4 <DMA_SetConfig+0x344>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d013      	beq.n	8004980 <DMA_SetConfig+0x2e0>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a22      	ldr	r2, [pc, #136]	; (80049e8 <DMA_SetConfig+0x348>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00e      	beq.n	8004980 <DMA_SetConfig+0x2e0>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a21      	ldr	r2, [pc, #132]	; (80049ec <DMA_SetConfig+0x34c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d009      	beq.n	8004980 <DMA_SetConfig+0x2e0>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1f      	ldr	r2, [pc, #124]	; (80049f0 <DMA_SetConfig+0x350>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d004      	beq.n	8004980 <DMA_SetConfig+0x2e0>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1e      	ldr	r2, [pc, #120]	; (80049f4 <DMA_SetConfig+0x354>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d101      	bne.n	8004984 <DMA_SetConfig+0x2e4>
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <DMA_SetConfig+0x2e6>
 8004984:	2300      	movs	r3, #0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d020      	beq.n	80049cc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	2201      	movs	r2, #1
 8004994:	409a      	lsls	r2, r3
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d108      	bne.n	80049bc <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	60da      	str	r2, [r3, #12]
}
 80049ba:	e007      	b.n	80049cc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	60da      	str	r2, [r3, #12]
}
 80049cc:	bf00      	nop
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	58025408 	.word	0x58025408
 80049dc:	5802541c 	.word	0x5802541c
 80049e0:	58025430 	.word	0x58025430
 80049e4:	58025444 	.word	0x58025444
 80049e8:	58025458 	.word	0x58025458
 80049ec:	5802546c 	.word	0x5802546c
 80049f0:	58025480 	.word	0x58025480
 80049f4:	58025494 	.word	0x58025494

080049f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a42      	ldr	r2, [pc, #264]	; (8004b10 <DMA_CalcBaseAndBitshift+0x118>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d04a      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a41      	ldr	r2, [pc, #260]	; (8004b14 <DMA_CalcBaseAndBitshift+0x11c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d045      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a3f      	ldr	r2, [pc, #252]	; (8004b18 <DMA_CalcBaseAndBitshift+0x120>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d040      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a3e      	ldr	r2, [pc, #248]	; (8004b1c <DMA_CalcBaseAndBitshift+0x124>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d03b      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a3c      	ldr	r2, [pc, #240]	; (8004b20 <DMA_CalcBaseAndBitshift+0x128>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d036      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a3b      	ldr	r2, [pc, #236]	; (8004b24 <DMA_CalcBaseAndBitshift+0x12c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d031      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a39      	ldr	r2, [pc, #228]	; (8004b28 <DMA_CalcBaseAndBitshift+0x130>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d02c      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a38      	ldr	r2, [pc, #224]	; (8004b2c <DMA_CalcBaseAndBitshift+0x134>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d027      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a36      	ldr	r2, [pc, #216]	; (8004b30 <DMA_CalcBaseAndBitshift+0x138>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d022      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a35      	ldr	r2, [pc, #212]	; (8004b34 <DMA_CalcBaseAndBitshift+0x13c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d01d      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a33      	ldr	r2, [pc, #204]	; (8004b38 <DMA_CalcBaseAndBitshift+0x140>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d018      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a32      	ldr	r2, [pc, #200]	; (8004b3c <DMA_CalcBaseAndBitshift+0x144>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a30      	ldr	r2, [pc, #192]	; (8004b40 <DMA_CalcBaseAndBitshift+0x148>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00e      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2f      	ldr	r2, [pc, #188]	; (8004b44 <DMA_CalcBaseAndBitshift+0x14c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a2d      	ldr	r2, [pc, #180]	; (8004b48 <DMA_CalcBaseAndBitshift+0x150>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a2c      	ldr	r2, [pc, #176]	; (8004b4c <DMA_CalcBaseAndBitshift+0x154>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d101      	bne.n	8004aa4 <DMA_CalcBaseAndBitshift+0xac>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <DMA_CalcBaseAndBitshift+0xae>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d024      	beq.n	8004af4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	3b10      	subs	r3, #16
 8004ab2:	4a27      	ldr	r2, [pc, #156]	; (8004b50 <DMA_CalcBaseAndBitshift+0x158>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	4a24      	ldr	r2, [pc, #144]	; (8004b54 <DMA_CalcBaseAndBitshift+0x15c>)
 8004ac4:	5cd3      	ldrb	r3, [r2, r3]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d908      	bls.n	8004ae4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4b1f      	ldr	r3, [pc, #124]	; (8004b58 <DMA_CalcBaseAndBitshift+0x160>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	1d1a      	adds	r2, r3, #4
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	659a      	str	r2, [r3, #88]	; 0x58
 8004ae2:	e00d      	b.n	8004b00 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	4b1b      	ldr	r3, [pc, #108]	; (8004b58 <DMA_CalcBaseAndBitshift+0x160>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6593      	str	r3, [r2, #88]	; 0x58
 8004af2:	e005      	b.n	8004b00 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40020010 	.word	0x40020010
 8004b14:	40020028 	.word	0x40020028
 8004b18:	40020040 	.word	0x40020040
 8004b1c:	40020058 	.word	0x40020058
 8004b20:	40020070 	.word	0x40020070
 8004b24:	40020088 	.word	0x40020088
 8004b28:	400200a0 	.word	0x400200a0
 8004b2c:	400200b8 	.word	0x400200b8
 8004b30:	40020410 	.word	0x40020410
 8004b34:	40020428 	.word	0x40020428
 8004b38:	40020440 	.word	0x40020440
 8004b3c:	40020458 	.word	0x40020458
 8004b40:	40020470 	.word	0x40020470
 8004b44:	40020488 	.word	0x40020488
 8004b48:	400204a0 	.word	0x400204a0
 8004b4c:	400204b8 	.word	0x400204b8
 8004b50:	aaaaaaab 	.word	0xaaaaaaab
 8004b54:	0800c6f0 	.word	0x0800c6f0
 8004b58:	fffffc00 	.word	0xfffffc00

08004b5c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d120      	bne.n	8004bb2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d858      	bhi.n	8004c2a <DMA_CheckFifoParam+0xce>
 8004b78:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <DMA_CheckFifoParam+0x24>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004ba3 	.word	0x08004ba3
 8004b88:	08004b91 	.word	0x08004b91
 8004b8c:	08004c2b 	.word	0x08004c2b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d048      	beq.n	8004c2e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ba0:	e045      	b.n	8004c2e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004baa:	d142      	bne.n	8004c32 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bb0:	e03f      	b.n	8004c32 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bba:	d123      	bne.n	8004c04 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d838      	bhi.n	8004c36 <DMA_CheckFifoParam+0xda>
 8004bc4:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <DMA_CheckFifoParam+0x70>)
 8004bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bca:	bf00      	nop
 8004bcc:	08004bdd 	.word	0x08004bdd
 8004bd0:	08004be3 	.word	0x08004be3
 8004bd4:	08004bdd 	.word	0x08004bdd
 8004bd8:	08004bf5 	.word	0x08004bf5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	73fb      	strb	r3, [r7, #15]
        break;
 8004be0:	e030      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d025      	beq.n	8004c3a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bf2:	e022      	b.n	8004c3a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bfc:	d11f      	bne.n	8004c3e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c02:	e01c      	b.n	8004c3e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d902      	bls.n	8004c12 <DMA_CheckFifoParam+0xb6>
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d003      	beq.n	8004c18 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004c10:	e018      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
        break;
 8004c16:	e015      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00e      	beq.n	8004c42 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
    break;
 8004c28:	e00b      	b.n	8004c42 <DMA_CheckFifoParam+0xe6>
        break;
 8004c2a:	bf00      	nop
 8004c2c:	e00a      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
        break;
 8004c2e:	bf00      	nop
 8004c30:	e008      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
        break;
 8004c32:	bf00      	nop
 8004c34:	e006      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
        break;
 8004c36:	bf00      	nop
 8004c38:	e004      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
        break;
 8004c3a:	bf00      	nop
 8004c3c:	e002      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
        break;
 8004c3e:	bf00      	nop
 8004c40:	e000      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
    break;
 8004c42:	bf00      	nop
    }
  }

  return status;
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop

08004c54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a38      	ldr	r2, [pc, #224]	; (8004d48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d022      	beq.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a36      	ldr	r2, [pc, #216]	; (8004d4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01d      	beq.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a35      	ldr	r2, [pc, #212]	; (8004d50 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d018      	beq.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a33      	ldr	r2, [pc, #204]	; (8004d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a32      	ldr	r2, [pc, #200]	; (8004d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00e      	beq.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a30      	ldr	r2, [pc, #192]	; (8004d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d009      	beq.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a2f      	ldr	r2, [pc, #188]	; (8004d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a2d      	ldr	r2, [pc, #180]	; (8004d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d101      	bne.n	8004cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01a      	beq.n	8004cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	3b08      	subs	r3, #8
 8004cc4:	4a28      	ldr	r2, [pc, #160]	; (8004d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cca:	091b      	lsrs	r3, r3, #4
 8004ccc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4b26      	ldr	r3, [pc, #152]	; (8004d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a24      	ldr	r2, [pc, #144]	; (8004d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ce0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	2201      	movs	r2, #1
 8004cea:	409a      	lsls	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004cf0:	e024      	b.n	8004d3c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	3b10      	subs	r3, #16
 8004cfa:	4a1e      	ldr	r2, [pc, #120]	; (8004d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d806      	bhi.n	8004d1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4a1b      	ldr	r2, [pc, #108]	; (8004d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d902      	bls.n	8004d1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3308      	adds	r3, #8
 8004d18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4b18      	ldr	r3, [pc, #96]	; (8004d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	461a      	mov	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a16      	ldr	r2, [pc, #88]	; (8004d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004d2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	2201      	movs	r2, #1
 8004d36:	409a      	lsls	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d3c:	bf00      	nop
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	58025408 	.word	0x58025408
 8004d4c:	5802541c 	.word	0x5802541c
 8004d50:	58025430 	.word	0x58025430
 8004d54:	58025444 	.word	0x58025444
 8004d58:	58025458 	.word	0x58025458
 8004d5c:	5802546c 	.word	0x5802546c
 8004d60:	58025480 	.word	0x58025480
 8004d64:	58025494 	.word	0x58025494
 8004d68:	cccccccd 	.word	0xcccccccd
 8004d6c:	16009600 	.word	0x16009600
 8004d70:	58025880 	.word	0x58025880
 8004d74:	aaaaaaab 	.word	0xaaaaaaab
 8004d78:	400204b8 	.word	0x400204b8
 8004d7c:	4002040f 	.word	0x4002040f
 8004d80:	10008200 	.word	0x10008200
 8004d84:	40020880 	.word	0x40020880

08004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d04a      	beq.n	8004e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d847      	bhi.n	8004e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a25      	ldr	r2, [pc, #148]	; (8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d022      	beq.n	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a24      	ldr	r2, [pc, #144]	; (8004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d01d      	beq.n	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a22      	ldr	r2, [pc, #136]	; (8004e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d018      	beq.n	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a21      	ldr	r2, [pc, #132]	; (8004e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d013      	beq.n	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1f      	ldr	r2, [pc, #124]	; (8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00e      	beq.n	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d009      	beq.n	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1c      	ldr	r2, [pc, #112]	; (8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1b      	ldr	r2, [pc, #108]	; (8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d101      	bne.n	8004df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	461a      	mov	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004e10:	671a      	str	r2, [r3, #112]	; 0x70
 8004e12:	e009      	b.n	8004e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a11      	ldr	r2, [pc, #68]	; (8004e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004e26:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004e34:	bf00      	nop
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	58025408 	.word	0x58025408
 8004e44:	5802541c 	.word	0x5802541c
 8004e48:	58025430 	.word	0x58025430
 8004e4c:	58025444 	.word	0x58025444
 8004e50:	58025458 	.word	0x58025458
 8004e54:	5802546c 	.word	0x5802546c
 8004e58:	58025480 	.word	0x58025480
 8004e5c:	58025494 	.word	0x58025494
 8004e60:	1600963f 	.word	0x1600963f
 8004e64:	58025940 	.word	0x58025940
 8004e68:	1000823f 	.word	0x1000823f
 8004e6c:	40020940 	.word	0x40020940

08004e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b089      	sub	sp, #36	; 0x24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e7e:	4b89      	ldr	r3, [pc, #548]	; (80050a4 <HAL_GPIO_Init+0x234>)
 8004e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e82:	e194      	b.n	80051ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	2101      	movs	r1, #1
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	4013      	ands	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 8186 	beq.w	80051a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d00b      	beq.n	8004ebc <HAL_GPIO_Init+0x4c>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d007      	beq.n	8004ebc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004eb0:	2b11      	cmp	r3, #17
 8004eb2:	d003      	beq.n	8004ebc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b12      	cmp	r3, #18
 8004eba:	d130      	bne.n	8004f1e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	43db      	mvns	r3, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4013      	ands	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	091b      	lsrs	r3, r3, #4
 8004f08:	f003 0201 	and.w	r2, r3, #1
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	2203      	movs	r2, #3
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	4013      	ands	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d003      	beq.n	8004f5e <HAL_GPIO_Init+0xee>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b12      	cmp	r3, #18
 8004f5c:	d123      	bne.n	8004fa6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	08da      	lsrs	r2, r3, #3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3208      	adds	r2, #8
 8004f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	220f      	movs	r2, #15
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	08da      	lsrs	r2, r3, #3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3208      	adds	r2, #8
 8004fa0:	69b9      	ldr	r1, [r7, #24]
 8004fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	2203      	movs	r2, #3
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	43db      	mvns	r3, r3
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f003 0203 	and.w	r2, r3, #3
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 80e0 	beq.w	80051a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fe8:	4a2f      	ldr	r2, [pc, #188]	; (80050a8 <HAL_GPIO_Init+0x238>)
 8004fea:	4b2f      	ldr	r3, [pc, #188]	; (80050a8 <HAL_GPIO_Init+0x238>)
 8004fec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ff0:	f043 0302 	orr.w	r3, r3, #2
 8004ff4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ff8:	4b2b      	ldr	r3, [pc, #172]	; (80050a8 <HAL_GPIO_Init+0x238>)
 8004ffa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005006:	4a29      	ldr	r2, [pc, #164]	; (80050ac <HAL_GPIO_Init+0x23c>)
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	089b      	lsrs	r3, r3, #2
 800500c:	3302      	adds	r3, #2
 800500e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	220f      	movs	r2, #15
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a20      	ldr	r2, [pc, #128]	; (80050b0 <HAL_GPIO_Init+0x240>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d052      	beq.n	80050d8 <HAL_GPIO_Init+0x268>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1f      	ldr	r2, [pc, #124]	; (80050b4 <HAL_GPIO_Init+0x244>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d031      	beq.n	800509e <HAL_GPIO_Init+0x22e>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a1e      	ldr	r2, [pc, #120]	; (80050b8 <HAL_GPIO_Init+0x248>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d02b      	beq.n	800509a <HAL_GPIO_Init+0x22a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a1d      	ldr	r2, [pc, #116]	; (80050bc <HAL_GPIO_Init+0x24c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d025      	beq.n	8005096 <HAL_GPIO_Init+0x226>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a1c      	ldr	r2, [pc, #112]	; (80050c0 <HAL_GPIO_Init+0x250>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d01f      	beq.n	8005092 <HAL_GPIO_Init+0x222>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a1b      	ldr	r2, [pc, #108]	; (80050c4 <HAL_GPIO_Init+0x254>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d019      	beq.n	800508e <HAL_GPIO_Init+0x21e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a1a      	ldr	r2, [pc, #104]	; (80050c8 <HAL_GPIO_Init+0x258>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d013      	beq.n	800508a <HAL_GPIO_Init+0x21a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a19      	ldr	r2, [pc, #100]	; (80050cc <HAL_GPIO_Init+0x25c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00d      	beq.n	8005086 <HAL_GPIO_Init+0x216>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a18      	ldr	r2, [pc, #96]	; (80050d0 <HAL_GPIO_Init+0x260>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d007      	beq.n	8005082 <HAL_GPIO_Init+0x212>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a17      	ldr	r2, [pc, #92]	; (80050d4 <HAL_GPIO_Init+0x264>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d101      	bne.n	800507e <HAL_GPIO_Init+0x20e>
 800507a:	2309      	movs	r3, #9
 800507c:	e02d      	b.n	80050da <HAL_GPIO_Init+0x26a>
 800507e:	230a      	movs	r3, #10
 8005080:	e02b      	b.n	80050da <HAL_GPIO_Init+0x26a>
 8005082:	2308      	movs	r3, #8
 8005084:	e029      	b.n	80050da <HAL_GPIO_Init+0x26a>
 8005086:	2307      	movs	r3, #7
 8005088:	e027      	b.n	80050da <HAL_GPIO_Init+0x26a>
 800508a:	2306      	movs	r3, #6
 800508c:	e025      	b.n	80050da <HAL_GPIO_Init+0x26a>
 800508e:	2305      	movs	r3, #5
 8005090:	e023      	b.n	80050da <HAL_GPIO_Init+0x26a>
 8005092:	2304      	movs	r3, #4
 8005094:	e021      	b.n	80050da <HAL_GPIO_Init+0x26a>
 8005096:	2303      	movs	r3, #3
 8005098:	e01f      	b.n	80050da <HAL_GPIO_Init+0x26a>
 800509a:	2302      	movs	r3, #2
 800509c:	e01d      	b.n	80050da <HAL_GPIO_Init+0x26a>
 800509e:	2301      	movs	r3, #1
 80050a0:	e01b      	b.n	80050da <HAL_GPIO_Init+0x26a>
 80050a2:	bf00      	nop
 80050a4:	58000080 	.word	0x58000080
 80050a8:	58024400 	.word	0x58024400
 80050ac:	58000400 	.word	0x58000400
 80050b0:	58020000 	.word	0x58020000
 80050b4:	58020400 	.word	0x58020400
 80050b8:	58020800 	.word	0x58020800
 80050bc:	58020c00 	.word	0x58020c00
 80050c0:	58021000 	.word	0x58021000
 80050c4:	58021400 	.word	0x58021400
 80050c8:	58021800 	.word	0x58021800
 80050cc:	58021c00 	.word	0x58021c00
 80050d0:	58022000 	.word	0x58022000
 80050d4:	58022400 	.word	0x58022400
 80050d8:	2300      	movs	r3, #0
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	f002 0203 	and.w	r2, r2, #3
 80050e0:	0092      	lsls	r2, r2, #2
 80050e2:	4093      	lsls	r3, r2
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050ea:	4938      	ldr	r1, [pc, #224]	; (80051cc <HAL_GPIO_Init+0x35c>)
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	089b      	lsrs	r3, r3, #2
 80050f0:	3302      	adds	r3, #2
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	43db      	mvns	r3, r3
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4013      	ands	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	43db      	mvns	r3, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4013      	ands	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800514c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	43db      	mvns	r3, r3
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	4013      	ands	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800517a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	43db      	mvns	r3, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4013      	ands	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80051a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	3301      	adds	r3, #1
 80051ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	fa22 f303 	lsr.w	r3, r2, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f47f ae63 	bne.w	8004e84 <HAL_GPIO_Init+0x14>
  }
}
 80051be:	bf00      	nop
 80051c0:	3724      	adds	r7, #36	; 0x24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	58000400 	.word	0x58000400

080051d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	807b      	strh	r3, [r7, #2]
 80051dc:	4613      	mov	r3, r2
 80051de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051e0:	787b      	ldrb	r3, [r7, #1]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051e6:	887a      	ldrh	r2, [r7, #2]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80051ec:	e003      	b.n	80051f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051ee:	887b      	ldrh	r3, [r7, #2]
 80051f0:	041a      	lsls	r2, r3, #16
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	619a      	str	r2, [r3, #24]
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005202:	b480      	push	{r7}
 8005204:	b085      	sub	sp, #20
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	460b      	mov	r3, r1
 800520c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005214:	887a      	ldrh	r2, [r7, #2]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4013      	ands	r3, r2
 800521a:	041a      	lsls	r2, r3, #16
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	43d9      	mvns	r1, r3
 8005220:	887b      	ldrh	r3, [r7, #2]
 8005222:	400b      	ands	r3, r1
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	619a      	str	r2, [r3, #24]
}
 800522a:	bf00      	nop
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005240:	4b19      	ldr	r3, [pc, #100]	; (80052a8 <HAL_PWREx_ConfigSupply+0x70>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b04      	cmp	r3, #4
 800524a:	d00a      	beq.n	8005262 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800524c:	4b16      	ldr	r3, [pc, #88]	; (80052a8 <HAL_PWREx_ConfigSupply+0x70>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0207 	and.w	r2, r3, #7
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	429a      	cmp	r2, r3
 8005258:	d001      	beq.n	800525e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e01f      	b.n	800529e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	e01d      	b.n	800529e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005262:	4911      	ldr	r1, [pc, #68]	; (80052a8 <HAL_PWREx_ConfigSupply+0x70>)
 8005264:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <HAL_PWREx_ConfigSupply+0x70>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f023 0207 	bic.w	r2, r3, #7
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4313      	orrs	r3, r2
 8005270:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005272:	f7fb fa3f 	bl	80006f4 <HAL_GetTick>
 8005276:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005278:	e009      	b.n	800528e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800527a:	f7fb fa3b 	bl	80006f4 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005288:	d901      	bls.n	800528e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e007      	b.n	800529e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800528e:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <HAL_PWREx_ConfigSupply+0x70>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529a:	d1ee      	bne.n	800527a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	58024800 	.word	0x58024800

080052ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08c      	sub	sp, #48	; 0x30
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e3ff      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 8087 	beq.w	80053da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052cc:	4b99      	ldr	r3, [pc, #612]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052d6:	4b97      	ldr	r3, [pc, #604]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d007      	beq.n	80052f2 <HAL_RCC_OscConfig+0x46>
 80052e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e4:	2b18      	cmp	r3, #24
 80052e6:	d110      	bne.n	800530a <HAL_RCC_OscConfig+0x5e>
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d10b      	bne.n	800530a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f2:	4b90      	ldr	r3, [pc, #576]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d06c      	beq.n	80053d8 <HAL_RCC_OscConfig+0x12c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d168      	bne.n	80053d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e3d9      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005312:	d106      	bne.n	8005322 <HAL_RCC_OscConfig+0x76>
 8005314:	4a87      	ldr	r2, [pc, #540]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005316:	4b87      	ldr	r3, [pc, #540]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	e02e      	b.n	8005380 <HAL_RCC_OscConfig+0xd4>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10c      	bne.n	8005344 <HAL_RCC_OscConfig+0x98>
 800532a:	4a82      	ldr	r2, [pc, #520]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800532c:	4b81      	ldr	r3, [pc, #516]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	4a7f      	ldr	r2, [pc, #508]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005338:	4b7e      	ldr	r3, [pc, #504]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	e01d      	b.n	8005380 <HAL_RCC_OscConfig+0xd4>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800534c:	d10c      	bne.n	8005368 <HAL_RCC_OscConfig+0xbc>
 800534e:	4a79      	ldr	r2, [pc, #484]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005350:	4b78      	ldr	r3, [pc, #480]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	4a76      	ldr	r2, [pc, #472]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800535c:	4b75      	ldr	r3, [pc, #468]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	e00b      	b.n	8005380 <HAL_RCC_OscConfig+0xd4>
 8005368:	4a72      	ldr	r2, [pc, #456]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800536a:	4b72      	ldr	r3, [pc, #456]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	4a6f      	ldr	r2, [pc, #444]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005376:	4b6f      	ldr	r3, [pc, #444]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800537e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d013      	beq.n	80053b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005388:	f7fb f9b4 	bl	80006f4 <HAL_GetTick>
 800538c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005390:	f7fb f9b0 	bl	80006f4 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b64      	cmp	r3, #100	; 0x64
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e38d      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053a2:	4b64      	ldr	r3, [pc, #400]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCC_OscConfig+0xe4>
 80053ae:	e014      	b.n	80053da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b0:	f7fb f9a0 	bl	80006f4 <HAL_GetTick>
 80053b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b8:	f7fb f99c 	bl	80006f4 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b64      	cmp	r3, #100	; 0x64
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e379      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053ca:	4b5a      	ldr	r3, [pc, #360]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1f0      	bne.n	80053b8 <HAL_RCC_OscConfig+0x10c>
 80053d6:	e000      	b.n	80053da <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 80ae 	beq.w	8005544 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053e8:	4b52      	ldr	r3, [pc, #328]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053f2:	4b50      	ldr	r3, [pc, #320]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <HAL_RCC_OscConfig+0x162>
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	2b18      	cmp	r3, #24
 8005402:	d13a      	bne.n	800547a <HAL_RCC_OscConfig+0x1ce>
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d135      	bne.n	800547a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800540e:	4b49      	ldr	r3, [pc, #292]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <HAL_RCC_OscConfig+0x17a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e34b      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005426:	f7fb f993 	bl	8000750 <HAL_GetREVID>
 800542a:	4602      	mov	r2, r0
 800542c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005430:	429a      	cmp	r2, r3
 8005432:	d817      	bhi.n	8005464 <HAL_RCC_OscConfig+0x1b8>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2b40      	cmp	r3, #64	; 0x40
 800543a:	d108      	bne.n	800544e <HAL_RCC_OscConfig+0x1a2>
 800543c:	4a3d      	ldr	r2, [pc, #244]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800543e:	4b3d      	ldr	r3, [pc, #244]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800544a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800544c:	e07a      	b.n	8005544 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800544e:	4939      	ldr	r1, [pc, #228]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005450:	4b38      	ldr	r3, [pc, #224]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	031b      	lsls	r3, r3, #12
 800545e:	4313      	orrs	r3, r2
 8005460:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005462:	e06f      	b.n	8005544 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005464:	4933      	ldr	r1, [pc, #204]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005466:	4b33      	ldr	r3, [pc, #204]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	061b      	lsls	r3, r3, #24
 8005474:	4313      	orrs	r3, r2
 8005476:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005478:	e064      	b.n	8005544 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d045      	beq.n	800550e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005482:	492c      	ldr	r1, [pc, #176]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005484:	4b2b      	ldr	r3, [pc, #172]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f023 0219 	bic.w	r2, r3, #25
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005494:	f7fb f92e 	bl	80006f4 <HAL_GetTick>
 8005498:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800549c:	f7fb f92a 	bl	80006f4 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e307      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054ae:	4b21      	ldr	r3, [pc, #132]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ba:	f7fb f949 	bl	8000750 <HAL_GetREVID>
 80054be:	4602      	mov	r2, r0
 80054c0:	f241 0303 	movw	r3, #4099	; 0x1003
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d817      	bhi.n	80054f8 <HAL_RCC_OscConfig+0x24c>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	2b40      	cmp	r3, #64	; 0x40
 80054ce:	d108      	bne.n	80054e2 <HAL_RCC_OscConfig+0x236>
 80054d0:	4a18      	ldr	r2, [pc, #96]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054d2:	4b18      	ldr	r3, [pc, #96]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054de:	6053      	str	r3, [r2, #4]
 80054e0:	e030      	b.n	8005544 <HAL_RCC_OscConfig+0x298>
 80054e2:	4914      	ldr	r1, [pc, #80]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054e4:	4b13      	ldr	r3, [pc, #76]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	031b      	lsls	r3, r3, #12
 80054f2:	4313      	orrs	r3, r2
 80054f4:	604b      	str	r3, [r1, #4]
 80054f6:	e025      	b.n	8005544 <HAL_RCC_OscConfig+0x298>
 80054f8:	490e      	ldr	r1, [pc, #56]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054fa:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	061b      	lsls	r3, r3, #24
 8005508:	4313      	orrs	r3, r2
 800550a:	604b      	str	r3, [r1, #4]
 800550c:	e01a      	b.n	8005544 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800550e:	4a09      	ldr	r2, [pc, #36]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005510:	4b08      	ldr	r3, [pc, #32]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f023 0301 	bic.w	r3, r3, #1
 8005518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551a:	f7fb f8eb 	bl	80006f4 <HAL_GetTick>
 800551e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005520:	e00a      	b.n	8005538 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005522:	f7fb f8e7 	bl	80006f4 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d903      	bls.n	8005538 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e2c4      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
 8005534:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005538:	4ba4      	ldr	r3, [pc, #656]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1ee      	bne.n	8005522 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 80a9 	beq.w	80056a4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005552:	4b9e      	ldr	r3, [pc, #632]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800555a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800555c:	4b9b      	ldr	r3, [pc, #620]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800555e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005560:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d007      	beq.n	8005578 <HAL_RCC_OscConfig+0x2cc>
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2b18      	cmp	r3, #24
 800556c:	d13a      	bne.n	80055e4 <HAL_RCC_OscConfig+0x338>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	2b01      	cmp	r3, #1
 8005576:	d135      	bne.n	80055e4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005578:	4b94      	ldr	r3, [pc, #592]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d005      	beq.n	8005590 <HAL_RCC_OscConfig+0x2e4>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	2b80      	cmp	r3, #128	; 0x80
 800558a:	d001      	beq.n	8005590 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e296      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005590:	f7fb f8de 	bl	8000750 <HAL_GetREVID>
 8005594:	4602      	mov	r2, r0
 8005596:	f241 0303 	movw	r3, #4099	; 0x1003
 800559a:	429a      	cmp	r2, r3
 800559c:	d817      	bhi.n	80055ce <HAL_RCC_OscConfig+0x322>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d108      	bne.n	80055b8 <HAL_RCC_OscConfig+0x30c>
 80055a6:	4a89      	ldr	r2, [pc, #548]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80055a8:	4b88      	ldr	r3, [pc, #544]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80055b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055b6:	e075      	b.n	80056a4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055b8:	4984      	ldr	r1, [pc, #528]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80055ba:	4b84      	ldr	r3, [pc, #528]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	069b      	lsls	r3, r3, #26
 80055c8:	4313      	orrs	r3, r2
 80055ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055cc:	e06a      	b.n	80056a4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055ce:	497f      	ldr	r1, [pc, #508]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80055d0:	4b7e      	ldr	r3, [pc, #504]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	061b      	lsls	r3, r3, #24
 80055de:	4313      	orrs	r3, r2
 80055e0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055e2:	e05f      	b.n	80056a4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d042      	beq.n	8005672 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055ec:	4a77      	ldr	r2, [pc, #476]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80055ee:	4b77      	ldr	r3, [pc, #476]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f8:	f7fb f87c 	bl	80006f4 <HAL_GetTick>
 80055fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005600:	f7fb f878 	bl	80006f4 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e255      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005612:	4b6e      	ldr	r3, [pc, #440]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f0      	beq.n	8005600 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800561e:	f7fb f897 	bl	8000750 <HAL_GetREVID>
 8005622:	4602      	mov	r2, r0
 8005624:	f241 0303 	movw	r3, #4099	; 0x1003
 8005628:	429a      	cmp	r2, r3
 800562a:	d817      	bhi.n	800565c <HAL_RCC_OscConfig+0x3b0>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	2b20      	cmp	r3, #32
 8005632:	d108      	bne.n	8005646 <HAL_RCC_OscConfig+0x39a>
 8005634:	4a65      	ldr	r2, [pc, #404]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005636:	4b65      	ldr	r3, [pc, #404]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800563e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005642:	6053      	str	r3, [r2, #4]
 8005644:	e02e      	b.n	80056a4 <HAL_RCC_OscConfig+0x3f8>
 8005646:	4961      	ldr	r1, [pc, #388]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005648:	4b60      	ldr	r3, [pc, #384]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	069b      	lsls	r3, r3, #26
 8005656:	4313      	orrs	r3, r2
 8005658:	604b      	str	r3, [r1, #4]
 800565a:	e023      	b.n	80056a4 <HAL_RCC_OscConfig+0x3f8>
 800565c:	495b      	ldr	r1, [pc, #364]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800565e:	4b5b      	ldr	r3, [pc, #364]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	061b      	lsls	r3, r3, #24
 800566c:	4313      	orrs	r3, r2
 800566e:	60cb      	str	r3, [r1, #12]
 8005670:	e018      	b.n	80056a4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005672:	4a56      	ldr	r2, [pc, #344]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005674:	4b55      	ldr	r3, [pc, #340]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800567c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567e:	f7fb f839 	bl	80006f4 <HAL_GetTick>
 8005682:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005686:	f7fb f835 	bl	80006f4 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e212      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005698:	4b4c      	ldr	r3, [pc, #304]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1f0      	bne.n	8005686 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d036      	beq.n	800571e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d019      	beq.n	80056ec <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056b8:	4a44      	ldr	r2, [pc, #272]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80056ba:	4b44      	ldr	r3, [pc, #272]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80056bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056be:	f043 0301 	orr.w	r3, r3, #1
 80056c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c4:	f7fb f816 	bl	80006f4 <HAL_GetTick>
 80056c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056cc:	f7fb f812 	bl	80006f4 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e1ef      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056de:	4b3b      	ldr	r3, [pc, #236]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80056e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCC_OscConfig+0x420>
 80056ea:	e018      	b.n	800571e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ec:	4a37      	ldr	r2, [pc, #220]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80056ee:	4b37      	ldr	r3, [pc, #220]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80056f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f2:	f023 0301 	bic.w	r3, r3, #1
 80056f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f8:	f7fa fffc 	bl	80006f4 <HAL_GetTick>
 80056fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005700:	f7fa fff8 	bl	80006f4 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e1d5      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005712:	4b2e      	ldr	r3, [pc, #184]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b00      	cmp	r3, #0
 8005728:	d036      	beq.n	8005798 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d019      	beq.n	8005766 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005732:	4a26      	ldr	r2, [pc, #152]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005734:	4b25      	ldr	r3, [pc, #148]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800573c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800573e:	f7fa ffd9 	bl	80006f4 <HAL_GetTick>
 8005742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005746:	f7fa ffd5 	bl	80006f4 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e1b2      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005758:	4b1c      	ldr	r3, [pc, #112]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f0      	beq.n	8005746 <HAL_RCC_OscConfig+0x49a>
 8005764:	e018      	b.n	8005798 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005766:	4a19      	ldr	r2, [pc, #100]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005768:	4b18      	ldr	r3, [pc, #96]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005770:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005772:	f7fa ffbf 	bl	80006f4 <HAL_GetTick>
 8005776:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800577a:	f7fa ffbb 	bl	80006f4 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e198      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800578c:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f0      	bne.n	800577a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8085 	beq.w	80058b0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057a6:	4a0a      	ldr	r2, [pc, #40]	; (80057d0 <HAL_RCC_OscConfig+0x524>)
 80057a8:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <HAL_RCC_OscConfig+0x524>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057b2:	f7fa ff9f 	bl	80006f4 <HAL_GetTick>
 80057b6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057b8:	e00c      	b.n	80057d4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057ba:	f7fa ff9b 	bl	80006f4 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b64      	cmp	r3, #100	; 0x64
 80057c6:	d905      	bls.n	80057d4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e178      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
 80057cc:	58024400 	.word	0x58024400
 80057d0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057d4:	4b96      	ldr	r3, [pc, #600]	; (8005a30 <HAL_RCC_OscConfig+0x784>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0ec      	beq.n	80057ba <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d106      	bne.n	80057f6 <HAL_RCC_OscConfig+0x54a>
 80057e8:	4a92      	ldr	r2, [pc, #584]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80057ea:	4b92      	ldr	r3, [pc, #584]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	f043 0301 	orr.w	r3, r3, #1
 80057f2:	6713      	str	r3, [r2, #112]	; 0x70
 80057f4:	e02d      	b.n	8005852 <HAL_RCC_OscConfig+0x5a6>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10c      	bne.n	8005818 <HAL_RCC_OscConfig+0x56c>
 80057fe:	4a8d      	ldr	r2, [pc, #564]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005800:	4b8c      	ldr	r3, [pc, #560]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	f023 0301 	bic.w	r3, r3, #1
 8005808:	6713      	str	r3, [r2, #112]	; 0x70
 800580a:	4a8a      	ldr	r2, [pc, #552]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800580c:	4b89      	ldr	r3, [pc, #548]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800580e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005810:	f023 0304 	bic.w	r3, r3, #4
 8005814:	6713      	str	r3, [r2, #112]	; 0x70
 8005816:	e01c      	b.n	8005852 <HAL_RCC_OscConfig+0x5a6>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2b05      	cmp	r3, #5
 800581e:	d10c      	bne.n	800583a <HAL_RCC_OscConfig+0x58e>
 8005820:	4a84      	ldr	r2, [pc, #528]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005822:	4b84      	ldr	r3, [pc, #528]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005826:	f043 0304 	orr.w	r3, r3, #4
 800582a:	6713      	str	r3, [r2, #112]	; 0x70
 800582c:	4a81      	ldr	r2, [pc, #516]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800582e:	4b81      	ldr	r3, [pc, #516]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005832:	f043 0301 	orr.w	r3, r3, #1
 8005836:	6713      	str	r3, [r2, #112]	; 0x70
 8005838:	e00b      	b.n	8005852 <HAL_RCC_OscConfig+0x5a6>
 800583a:	4a7e      	ldr	r2, [pc, #504]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800583c:	4b7d      	ldr	r3, [pc, #500]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800583e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	6713      	str	r3, [r2, #112]	; 0x70
 8005846:	4a7b      	ldr	r2, [pc, #492]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005848:	4b7a      	ldr	r3, [pc, #488]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800584a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584c:	f023 0304 	bic.w	r3, r3, #4
 8005850:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d015      	beq.n	8005886 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585a:	f7fa ff4b 	bl	80006f4 <HAL_GetTick>
 800585e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005860:	e00a      	b.n	8005878 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005862:	f7fa ff47 	bl	80006f4 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005870:	4293      	cmp	r3, r2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e122      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005878:	4b6e      	ldr	r3, [pc, #440]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800587a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0ee      	beq.n	8005862 <HAL_RCC_OscConfig+0x5b6>
 8005884:	e014      	b.n	80058b0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005886:	f7fa ff35 	bl	80006f4 <HAL_GetTick>
 800588a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800588c:	e00a      	b.n	80058a4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800588e:	f7fa ff31 	bl	80006f4 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	f241 3288 	movw	r2, #5000	; 0x1388
 800589c:	4293      	cmp	r3, r2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e10c      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058a4:	4b63      	ldr	r3, [pc, #396]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80058a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1ee      	bne.n	800588e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8101 	beq.w	8005abc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058ba:	4b5e      	ldr	r3, [pc, #376]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058c2:	2b18      	cmp	r3, #24
 80058c4:	f000 80bc 	beq.w	8005a40 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	f040 8095 	bne.w	80059fc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058d2:	4a58      	ldr	r2, [pc, #352]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80058d4:	4b57      	ldr	r3, [pc, #348]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058de:	f7fa ff09 	bl	80006f4 <HAL_GetTick>
 80058e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058e6:	f7fa ff05 	bl	80006f4 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e0e2      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058f8:	4b4e      	ldr	r3, [pc, #312]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1f0      	bne.n	80058e6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005904:	484b      	ldr	r0, [pc, #300]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005906:	4b4b      	ldr	r3, [pc, #300]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800590a:	4b4b      	ldr	r3, [pc, #300]	; (8005a38 <HAL_RCC_OscConfig+0x78c>)
 800590c:	4013      	ands	r3, r2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005916:	0112      	lsls	r2, r2, #4
 8005918:	430a      	orrs	r2, r1
 800591a:	4313      	orrs	r3, r2
 800591c:	6283      	str	r3, [r0, #40]	; 0x28
 800591e:	4945      	ldr	r1, [pc, #276]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	3b01      	subs	r3, #1
 8005926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592e:	3b01      	subs	r3, #1
 8005930:	025b      	lsls	r3, r3, #9
 8005932:	b29b      	uxth	r3, r3
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	3b01      	subs	r3, #1
 800593c:	041b      	lsls	r3, r3, #16
 800593e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005948:	3b01      	subs	r3, #1
 800594a:	061b      	lsls	r3, r3, #24
 800594c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005950:	4313      	orrs	r3, r2
 8005952:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005954:	4a37      	ldr	r2, [pc, #220]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005956:	4b37      	ldr	r3, [pc, #220]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005960:	4934      	ldr	r1, [pc, #208]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005962:	4b34      	ldr	r3, [pc, #208]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005966:	4b35      	ldr	r3, [pc, #212]	; (8005a3c <HAL_RCC_OscConfig+0x790>)
 8005968:	4013      	ands	r3, r2
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800596e:	00d2      	lsls	r2, r2, #3
 8005970:	4313      	orrs	r3, r2
 8005972:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005974:	492f      	ldr	r1, [pc, #188]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005976:	4b2f      	ldr	r3, [pc, #188]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597a:	f023 020c 	bic.w	r2, r3, #12
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	4313      	orrs	r3, r2
 8005984:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005986:	492b      	ldr	r1, [pc, #172]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005988:	4b2a      	ldr	r3, [pc, #168]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	f023 0202 	bic.w	r2, r3, #2
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005994:	4313      	orrs	r3, r2
 8005996:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005998:	4a26      	ldr	r2, [pc, #152]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800599a:	4b26      	ldr	r3, [pc, #152]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a4:	4a23      	ldr	r2, [pc, #140]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059a6:	4b23      	ldr	r3, [pc, #140]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059b0:	4a20      	ldr	r2, [pc, #128]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059b2:	4b20      	ldr	r3, [pc, #128]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80059bc:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059be:	4b1d      	ldr	r3, [pc, #116]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059c8:	4a1a      	ldr	r2, [pc, #104]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059ca:	4b1a      	ldr	r3, [pc, #104]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fa fe8e 	bl	80006f4 <HAL_GetTick>
 80059d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059dc:	f7fa fe8a 	bl	80006f4 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e067      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059ee:	4b11      	ldr	r3, [pc, #68]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0f0      	beq.n	80059dc <HAL_RCC_OscConfig+0x730>
 80059fa:	e05f      	b.n	8005abc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059fc:	4a0d      	ldr	r2, [pc, #52]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059fe:	4b0d      	ldr	r3, [pc, #52]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a08:	f7fa fe74 	bl	80006f4 <HAL_GetTick>
 8005a0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a10:	f7fa fe70 	bl	80006f4 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e04d      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a22:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f0      	bne.n	8005a10 <HAL_RCC_OscConfig+0x764>
 8005a2e:	e045      	b.n	8005abc <HAL_RCC_OscConfig+0x810>
 8005a30:	58024800 	.word	0x58024800
 8005a34:	58024400 	.word	0x58024400
 8005a38:	fffffc0c 	.word	0xfffffc0c
 8005a3c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a40:	4b21      	ldr	r3, [pc, #132]	; (8005ac8 <HAL_RCC_OscConfig+0x81c>)
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a46:	4b20      	ldr	r3, [pc, #128]	; (8005ac8 <HAL_RCC_OscConfig+0x81c>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d031      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f003 0203 	and.w	r2, r3, #3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d12a      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d122      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d11a      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	0a5b      	lsrs	r3, r3, #9
 8005a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d111      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	0c1b      	lsrs	r3, r3, #16
 8005a98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d108      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	0e1b      	lsrs	r3, r3, #24
 8005aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d001      	beq.n	8005abc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3730      	adds	r7, #48	; 0x30
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	58024400 	.word	0x58024400

08005acc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e19c      	b.n	8005e1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ae0:	4b8a      	ldr	r3, [pc, #552]	; (8005d0c <HAL_RCC_ClockConfig+0x240>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 020f 	and.w	r2, r3, #15
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d210      	bcs.n	8005b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aee:	4987      	ldr	r1, [pc, #540]	; (8005d0c <HAL_RCC_ClockConfig+0x240>)
 8005af0:	4b86      	ldr	r3, [pc, #536]	; (8005d0c <HAL_RCC_ClockConfig+0x240>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f023 020f 	bic.w	r2, r3, #15
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afe:	4b83      	ldr	r3, [pc, #524]	; (8005d0c <HAL_RCC_ClockConfig+0x240>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 020f 	and.w	r2, r3, #15
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d001      	beq.n	8005b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e184      	b.n	8005e1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d010      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	4b7b      	ldr	r3, [pc, #492]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d908      	bls.n	8005b3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b2c:	4978      	ldr	r1, [pc, #480]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b2e:	4b78      	ldr	r3, [pc, #480]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d010      	beq.n	8005b6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695a      	ldr	r2, [r3, #20]
 8005b4e:	4b70      	ldr	r3, [pc, #448]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d908      	bls.n	8005b6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b5a:	496d      	ldr	r1, [pc, #436]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b5c:	4b6c      	ldr	r3, [pc, #432]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d010      	beq.n	8005b9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699a      	ldr	r2, [r3, #24]
 8005b7c:	4b64      	ldr	r3, [pc, #400]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d908      	bls.n	8005b9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b88:	4961      	ldr	r1, [pc, #388]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b8a:	4b61      	ldr	r3, [pc, #388]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d010      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69da      	ldr	r2, [r3, #28]
 8005baa:	4b59      	ldr	r3, [pc, #356]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d908      	bls.n	8005bc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005bb6:	4956      	ldr	r1, [pc, #344]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005bb8:	4b55      	ldr	r3, [pc, #340]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d010      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	4b4d      	ldr	r3, [pc, #308]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d908      	bls.n	8005bf6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005be4:	494a      	ldr	r1, [pc, #296]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005be6:	4b4a      	ldr	r3, [pc, #296]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	f023 020f 	bic.w	r2, r3, #15
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d055      	beq.n	8005cae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c02:	4943      	ldr	r1, [pc, #268]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c04:	4b42      	ldr	r3, [pc, #264]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d107      	bne.n	8005c2c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c1c:	4b3c      	ldr	r3, [pc, #240]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d121      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0f6      	b.n	8005e1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d107      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c34:	4b36      	ldr	r3, [pc, #216]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d115      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e0ea      	b.n	8005e1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c4c:	4b30      	ldr	r3, [pc, #192]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d109      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e0de      	b.n	8005e1a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c5c:	4b2c      	ldr	r3, [pc, #176]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0d6      	b.n	8005e1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c6c:	4928      	ldr	r1, [pc, #160]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c6e:	4b28      	ldr	r3, [pc, #160]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f023 0207 	bic.w	r2, r3, #7
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7e:	f7fa fd39 	bl	80006f4 <HAL_GetTick>
 8005c82:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c84:	e00a      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c86:	f7fa fd35 	bl	80006f4 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e0be      	b.n	8005e1a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9c:	4b1c      	ldr	r3, [pc, #112]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d1eb      	bne.n	8005c86 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d010      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	4b14      	ldr	r3, [pc, #80]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d208      	bcs.n	8005cdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cca:	4911      	ldr	r1, [pc, #68]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005ccc:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	f023 020f 	bic.w	r2, r3, #15
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cdc:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <HAL_RCC_ClockConfig+0x240>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 020f 	and.w	r2, r3, #15
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d914      	bls.n	8005d14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cea:	4908      	ldr	r1, [pc, #32]	; (8005d0c <HAL_RCC_ClockConfig+0x240>)
 8005cec:	4b07      	ldr	r3, [pc, #28]	; (8005d0c <HAL_RCC_ClockConfig+0x240>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f023 020f 	bic.w	r2, r3, #15
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfa:	4b04      	ldr	r3, [pc, #16]	; (8005d0c <HAL_RCC_ClockConfig+0x240>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 020f 	and.w	r2, r3, #15
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d005      	beq.n	8005d14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e086      	b.n	8005e1a <HAL_RCC_ClockConfig+0x34e>
 8005d0c:	52002000 	.word	0x52002000
 8005d10:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d010      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691a      	ldr	r2, [r3, #16]
 8005d24:	4b3f      	ldr	r3, [pc, #252]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d208      	bcs.n	8005d42 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d30:	493c      	ldr	r1, [pc, #240]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d32:	4b3c      	ldr	r3, [pc, #240]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d010      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695a      	ldr	r2, [r3, #20]
 8005d52:	4b34      	ldr	r3, [pc, #208]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d208      	bcs.n	8005d70 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d5e:	4931      	ldr	r1, [pc, #196]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d60:	4b30      	ldr	r3, [pc, #192]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0310 	and.w	r3, r3, #16
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d010      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699a      	ldr	r2, [r3, #24]
 8005d80:	4b28      	ldr	r3, [pc, #160]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d208      	bcs.n	8005d9e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d8c:	4925      	ldr	r1, [pc, #148]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d8e:	4b25      	ldr	r3, [pc, #148]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d010      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69da      	ldr	r2, [r3, #28]
 8005dae:	4b1d      	ldr	r3, [pc, #116]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d208      	bcs.n	8005dcc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005dba:	491a      	ldr	r1, [pc, #104]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005dbc:	4b19      	ldr	r3, [pc, #100]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005dcc:	f000 f834 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 8005dd0:	4601      	mov	r1, r0
 8005dd2:	4b14      	ldr	r3, [pc, #80]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	0a1b      	lsrs	r3, r3, #8
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	4a12      	ldr	r2, [pc, #72]	; (8005e28 <HAL_RCC_ClockConfig+0x35c>)
 8005dde:	5cd3      	ldrb	r3, [r2, r3]
 8005de0:	f003 031f 	and.w	r3, r3, #31
 8005de4:	fa21 f303 	lsr.w	r3, r1, r3
 8005de8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dea:	4b0e      	ldr	r3, [pc, #56]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	4a0d      	ldr	r2, [pc, #52]	; (8005e28 <HAL_RCC_ClockConfig+0x35c>)
 8005df4:	5cd3      	ldrb	r3, [r2, r3]
 8005df6:	f003 031f 	and.w	r3, r3, #31
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005e00:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <HAL_RCC_ClockConfig+0x360>)
 8005e02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e04:	4a0a      	ldr	r2, [pc, #40]	; (8005e30 <HAL_RCC_ClockConfig+0x364>)
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005e0a:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <HAL_RCC_ClockConfig+0x368>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fa fc26 	bl	8000660 <HAL_InitTick>
 8005e14:	4603      	mov	r3, r0
 8005e16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	58024400 	.word	0x58024400
 8005e28:	0800c720 	.word	0x0800c720
 8005e2c:	24000010 	.word	0x24000010
 8005e30:	2400000c 	.word	0x2400000c
 8005e34:	24000000 	.word	0x24000000

08005e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b089      	sub	sp, #36	; 0x24
 8005e3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e3e:	4baf      	ldr	r3, [pc, #700]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e46:	2b18      	cmp	r3, #24
 8005e48:	f200 814e 	bhi.w	80060e8 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005e4c:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005eb9 	.word	0x08005eb9
 8005e58:	080060e9 	.word	0x080060e9
 8005e5c:	080060e9 	.word	0x080060e9
 8005e60:	080060e9 	.word	0x080060e9
 8005e64:	080060e9 	.word	0x080060e9
 8005e68:	080060e9 	.word	0x080060e9
 8005e6c:	080060e9 	.word	0x080060e9
 8005e70:	080060e9 	.word	0x080060e9
 8005e74:	08005edf 	.word	0x08005edf
 8005e78:	080060e9 	.word	0x080060e9
 8005e7c:	080060e9 	.word	0x080060e9
 8005e80:	080060e9 	.word	0x080060e9
 8005e84:	080060e9 	.word	0x080060e9
 8005e88:	080060e9 	.word	0x080060e9
 8005e8c:	080060e9 	.word	0x080060e9
 8005e90:	080060e9 	.word	0x080060e9
 8005e94:	08005ee5 	.word	0x08005ee5
 8005e98:	080060e9 	.word	0x080060e9
 8005e9c:	080060e9 	.word	0x080060e9
 8005ea0:	080060e9 	.word	0x080060e9
 8005ea4:	080060e9 	.word	0x080060e9
 8005ea8:	080060e9 	.word	0x080060e9
 8005eac:	080060e9 	.word	0x080060e9
 8005eb0:	080060e9 	.word	0x080060e9
 8005eb4:	08005eeb 	.word	0x08005eeb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eb8:	4b90      	ldr	r3, [pc, #576]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d009      	beq.n	8005ed8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ec4:	4b8d      	ldr	r3, [pc, #564]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	08db      	lsrs	r3, r3, #3
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	4a8c      	ldr	r2, [pc, #560]	; (8006100 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005ed6:	e10a      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ed8:	4b89      	ldr	r3, [pc, #548]	; (8006100 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005eda:	61bb      	str	r3, [r7, #24]
    break;
 8005edc:	e107      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005ede:	4b89      	ldr	r3, [pc, #548]	; (8006104 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005ee0:	61bb      	str	r3, [r7, #24]
    break;
 8005ee2:	e104      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005ee4:	4b88      	ldr	r3, [pc, #544]	; (8006108 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005ee6:	61bb      	str	r3, [r7, #24]
    break;
 8005ee8:	e101      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005eea:	4b84      	ldr	r3, [pc, #528]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005ef4:	4b81      	ldr	r3, [pc, #516]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef8:	091b      	lsrs	r3, r3, #4
 8005efa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005efe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f00:	4b7e      	ldr	r3, [pc, #504]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005f0a:	4b7c      	ldr	r3, [pc, #496]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0e:	08db      	lsrs	r3, r3, #3
 8005f10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	fb02 f303 	mul.w	r3, r2, r3
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f22:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 80da 	beq.w	80060e2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d05a      	beq.n	8005fea <HAL_RCC_GetSysClockFreq+0x1b2>
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d302      	bcc.n	8005f3e <HAL_RCC_GetSysClockFreq+0x106>
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d078      	beq.n	800602e <HAL_RCC_GetSysClockFreq+0x1f6>
 8005f3c:	e099      	b.n	8006072 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f3e:	4b6f      	ldr	r3, [pc, #444]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0320 	and.w	r3, r3, #32
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d02d      	beq.n	8005fa6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f4a:	4b6c      	ldr	r3, [pc, #432]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	08db      	lsrs	r3, r3, #3
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	4a6a      	ldr	r2, [pc, #424]	; (8006100 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005f56:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	ee07 3a90 	vmov	s15, r3
 8005f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f74:	4b61      	ldr	r3, [pc, #388]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f84:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f88:	eddf 5a60 	vldr	s11, [pc, #384]	; 800610c <HAL_RCC_GetSysClockFreq+0x2d4>
 8005f8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005fa4:	e087      	b.n	80060b6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	ee07 3a90 	vmov	s15, r3
 8005fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006110 <HAL_RCC_GetSysClockFreq+0x2d8>
 8005fb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb8:	4b50      	ldr	r3, [pc, #320]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc0:	ee07 3a90 	vmov	s15, r3
 8005fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fcc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800610c <HAL_RCC_GetSysClockFreq+0x2d4>
 8005fd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fe8:	e065      	b.n	80060b6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	ee07 3a90 	vmov	s15, r3
 8005ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006114 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005ff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ffc:	4b3f      	ldr	r3, [pc, #252]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006004:	ee07 3a90 	vmov	s15, r3
 8006008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006010:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800610c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006014:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006018:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800601c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006028:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800602c:	e043      	b.n	80060b6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	ee07 3a90 	vmov	s15, r3
 8006034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006038:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006118 <HAL_RCC_GetSysClockFreq+0x2e0>
 800603c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006040:	4b2e      	ldr	r3, [pc, #184]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006050:	ed97 6a02 	vldr	s12, [r7, #8]
 8006054:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800610c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006058:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800605c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006070:	e021      	b.n	80060b6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	ee07 3a90 	vmov	s15, r3
 8006078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006114 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006084:	4b1d      	ldr	r3, [pc, #116]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608c:	ee07 3a90 	vmov	s15, r3
 8006090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006094:	ed97 6a02 	vldr	s12, [r7, #8]
 8006098:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800610c <HAL_RCC_GetSysClockFreq+0x2d4>
 800609c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060b4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80060b6:	4b11      	ldr	r3, [pc, #68]	; (80060fc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	0a5b      	lsrs	r3, r3, #9
 80060bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060c0:	3301      	adds	r3, #1
 80060c2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	ee07 3a90 	vmov	s15, r3
 80060ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80060d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060da:	ee17 3a90 	vmov	r3, s15
 80060de:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80060e0:	e005      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	61bb      	str	r3, [r7, #24]
    break;
 80060e6:	e002      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80060e8:	4b06      	ldr	r3, [pc, #24]	; (8006104 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80060ea:	61bb      	str	r3, [r7, #24]
    break;
 80060ec:	bf00      	nop
  }

  return sysclockfreq;
 80060ee:	69bb      	ldr	r3, [r7, #24]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3724      	adds	r7, #36	; 0x24
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	58024400 	.word	0x58024400
 8006100:	03d09000 	.word	0x03d09000
 8006104:	003d0900 	.word	0x003d0900
 8006108:	007a1200 	.word	0x007a1200
 800610c:	46000000 	.word	0x46000000
 8006110:	4c742400 	.word	0x4c742400
 8006114:	4a742400 	.word	0x4a742400
 8006118:	4af42400 	.word	0x4af42400

0800611c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006122:	f7ff fe89 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 8006126:	4601      	mov	r1, r0
 8006128:	4b10      	ldr	r3, [pc, #64]	; (800616c <HAL_RCC_GetHCLKFreq+0x50>)
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	0a1b      	lsrs	r3, r3, #8
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	4a0f      	ldr	r2, [pc, #60]	; (8006170 <HAL_RCC_GetHCLKFreq+0x54>)
 8006134:	5cd3      	ldrb	r3, [r2, r3]
 8006136:	f003 031f 	and.w	r3, r3, #31
 800613a:	fa21 f303 	lsr.w	r3, r1, r3
 800613e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006140:	4b0a      	ldr	r3, [pc, #40]	; (800616c <HAL_RCC_GetHCLKFreq+0x50>)
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	f003 030f 	and.w	r3, r3, #15
 8006148:	4a09      	ldr	r2, [pc, #36]	; (8006170 <HAL_RCC_GetHCLKFreq+0x54>)
 800614a:	5cd3      	ldrb	r3, [r2, r3]
 800614c:	f003 031f 	and.w	r3, r3, #31
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	fa22 f303 	lsr.w	r3, r2, r3
 8006156:	4a07      	ldr	r2, [pc, #28]	; (8006174 <HAL_RCC_GetHCLKFreq+0x58>)
 8006158:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800615a:	4a07      	ldr	r2, [pc, #28]	; (8006178 <HAL_RCC_GetHCLKFreq+0x5c>)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006160:	4b04      	ldr	r3, [pc, #16]	; (8006174 <HAL_RCC_GetHCLKFreq+0x58>)
 8006162:	681b      	ldr	r3, [r3, #0]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	58024400 	.word	0x58024400
 8006170:	0800c720 	.word	0x0800c720
 8006174:	24000010 	.word	0x24000010
 8006178:	2400000c 	.word	0x2400000c

0800617c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006180:	f7ff ffcc 	bl	800611c <HAL_RCC_GetHCLKFreq>
 8006184:	4601      	mov	r1, r0
 8006186:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	091b      	lsrs	r3, r3, #4
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	4a04      	ldr	r2, [pc, #16]	; (80061a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006192:	5cd3      	ldrb	r3, [r2, r3]
 8006194:	f003 031f 	and.w	r3, r3, #31
 8006198:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800619c:	4618      	mov	r0, r3
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	58024400 	.word	0x58024400
 80061a4:	0800c720 	.word	0x0800c720

080061a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80061ac:	f7ff ffb6 	bl	800611c <HAL_RCC_GetHCLKFreq>
 80061b0:	4601      	mov	r1, r0
 80061b2:	4b06      	ldr	r3, [pc, #24]	; (80061cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	0a1b      	lsrs	r3, r3, #8
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	4a04      	ldr	r2, [pc, #16]	; (80061d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061be:	5cd3      	ldrb	r3, [r2, r3]
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	58024400 	.word	0x58024400
 80061d0:	0800c720 	.word	0x0800c720

080061d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061dc:	2300      	movs	r3, #0
 80061de:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061e0:	2300      	movs	r3, #0
 80061e2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d03d      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061f8:	d013      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80061fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061fe:	d802      	bhi.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006200:	2b00      	cmp	r3, #0
 8006202:	d007      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006204:	e01f      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800620a:	d013      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800620c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006210:	d01c      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006212:	e018      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006214:	4aaf      	ldr	r2, [pc, #700]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006216:	4baf      	ldr	r3, [pc, #700]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800621e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006220:	e015      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3304      	adds	r3, #4
 8006226:	2102      	movs	r1, #2
 8006228:	4618      	mov	r0, r3
 800622a:	f001 ff41 	bl	80080b0 <RCCEx_PLL2_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006232:	e00c      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3324      	adds	r3, #36	; 0x24
 8006238:	2102      	movs	r1, #2
 800623a:	4618      	mov	r0, r3
 800623c:	f001 ffea 	bl	8008214 <RCCEx_PLL3_Config>
 8006240:	4603      	mov	r3, r0
 8006242:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006244:	e003      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	75fb      	strb	r3, [r7, #23]
      break;
 800624a:	e000      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800624c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800624e:	7dfb      	ldrb	r3, [r7, #23]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d109      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006254:	499f      	ldr	r1, [pc, #636]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006256:	4b9f      	ldr	r3, [pc, #636]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800625a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006262:	4313      	orrs	r3, r2
 8006264:	650b      	str	r3, [r1, #80]	; 0x50
 8006266:	e001      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006268:	7dfb      	ldrb	r3, [r7, #23]
 800626a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006274:	2b00      	cmp	r3, #0
 8006276:	d03d      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627c:	2b04      	cmp	r3, #4
 800627e:	d826      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006280:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	0800629d 	.word	0x0800629d
 800628c:	080062ab 	.word	0x080062ab
 8006290:	080062bd 	.word	0x080062bd
 8006294:	080062d5 	.word	0x080062d5
 8006298:	080062d5 	.word	0x080062d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800629c:	4a8d      	ldr	r2, [pc, #564]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800629e:	4b8d      	ldr	r3, [pc, #564]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062a8:	e015      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	3304      	adds	r3, #4
 80062ae:	2100      	movs	r1, #0
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 fefd 	bl	80080b0 <RCCEx_PLL2_Config>
 80062b6:	4603      	mov	r3, r0
 80062b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062ba:	e00c      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3324      	adds	r3, #36	; 0x24
 80062c0:	2100      	movs	r1, #0
 80062c2:	4618      	mov	r0, r3
 80062c4:	f001 ffa6 	bl	8008214 <RCCEx_PLL3_Config>
 80062c8:	4603      	mov	r3, r0
 80062ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062cc:	e003      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	75fb      	strb	r3, [r7, #23]
      break;
 80062d2:	e000      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80062d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d109      	bne.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062dc:	497d      	ldr	r1, [pc, #500]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062de:	4b7d      	ldr	r3, [pc, #500]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e2:	f023 0207 	bic.w	r2, r3, #7
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ea:	4313      	orrs	r3, r2
 80062ec:	650b      	str	r3, [r1, #80]	; 0x50
 80062ee:	e001      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f0:	7dfb      	ldrb	r3, [r7, #23]
 80062f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d03e      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006304:	2b80      	cmp	r3, #128	; 0x80
 8006306:	d01c      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006308:	2b80      	cmp	r3, #128	; 0x80
 800630a:	d804      	bhi.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d008      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006310:	2b40      	cmp	r3, #64	; 0x40
 8006312:	d00d      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006314:	e01e      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006316:	2bc0      	cmp	r3, #192	; 0xc0
 8006318:	d01f      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800631a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800631e:	d01e      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006320:	e018      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006322:	4a6c      	ldr	r2, [pc, #432]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006324:	4b6b      	ldr	r3, [pc, #428]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800632c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800632e:	e017      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3304      	adds	r3, #4
 8006334:	2100      	movs	r1, #0
 8006336:	4618      	mov	r0, r3
 8006338:	f001 feba 	bl	80080b0 <RCCEx_PLL2_Config>
 800633c:	4603      	mov	r3, r0
 800633e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006340:	e00e      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3324      	adds	r3, #36	; 0x24
 8006346:	2100      	movs	r1, #0
 8006348:	4618      	mov	r0, r3
 800634a:	f001 ff63 	bl	8008214 <RCCEx_PLL3_Config>
 800634e:	4603      	mov	r3, r0
 8006350:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006352:	e005      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	75fb      	strb	r3, [r7, #23]
      break;
 8006358:	e002      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800635a:	bf00      	nop
 800635c:	e000      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800635e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006360:	7dfb      	ldrb	r3, [r7, #23]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d109      	bne.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006366:	495b      	ldr	r1, [pc, #364]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006368:	4b5a      	ldr	r3, [pc, #360]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800636a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636c:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006374:	4313      	orrs	r3, r2
 8006376:	650b      	str	r3, [r1, #80]	; 0x50
 8006378:	e001      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637a:	7dfb      	ldrb	r3, [r7, #23]
 800637c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006386:	2b00      	cmp	r3, #0
 8006388:	d044      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006394:	d01f      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800639a:	d805      	bhi.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00a      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80063a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063a4:	d00e      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80063a6:	e01f      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80063a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063ac:	d01f      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80063ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063b2:	d01e      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80063b4:	e018      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b6:	4a47      	ldr	r2, [pc, #284]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063b8:	4b46      	ldr	r3, [pc, #280]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063c2:	e017      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3304      	adds	r3, #4
 80063c8:	2100      	movs	r1, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 fe70 	bl	80080b0 <RCCEx_PLL2_Config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80063d4:	e00e      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3324      	adds	r3, #36	; 0x24
 80063da:	2100      	movs	r1, #0
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 ff19 	bl	8008214 <RCCEx_PLL3_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063e6:	e005      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	75fb      	strb	r3, [r7, #23]
      break;
 80063ec:	e002      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80063ee:	bf00      	nop
 80063f0:	e000      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80063f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f4:	7dfb      	ldrb	r3, [r7, #23]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10a      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80063fa:	4936      	ldr	r1, [pc, #216]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063fc:	4b35      	ldr	r3, [pc, #212]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800640a:	4313      	orrs	r3, r2
 800640c:	658b      	str	r3, [r1, #88]	; 0x58
 800640e:	e001      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	7dfb      	ldrb	r3, [r7, #23]
 8006412:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800641c:	2b00      	cmp	r3, #0
 800641e:	d044      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800642a:	d01f      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800642c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006430:	d805      	bhi.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006436:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800643a:	d00e      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800643c:	e01f      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800643e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006442:	d01f      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006448:	d01e      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800644a:	e018      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800644c:	4a21      	ldr	r2, [pc, #132]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800644e:	4b21      	ldr	r3, [pc, #132]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006458:	e017      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	3304      	adds	r3, #4
 800645e:	2100      	movs	r1, #0
 8006460:	4618      	mov	r0, r3
 8006462:	f001 fe25 	bl	80080b0 <RCCEx_PLL2_Config>
 8006466:	4603      	mov	r3, r0
 8006468:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800646a:	e00e      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3324      	adds	r3, #36	; 0x24
 8006470:	2100      	movs	r1, #0
 8006472:	4618      	mov	r0, r3
 8006474:	f001 fece 	bl	8008214 <RCCEx_PLL3_Config>
 8006478:	4603      	mov	r3, r0
 800647a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800647c:	e005      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	75fb      	strb	r3, [r7, #23]
      break;
 8006482:	e002      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006484:	bf00      	nop
 8006486:	e000      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800648a:	7dfb      	ldrb	r3, [r7, #23]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006490:	4910      	ldr	r1, [pc, #64]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006492:	4b10      	ldr	r3, [pc, #64]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006496:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064a0:	4313      	orrs	r3, r2
 80064a2:	658b      	str	r3, [r1, #88]	; 0x58
 80064a4:	e001      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a6:	7dfb      	ldrb	r3, [r7, #23]
 80064a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d035      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ba:	2b10      	cmp	r3, #16
 80064bc:	d00c      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80064be:	2b10      	cmp	r3, #16
 80064c0:	d802      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d01b      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80064c6:	e017      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d00c      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80064cc:	2b30      	cmp	r3, #48	; 0x30
 80064ce:	d018      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80064d0:	e012      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80064d2:	bf00      	nop
 80064d4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d8:	4aaf      	ldr	r2, [pc, #700]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064da:	4baf      	ldr	r3, [pc, #700]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80064e4:	e00e      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3304      	adds	r3, #4
 80064ea:	2102      	movs	r1, #2
 80064ec:	4618      	mov	r0, r3
 80064ee:	f001 fddf 	bl	80080b0 <RCCEx_PLL2_Config>
 80064f2:	4603      	mov	r3, r0
 80064f4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80064f6:	e005      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	75fb      	strb	r3, [r7, #23]
      break;
 80064fc:	e002      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80064fe:	bf00      	nop
 8006500:	e000      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006502:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d109      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800650a:	49a3      	ldr	r1, [pc, #652]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800650c:	4ba2      	ldr	r3, [pc, #648]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800650e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006510:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006518:	4313      	orrs	r3, r2
 800651a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800651c:	e001      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651e:	7dfb      	ldrb	r3, [r7, #23]
 8006520:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d042      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006536:	d01f      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800653c:	d805      	bhi.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00a      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006546:	d00e      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006548:	e01f      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800654a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800654e:	d01f      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006554:	d01e      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006556:	e018      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006558:	4a8f      	ldr	r2, [pc, #572]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800655a:	4b8f      	ldr	r3, [pc, #572]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006562:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006564:	e017      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3304      	adds	r3, #4
 800656a:	2100      	movs	r1, #0
 800656c:	4618      	mov	r0, r3
 800656e:	f001 fd9f 	bl	80080b0 <RCCEx_PLL2_Config>
 8006572:	4603      	mov	r3, r0
 8006574:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006576:	e00e      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3324      	adds	r3, #36	; 0x24
 800657c:	2100      	movs	r1, #0
 800657e:	4618      	mov	r0, r3
 8006580:	f001 fe48 	bl	8008214 <RCCEx_PLL3_Config>
 8006584:	4603      	mov	r3, r0
 8006586:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006588:	e005      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	75fb      	strb	r3, [r7, #23]
      break;
 800658e:	e002      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006590:	bf00      	nop
 8006592:	e000      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006596:	7dfb      	ldrb	r3, [r7, #23]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d109      	bne.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800659c:	497e      	ldr	r1, [pc, #504]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800659e:	4b7e      	ldr	r3, [pc, #504]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065aa:	4313      	orrs	r3, r2
 80065ac:	650b      	str	r3, [r1, #80]	; 0x50
 80065ae:	e001      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
 80065b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d042      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065c8:	d01b      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80065ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065ce:	d805      	bhi.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d022      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80065d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d8:	d00a      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80065da:	e01b      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80065dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065e0:	d01d      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80065e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065e6:	d01c      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80065e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065ec:	d01b      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80065ee:	e011      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3304      	adds	r3, #4
 80065f4:	2101      	movs	r1, #1
 80065f6:	4618      	mov	r0, r3
 80065f8:	f001 fd5a 	bl	80080b0 <RCCEx_PLL2_Config>
 80065fc:	4603      	mov	r3, r0
 80065fe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006600:	e012      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3324      	adds	r3, #36	; 0x24
 8006606:	2101      	movs	r1, #1
 8006608:	4618      	mov	r0, r3
 800660a:	f001 fe03 	bl	8008214 <RCCEx_PLL3_Config>
 800660e:	4603      	mov	r3, r0
 8006610:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006612:	e009      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	75fb      	strb	r3, [r7, #23]
      break;
 8006618:	e006      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800661a:	bf00      	nop
 800661c:	e004      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800661e:	bf00      	nop
 8006620:	e002      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006622:	bf00      	nop
 8006624:	e000      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006628:	7dfb      	ldrb	r3, [r7, #23]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d109      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800662e:	495a      	ldr	r1, [pc, #360]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006630:	4b59      	ldr	r3, [pc, #356]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006634:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663c:	4313      	orrs	r3, r2
 800663e:	650b      	str	r3, [r1, #80]	; 0x50
 8006640:	e001      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006642:	7dfb      	ldrb	r3, [r7, #23]
 8006644:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d044      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800665c:	d01b      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800665e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006662:	d805      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006664:	2b00      	cmp	r3, #0
 8006666:	d022      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800666c:	d00a      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800666e:	e01b      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006674:	d01d      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006676:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800667a:	d01c      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800667c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006680:	d01b      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006682:	e011      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3304      	adds	r3, #4
 8006688:	2101      	movs	r1, #1
 800668a:	4618      	mov	r0, r3
 800668c:	f001 fd10 	bl	80080b0 <RCCEx_PLL2_Config>
 8006690:	4603      	mov	r3, r0
 8006692:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006694:	e012      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3324      	adds	r3, #36	; 0x24
 800669a:	2101      	movs	r1, #1
 800669c:	4618      	mov	r0, r3
 800669e:	f001 fdb9 	bl	8008214 <RCCEx_PLL3_Config>
 80066a2:	4603      	mov	r3, r0
 80066a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066a6:	e009      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	75fb      	strb	r3, [r7, #23]
      break;
 80066ac:	e006      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80066ae:	bf00      	nop
 80066b0:	e004      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80066b2:	bf00      	nop
 80066b4:	e002      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80066b6:	bf00      	nop
 80066b8:	e000      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80066ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10a      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80066c2:	4935      	ldr	r1, [pc, #212]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066c4:	4b34      	ldr	r3, [pc, #208]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066d2:	4313      	orrs	r3, r2
 80066d4:	658b      	str	r3, [r1, #88]	; 0x58
 80066d6:	e001      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d02d      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066f0:	d005      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80066f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f6:	d009      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x538>
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d013      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80066fc:	e00f      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066fe:	4a26      	ldr	r2, [pc, #152]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006700:	4b25      	ldr	r3, [pc, #148]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006708:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800670a:	e00c      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3304      	adds	r3, #4
 8006710:	2101      	movs	r1, #1
 8006712:	4618      	mov	r0, r3
 8006714:	f001 fccc 	bl	80080b0 <RCCEx_PLL2_Config>
 8006718:	4603      	mov	r3, r0
 800671a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800671c:	e003      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	75fb      	strb	r3, [r7, #23]
      break;
 8006722:	e000      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006724:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006726:	7dfb      	ldrb	r3, [r7, #23]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d109      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800672c:	491a      	ldr	r1, [pc, #104]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800672e:	4b1a      	ldr	r3, [pc, #104]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006732:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800673a:	4313      	orrs	r3, r2
 800673c:	650b      	str	r3, [r1, #80]	; 0x50
 800673e:	e001      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006740:	7dfb      	ldrb	r3, [r7, #23]
 8006742:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d035      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006754:	2b03      	cmp	r3, #3
 8006756:	d81b      	bhi.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006758:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800675a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675e:	bf00      	nop
 8006760:	0800679d 	.word	0x0800679d
 8006764:	08006771 	.word	0x08006771
 8006768:	0800677f 	.word	0x0800677f
 800676c:	0800679d 	.word	0x0800679d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006770:	4a09      	ldr	r2, [pc, #36]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006772:	4b09      	ldr	r3, [pc, #36]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800677a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800677c:	e00f      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	3304      	adds	r3, #4
 8006782:	2102      	movs	r1, #2
 8006784:	4618      	mov	r0, r3
 8006786:	f001 fc93 	bl	80080b0 <RCCEx_PLL2_Config>
 800678a:	4603      	mov	r3, r0
 800678c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800678e:	e006      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	75fb      	strb	r3, [r7, #23]
      break;
 8006794:	e003      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006796:	bf00      	nop
 8006798:	58024400 	.word	0x58024400
      break;
 800679c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800679e:	7dfb      	ldrb	r3, [r7, #23]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d109      	bne.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80067a4:	49ba      	ldr	r1, [pc, #744]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067a6:	4bba      	ldr	r3, [pc, #744]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067aa:	f023 0203 	bic.w	r2, r3, #3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b2:	4313      	orrs	r3, r2
 80067b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80067b6:	e001      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
 80067ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8086 	beq.w	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ca:	4ab2      	ldr	r2, [pc, #712]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80067cc:	4bb1      	ldr	r3, [pc, #708]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067d6:	f7f9 ff8d 	bl	80006f4 <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067dc:	e009      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067de:	f7f9 ff89 	bl	80006f4 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b64      	cmp	r3, #100	; 0x64
 80067ea:	d902      	bls.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	75fb      	strb	r3, [r7, #23]
        break;
 80067f0:	e005      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067f2:	4ba8      	ldr	r3, [pc, #672]	; (8006a94 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0ef      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80067fe:	7dfb      	ldrb	r3, [r7, #23]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d166      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006804:	4ba2      	ldr	r3, [pc, #648]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006806:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800680e:	4053      	eors	r3, r2
 8006810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006814:	2b00      	cmp	r3, #0
 8006816:	d013      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006818:	4b9d      	ldr	r3, [pc, #628]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800681a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006820:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006822:	4a9b      	ldr	r2, [pc, #620]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006824:	4b9a      	ldr	r3, [pc, #616]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800682c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800682e:	4a98      	ldr	r2, [pc, #608]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006830:	4b97      	ldr	r3, [pc, #604]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006838:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800683a:	4a95      	ldr	r2, [pc, #596]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800684a:	d115      	bne.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684c:	f7f9 ff52 	bl	80006f4 <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006852:	e00b      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006854:	f7f9 ff4e 	bl	80006f4 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006862:	4293      	cmp	r3, r2
 8006864:	d902      	bls.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	75fb      	strb	r3, [r7, #23]
            break;
 800686a:	e005      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800686c:	4b88      	ldr	r3, [pc, #544]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800686e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0ed      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d126      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006888:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800688c:	d10d      	bne.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800688e:	4880      	ldr	r0, [pc, #512]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006890:	4b7f      	ldr	r3, [pc, #508]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800689e:	0919      	lsrs	r1, r3, #4
 80068a0:	4b7d      	ldr	r3, [pc, #500]	; (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80068a2:	400b      	ands	r3, r1
 80068a4:	4313      	orrs	r3, r2
 80068a6:	6103      	str	r3, [r0, #16]
 80068a8:	e005      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80068aa:	4a79      	ldr	r2, [pc, #484]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068ac:	4b78      	ldr	r3, [pc, #480]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80068b4:	6113      	str	r3, [r2, #16]
 80068b6:	4976      	ldr	r1, [pc, #472]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068b8:	4b75      	ldr	r3, [pc, #468]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068c6:	4313      	orrs	r3, r2
 80068c8:	670b      	str	r3, [r1, #112]	; 0x70
 80068ca:	e004      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	75bb      	strb	r3, [r7, #22]
 80068d0:	e001      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
 80068d4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d07d      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068e6:	2b28      	cmp	r3, #40	; 0x28
 80068e8:	d866      	bhi.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80068ea:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80068ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f0:	080069bf 	.word	0x080069bf
 80068f4:	080069b9 	.word	0x080069b9
 80068f8:	080069b9 	.word	0x080069b9
 80068fc:	080069b9 	.word	0x080069b9
 8006900:	080069b9 	.word	0x080069b9
 8006904:	080069b9 	.word	0x080069b9
 8006908:	080069b9 	.word	0x080069b9
 800690c:	080069b9 	.word	0x080069b9
 8006910:	08006995 	.word	0x08006995
 8006914:	080069b9 	.word	0x080069b9
 8006918:	080069b9 	.word	0x080069b9
 800691c:	080069b9 	.word	0x080069b9
 8006920:	080069b9 	.word	0x080069b9
 8006924:	080069b9 	.word	0x080069b9
 8006928:	080069b9 	.word	0x080069b9
 800692c:	080069b9 	.word	0x080069b9
 8006930:	080069a7 	.word	0x080069a7
 8006934:	080069b9 	.word	0x080069b9
 8006938:	080069b9 	.word	0x080069b9
 800693c:	080069b9 	.word	0x080069b9
 8006940:	080069b9 	.word	0x080069b9
 8006944:	080069b9 	.word	0x080069b9
 8006948:	080069b9 	.word	0x080069b9
 800694c:	080069b9 	.word	0x080069b9
 8006950:	080069bf 	.word	0x080069bf
 8006954:	080069b9 	.word	0x080069b9
 8006958:	080069b9 	.word	0x080069b9
 800695c:	080069b9 	.word	0x080069b9
 8006960:	080069b9 	.word	0x080069b9
 8006964:	080069b9 	.word	0x080069b9
 8006968:	080069b9 	.word	0x080069b9
 800696c:	080069b9 	.word	0x080069b9
 8006970:	080069bf 	.word	0x080069bf
 8006974:	080069b9 	.word	0x080069b9
 8006978:	080069b9 	.word	0x080069b9
 800697c:	080069b9 	.word	0x080069b9
 8006980:	080069b9 	.word	0x080069b9
 8006984:	080069b9 	.word	0x080069b9
 8006988:	080069b9 	.word	0x080069b9
 800698c:	080069b9 	.word	0x080069b9
 8006990:	080069bf 	.word	0x080069bf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3304      	adds	r3, #4
 8006998:	2101      	movs	r1, #1
 800699a:	4618      	mov	r0, r3
 800699c:	f001 fb88 	bl	80080b0 <RCCEx_PLL2_Config>
 80069a0:	4603      	mov	r3, r0
 80069a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80069a4:	e00c      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3324      	adds	r3, #36	; 0x24
 80069aa:	2101      	movs	r1, #1
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 fc31 	bl	8008214 <RCCEx_PLL3_Config>
 80069b2:	4603      	mov	r3, r0
 80069b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80069b6:	e003      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	75fb      	strb	r3, [r7, #23]
      break;
 80069bc:	e000      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80069be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d109      	bne.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80069c6:	4932      	ldr	r1, [pc, #200]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069c8:	4b31      	ldr	r3, [pc, #196]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069cc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069d4:	4313      	orrs	r3, r2
 80069d6:	654b      	str	r3, [r1, #84]	; 0x54
 80069d8:	e001      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069da:	7dfb      	ldrb	r3, [r7, #23]
 80069dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d037      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ee:	2b05      	cmp	r3, #5
 80069f0:	d820      	bhi.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80069f2:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80069f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f8:	08006a3b 	.word	0x08006a3b
 80069fc:	08006a11 	.word	0x08006a11
 8006a00:	08006a23 	.word	0x08006a23
 8006a04:	08006a3b 	.word	0x08006a3b
 8006a08:	08006a3b 	.word	0x08006a3b
 8006a0c:	08006a3b 	.word	0x08006a3b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3304      	adds	r3, #4
 8006a14:	2101      	movs	r1, #1
 8006a16:	4618      	mov	r0, r3
 8006a18:	f001 fb4a 	bl	80080b0 <RCCEx_PLL2_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a20:	e00c      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	3324      	adds	r3, #36	; 0x24
 8006a26:	2101      	movs	r1, #1
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f001 fbf3 	bl	8008214 <RCCEx_PLL3_Config>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a32:	e003      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	75fb      	strb	r3, [r7, #23]
      break;
 8006a38:	e000      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d109      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a42:	4913      	ldr	r1, [pc, #76]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a44:	4b12      	ldr	r3, [pc, #72]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a48:	f023 0207 	bic.w	r2, r3, #7
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a50:	4313      	orrs	r3, r2
 8006a52:	654b      	str	r3, [r1, #84]	; 0x54
 8006a54:	e001      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
 8006a58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0304 	and.w	r3, r3, #4
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d040      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6c:	2b05      	cmp	r3, #5
 8006a6e:	d827      	bhi.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006a70:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a76:	bf00      	nop
 8006a78:	08006ac7 	.word	0x08006ac7
 8006a7c:	08006a9d 	.word	0x08006a9d
 8006a80:	08006aaf 	.word	0x08006aaf
 8006a84:	08006ac7 	.word	0x08006ac7
 8006a88:	08006ac7 	.word	0x08006ac7
 8006a8c:	08006ac7 	.word	0x08006ac7
 8006a90:	58024400 	.word	0x58024400
 8006a94:	58024800 	.word	0x58024800
 8006a98:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f001 fb04 	bl	80080b0 <RCCEx_PLL2_Config>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006aac:	e00c      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	3324      	adds	r3, #36	; 0x24
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f001 fbad 	bl	8008214 <RCCEx_PLL3_Config>
 8006aba:	4603      	mov	r3, r0
 8006abc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006abe:	e003      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac4:	e000      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006ac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ac8:	7dfb      	ldrb	r3, [r7, #23]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10a      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ace:	49b2      	ldr	r1, [pc, #712]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ad0:	4bb1      	ldr	r3, [pc, #708]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad4:	f023 0207 	bic.w	r2, r3, #7
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	658b      	str	r3, [r1, #88]	; 0x58
 8006ae2:	e001      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
 8006ae6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d044      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006afe:	d01b      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b04:	d805      	bhi.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d022      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006b0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b0e:	d00a      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006b10:	e01b      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b16:	d01d      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b1c:	d01c      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006b1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b22:	d01b      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006b24:	e011      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f001 fabf 	bl	80080b0 <RCCEx_PLL2_Config>
 8006b32:	4603      	mov	r3, r0
 8006b34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b36:	e012      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	3324      	adds	r3, #36	; 0x24
 8006b3c:	2102      	movs	r1, #2
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 fb68 	bl	8008214 <RCCEx_PLL3_Config>
 8006b44:	4603      	mov	r3, r0
 8006b46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b48:	e009      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b4e:	e006      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006b50:	bf00      	nop
 8006b52:	e004      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006b54:	bf00      	nop
 8006b56:	e002      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006b58:	bf00      	nop
 8006b5a:	e000      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b64:	498c      	ldr	r1, [pc, #560]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b66:	4b8c      	ldr	r3, [pc, #560]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b74:	4313      	orrs	r3, r2
 8006b76:	654b      	str	r3, [r1, #84]	; 0x54
 8006b78:	e001      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7a:	7dfb      	ldrb	r3, [r7, #23]
 8006b7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d044      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b94:	d01b      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b9a:	d805      	bhi.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d022      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba4:	d00a      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006ba6:	e01b      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bac:	d01d      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006bae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006bb2:	d01c      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006bb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bb8:	d01b      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006bba:	e011      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f001 fa74 	bl	80080b0 <RCCEx_PLL2_Config>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006bcc:	e012      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3324      	adds	r3, #36	; 0x24
 8006bd2:	2102      	movs	r1, #2
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 fb1d 	bl	8008214 <RCCEx_PLL3_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006bde:	e009      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	75fb      	strb	r3, [r7, #23]
      break;
 8006be4:	e006      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006be6:	bf00      	nop
 8006be8:	e004      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006bea:	bf00      	nop
 8006bec:	e002      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006bee:	bf00      	nop
 8006bf0:	e000      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10a      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bfa:	4967      	ldr	r1, [pc, #412]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bfc:	4b66      	ldr	r3, [pc, #408]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	658b      	str	r3, [r1, #88]	; 0x58
 8006c0e:	e001      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c10:	7dfb      	ldrb	r3, [r7, #23]
 8006c12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d044      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c2a:	d01b      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c30:	d805      	bhi.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d022      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c3a:	d00a      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006c3c:	e01b      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c42:	d01d      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006c44:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c48:	d01c      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006c4a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c4e:	d01b      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006c50:	e011      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3304      	adds	r3, #4
 8006c56:	2100      	movs	r1, #0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f001 fa29 	bl	80080b0 <RCCEx_PLL2_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c62:	e012      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3324      	adds	r3, #36	; 0x24
 8006c68:	2102      	movs	r1, #2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f001 fad2 	bl	8008214 <RCCEx_PLL3_Config>
 8006c70:	4603      	mov	r3, r0
 8006c72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c74:	e009      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	75fb      	strb	r3, [r7, #23]
      break;
 8006c7a:	e006      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006c7c:	bf00      	nop
 8006c7e:	e004      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006c80:	bf00      	nop
 8006c82:	e002      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006c84:	bf00      	nop
 8006c86:	e000      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10a      	bne.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c90:	4941      	ldr	r1, [pc, #260]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c92:	4b41      	ldr	r3, [pc, #260]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	658b      	str	r3, [r1, #88]	; 0x58
 8006ca4:	e001      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
 8006ca8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0308 	and.w	r3, r3, #8
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d01a      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc0:	d10a      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3324      	adds	r3, #36	; 0x24
 8006cc6:	2102      	movs	r1, #2
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f001 faa3 	bl	8008214 <RCCEx_PLL3_Config>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006cd8:	492f      	ldr	r1, [pc, #188]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006cda:	4b2f      	ldr	r3, [pc, #188]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cde:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0310 	and.w	r3, r3, #16
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d01a      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d02:	d10a      	bne.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3324      	adds	r3, #36	; 0x24
 8006d08:	2102      	movs	r1, #2
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f001 fa82 	bl	8008214 <RCCEx_PLL3_Config>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d1a:	491f      	ldr	r1, [pc, #124]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d1c:	4b1e      	ldr	r3, [pc, #120]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d032      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d44:	d00d      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d4a:	d016      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d111      	bne.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3304      	adds	r3, #4
 8006d54:	2100      	movs	r1, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 f9aa 	bl	80080b0 <RCCEx_PLL2_Config>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d60:	e00c      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3324      	adds	r3, #36	; 0x24
 8006d66:	2102      	movs	r1, #2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f001 fa53 	bl	8008214 <RCCEx_PLL3_Config>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d72:	e003      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	75fb      	strb	r3, [r7, #23]
      break;
 8006d78:	e000      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10c      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d82:	4905      	ldr	r1, [pc, #20]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d84:	4b04      	ldr	r3, [pc, #16]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d92:	4313      	orrs	r3, r2
 8006d94:	658b      	str	r3, [r1, #88]	; 0x58
 8006d96:	e003      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006d98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d02f      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006db6:	d00c      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006db8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dbc:	d015      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dc2:	d10f      	bne.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dc4:	4a81      	ldr	r2, [pc, #516]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006dc6:	4b81      	ldr	r3, [pc, #516]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006dd0:	e00c      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3324      	adds	r3, #36	; 0x24
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f001 fa1b 	bl	8008214 <RCCEx_PLL3_Config>
 8006dde:	4603      	mov	r3, r0
 8006de0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006de2:	e003      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	75fb      	strb	r3, [r7, #23]
      break;
 8006de8:	e000      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10a      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006df2:	4976      	ldr	r1, [pc, #472]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006df4:	4b75      	ldr	r3, [pc, #468]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e02:	4313      	orrs	r3, r2
 8006e04:	654b      	str	r3, [r1, #84]	; 0x54
 8006e06:	e001      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
 8006e0a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d029      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e24:	d007      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006e26:	e00f      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e28:	4a68      	ldr	r2, [pc, #416]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006e2a:	4b68      	ldr	r3, [pc, #416]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e34:	e00b      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	2102      	movs	r1, #2
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f001 f937 	bl	80080b0 <RCCEx_PLL2_Config>
 8006e42:	4603      	mov	r3, r0
 8006e44:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e46:	e002      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d109      	bne.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e54:	495d      	ldr	r1, [pc, #372]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006e56:	4b5d      	ldr	r3, [pc, #372]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e62:	4313      	orrs	r3, r2
 8006e64:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e66:	e001      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	3324      	adds	r3, #36	; 0x24
 8006e7c:	2102      	movs	r1, #2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f001 f9c8 	bl	8008214 <RCCEx_PLL3_Config>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d02f      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ea2:	d00c      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ea8:	d802      	bhi.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d011      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006eae:	e00d      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eb4:	d00f      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eba:	d00e      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006ebc:	e006      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ebe:	4a43      	ldr	r2, [pc, #268]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006ec0:	4b42      	ldr	r3, [pc, #264]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006eca:	e007      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed0:	e004      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006ed2:	bf00      	nop
 8006ed4:	e002      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006ed6:	bf00      	nop
 8006ed8:	e000      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006edc:	7dfb      	ldrb	r3, [r7, #23]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d109      	bne.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ee2:	493a      	ldr	r1, [pc, #232]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006ee4:	4b39      	ldr	r3, [pc, #228]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	654b      	str	r3, [r1, #84]	; 0x54
 8006ef4:	e001      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d008      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f06:	4931      	ldr	r1, [pc, #196]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006f08:	4b30      	ldr	r3, [pc, #192]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f14:	4313      	orrs	r3, r2
 8006f16:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d009      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006f24:	4929      	ldr	r1, [pc, #164]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006f26:	4b29      	ldr	r3, [pc, #164]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f34:	4313      	orrs	r3, r2
 8006f36:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d008      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f44:	4921      	ldr	r1, [pc, #132]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006f46:	4b21      	ldr	r3, [pc, #132]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f52:	4313      	orrs	r3, r2
 8006f54:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00d      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f62:	4a1a      	ldr	r2, [pc, #104]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006f64:	4b19      	ldr	r3, [pc, #100]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f6c:	6113      	str	r3, [r2, #16]
 8006f6e:	4917      	ldr	r1, [pc, #92]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006f70:	4b16      	ldr	r3, [pc, #88]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	da08      	bge.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f86:	4911      	ldr	r1, [pc, #68]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006f88:	4b10      	ldr	r3, [pc, #64]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f94:	4313      	orrs	r3, r2
 8006f96:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d009      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fa4:	4909      	ldr	r1, [pc, #36]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006fa6:	4b09      	ldr	r3, [pc, #36]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8006fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006faa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006fb8:	7dbb      	ldrb	r3, [r7, #22]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xdee>
  {
    return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	e000      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  }
  return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	58024400 	.word	0x58024400

08006fd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b090      	sub	sp, #64	; 0x40
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fde:	f040 8092 	bne.w	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006fe2:	4ba8      	ldr	r3, [pc, #672]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (saiclocksource)
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	f200 8085 	bhi.w	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8006ff4:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffa:	bf00      	nop
 8006ffc:	08007011 	.word	0x08007011
 8007000:	08007039 	.word	0x08007039
 8007004:	08007061 	.word	0x08007061
 8007008:	080070f9 	.word	0x080070f9
 800700c:	08007089 	.word	0x08007089
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007010:	4b9c      	ldr	r3, [pc, #624]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800701c:	d108      	bne.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800701e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007022:	4618      	mov	r0, r3
 8007024:	f000 fef8 	bl	8007e18 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800702c:	f000 bc3d 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 8007030:	2300      	movs	r3, #0
 8007032:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007034:	f000 bc39 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007038:	4b92      	ldr	r3, [pc, #584]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007044:	d108      	bne.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007046:	f107 0318 	add.w	r3, r7, #24
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fc4c 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007054:	f000 bc29 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800705c:	f000 bc25 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007060:	4b88      	ldr	r3, [pc, #544]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800706c:	d108      	bne.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800706e:	f107 030c 	add.w	r3, r7, #12
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fd84 	bl	8007b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800707c:	f000 bc15 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007084:	f000 bc11 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007088:	4b7e      	ldr	r3, [pc, #504]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800708a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800708c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007090:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007092:	4b7c      	ldr	r3, [pc, #496]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0304 	and.w	r3, r3, #4
 800709a:	2b04      	cmp	r3, #4
 800709c:	d10c      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800709e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d109      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070a4:	4b77      	ldr	r3, [pc, #476]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	08db      	lsrs	r3, r3, #3
 80070aa:	f003 0303 	and.w	r3, r3, #3
 80070ae:	4a76      	ldr	r2, [pc, #472]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80070b0:	fa22 f303 	lsr.w	r3, r2, r3
 80070b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b6:	e01e      	b.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070b8:	4b72      	ldr	r3, [pc, #456]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c4:	d106      	bne.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80070c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070cc:	d102      	bne.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80070ce:	4b6f      	ldr	r3, [pc, #444]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80070d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070d2:	e010      	b.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070d4:	4b6b      	ldr	r3, [pc, #428]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070e0:	d106      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80070e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e8:	d102      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80070ea:	4b69      	ldr	r3, [pc, #420]	; (8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80070ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070ee:	e002      	b.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80070f4:	e3d9      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 80070f6:	e3d8      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80070f8:	4b66      	ldr	r3, [pc, #408]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070fc:	e3d5      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      default :
        {
          frequency = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007102:	bf00      	nop
 8007104:	e3d1      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800710c:	f040 808a 	bne.w	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007110:	4b5c      	ldr	r3, [pc, #368]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007114:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007118:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (saiclocksource)
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	2b80      	cmp	r3, #128	; 0x80
 800711e:	d030      	beq.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8007120:	2b80      	cmp	r3, #128	; 0x80
 8007122:	d804      	bhi.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8007124:	2b00      	cmp	r3, #0
 8007126:	d008      	beq.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 8007128:	2b40      	cmp	r3, #64	; 0x40
 800712a:	d018      	beq.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 800712c:	e076      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 800712e:	2bc0      	cmp	r3, #192	; 0xc0
 8007130:	d071      	beq.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 8007132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007136:	d036      	beq.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 8007138:	e070      	b.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800713a:	4b52      	ldr	r3, [pc, #328]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007146:	d107      	bne.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800714c:	4618      	mov	r0, r3
 800714e:	f000 fe63 	bl	8007e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007154:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007156:	e3a8      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 8007158:	2300      	movs	r3, #0
 800715a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800715c:	e3a5      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800715e:	4b49      	ldr	r3, [pc, #292]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800716a:	d107      	bne.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800716c:	f107 0318 	add.w	r3, r7, #24
 8007170:	4618      	mov	r0, r3
 8007172:	f000 fbb9 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800717a:	e396      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 800717c:	2300      	movs	r3, #0
 800717e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007180:	e393      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007182:	4b40      	ldr	r3, [pc, #256]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800718a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800718e:	d107      	bne.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007190:	f107 030c 	add.w	r3, r7, #12
 8007194:	4618      	mov	r0, r3
 8007196:	f000 fcf3 	bl	8007b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800719e:	e384      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071a4:	e381      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071a6:	4b37      	ldr	r3, [pc, #220]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80071a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071ae:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071b0:	4b34      	ldr	r3, [pc, #208]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d10c      	bne.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 80071bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d109      	bne.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071c2:	4b30      	ldr	r3, [pc, #192]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	08db      	lsrs	r3, r3, #3
 80071c8:	f003 0303 	and.w	r3, r3, #3
 80071cc:	4a2e      	ldr	r2, [pc, #184]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80071ce:	fa22 f303 	lsr.w	r3, r2, r3
 80071d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071d4:	e01e      	b.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071d6:	4b2b      	ldr	r3, [pc, #172]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071e2:	d106      	bne.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 80071e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071ea:	d102      	bne.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80071ec:	4b27      	ldr	r3, [pc, #156]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80071ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071f0:	e010      	b.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071f2:	4b24      	ldr	r3, [pc, #144]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071fe:	d106      	bne.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007206:	d102      	bne.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007208:	4b21      	ldr	r3, [pc, #132]	; (8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800720a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800720c:	e002      	b.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007212:	e34a      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8007214:	e349      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007216:	4b1f      	ldr	r3, [pc, #124]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007218:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800721a:	e346      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      default :
        {
          frequency = 0;
 800721c:	2300      	movs	r3, #0
 800721e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007220:	bf00      	nop
 8007222:	e342      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800722a:	f040 8098 	bne.w	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800722e:	4b15      	ldr	r3, [pc, #84]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007232:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007236:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (saiclocksource)
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800723e:	d03d      	beq.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8007240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007244:	d805      	bhi.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00a      	beq.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
 800724a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800724e:	d023      	beq.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8007250:	e081      	b.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8007252:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007256:	d07b      	beq.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8007258:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800725c:	d040      	beq.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800725e:	e07a      	b.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007260:	4b08      	ldr	r3, [pc, #32]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007268:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800726c:	d107      	bne.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800726e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007272:	4618      	mov	r0, r3
 8007274:	f000 fdd0 	bl	8007e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800727c:	e315      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 800727e:	2300      	movs	r3, #0
 8007280:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007282:	e312      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8007284:	58024400 	.word	0x58024400
 8007288:	03d09000 	.word	0x03d09000
 800728c:	003d0900 	.word	0x003d0900
 8007290:	007a1200 	.word	0x007a1200
 8007294:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007298:	4ba4      	ldr	r3, [pc, #656]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072a4:	d107      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072a6:	f107 0318 	add.w	r3, r7, #24
 80072aa:	4618      	mov	r0, r3
 80072ac:	f000 fb1c 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80072b4:	e2f9      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ba:	e2f6      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072bc:	4b9b      	ldr	r3, [pc, #620]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072c8:	d107      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072ca:	f107 030c 	add.w	r3, r7, #12
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 fc56 	bl	8007b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80072d8:	e2e7      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072de:	e2e4      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80072e0:	4b92      	ldr	r3, [pc, #584]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80072e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072e8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072ea:	4b90      	ldr	r3, [pc, #576]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0304 	and.w	r3, r3, #4
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d10c      	bne.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
 80072f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d109      	bne.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072fc:	4b8b      	ldr	r3, [pc, #556]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	08db      	lsrs	r3, r3, #3
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	4a8a      	ldr	r2, [pc, #552]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x560>)
 8007308:	fa22 f303 	lsr.w	r3, r2, r3
 800730c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800730e:	e01e      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007310:	4b86      	ldr	r3, [pc, #536]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800731c:	d106      	bne.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 800731e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007324:	d102      	bne.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007326:	4b83      	ldr	r3, [pc, #524]	; (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x564>)
 8007328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800732a:	e010      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800732c:	4b7f      	ldr	r3, [pc, #508]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007338:	d106      	bne.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800733a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800733c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007340:	d102      	bne.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007342:	4b7d      	ldr	r3, [pc, #500]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x568>)
 8007344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007346:	e002      	b.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800734c:	e2ad      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 800734e:	e2ac      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007350:	4b7a      	ldr	r3, [pc, #488]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007352:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007354:	e2a9      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      default :
        {
          frequency = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800735a:	bf00      	nop
 800735c:	e2a5      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007364:	f040 808e 	bne.w	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007368:	4b70      	ldr	r3, [pc, #448]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 800736a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007370:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (saiclocksource)
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007378:	d033      	beq.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 800737a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800737e:	d805      	bhi.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00a      	beq.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
 8007384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007388:	d019      	beq.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 800738a:	e077      	b.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
 800738c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007390:	d071      	beq.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8007392:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007396:	d036      	beq.n	8007406 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007398:	e070      	b.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800739a:	4b64      	ldr	r3, [pc, #400]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073a6:	d107      	bne.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 fd33 	bl	8007e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073b6:	e278      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073bc:	e275      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073be:	4b5b      	ldr	r3, [pc, #364]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073ca:	d107      	bne.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073cc:	f107 0318 	add.w	r3, r7, #24
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 fa89 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80073da:	e266      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 80073dc:	2300      	movs	r3, #0
 80073de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073e0:	e263      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073e2:	4b52      	ldr	r3, [pc, #328]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073ee:	d107      	bne.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073f0:	f107 030c 	add.w	r3, r7, #12
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 fbc3 	bl	8007b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073fe:	e254      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 8007400:	2300      	movs	r3, #0
 8007402:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007404:	e251      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007406:	4b49      	ldr	r3, [pc, #292]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8007408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800740a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800740e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007410:	4b46      	ldr	r3, [pc, #280]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b04      	cmp	r3, #4
 800741a:	d10c      	bne.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800741c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741e:	2b00      	cmp	r3, #0
 8007420:	d109      	bne.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007422:	4b42      	ldr	r3, [pc, #264]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	08db      	lsrs	r3, r3, #3
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	4a40      	ldr	r2, [pc, #256]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x560>)
 800742e:	fa22 f303 	lsr.w	r3, r2, r3
 8007432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007434:	e01e      	b.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007436:	4b3d      	ldr	r3, [pc, #244]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007442:	d106      	bne.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8007444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800744a:	d102      	bne.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800744c:	4b39      	ldr	r3, [pc, #228]	; (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x564>)
 800744e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007450:	e010      	b.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007452:	4b36      	ldr	r3, [pc, #216]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800745a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800745e:	d106      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8007460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007466:	d102      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007468:	4b33      	ldr	r3, [pc, #204]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x568>)
 800746a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800746c:	e002      	b.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800746e:	2300      	movs	r3, #0
 8007470:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007472:	e21a      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8007474:	e219      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007476:	4b31      	ldr	r3, [pc, #196]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800747a:	e216      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      default :
        {
          frequency = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007480:	bf00      	nop
 8007482:	e212      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748a:	f040 8098 	bne.w	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800748e:	4b27      	ldr	r3, [pc, #156]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8007490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007492:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007496:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800749e:	d033      	beq.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80074a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a4:	d805      	bhi.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
 80074aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ae:	d019      	beq.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 80074b0:	e081      	b.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80074b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074b6:	d07b      	beq.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
 80074b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074bc:	d040      	beq.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
 80074be:	e07a      	b.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074c0:	4b1a      	ldr	r3, [pc, #104]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074cc:	d107      	bne.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 fca0 	bl	8007e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80074dc:	e1e5      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 80074de:	2300      	movs	r3, #0
 80074e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074e2:	e1e2      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074e4:	4b11      	ldr	r3, [pc, #68]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074f0:	d107      	bne.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x532>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074f2:	f107 0318 	add.w	r3, r7, #24
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 f9f6 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007500:	e1d3      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 8007502:	2300      	movs	r3, #0
 8007504:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007506:	e1d0      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007508:	4b08      	ldr	r3, [pc, #32]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007514:	d107      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007516:	f107 030c 	add.w	r3, r7, #12
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fb30 	bl	8007b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007524:	e1c1      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800752a:	e1be      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 800752c:	58024400 	.word	0x58024400
 8007530:	03d09000 	.word	0x03d09000
 8007534:	003d0900 	.word	0x003d0900
 8007538:	007a1200 	.word	0x007a1200
 800753c:	00bb8000 	.word	0x00bb8000
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007540:	4ba6      	ldr	r3, [pc, #664]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007544:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007548:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800754a:	4ba4      	ldr	r3, [pc, #656]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0304 	and.w	r3, r3, #4
 8007552:	2b04      	cmp	r3, #4
 8007554:	d10c      	bne.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8007556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007558:	2b00      	cmp	r3, #0
 800755a:	d109      	bne.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800755c:	4b9f      	ldr	r3, [pc, #636]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	08db      	lsrs	r3, r3, #3
 8007562:	f003 0303 	and.w	r3, r3, #3
 8007566:	4a9e      	ldr	r2, [pc, #632]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007568:	fa22 f303 	lsr.w	r3, r2, r3
 800756c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800756e:	e01e      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007570:	4b9a      	ldr	r3, [pc, #616]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800757c:	d106      	bne.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 800757e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007584:	d102      	bne.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007586:	4b97      	ldr	r3, [pc, #604]	; (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8007588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800758a:	e010      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800758c:	4b93      	ldr	r3, [pc, #588]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007598:	d106      	bne.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 800759a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075a0:	d102      	bne.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80075a2:	4b91      	ldr	r3, [pc, #580]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80075a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075a6:	e002      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80075ac:	e17d      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 80075ae:	e17c      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80075b0:	4b8e      	ldr	r3, [pc, #568]	; (80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80075b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075b4:	e179      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      default :
        {
          frequency = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075ba:	bf00      	nop
 80075bc:	e175      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80075c4:	d16d      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80075c6:	4b85      	ldr	r3, [pc, #532]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80075c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075ce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d6:	d016      	beq.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80075d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075dc:	d025      	beq.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d15b      	bne.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x6ca>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075e2:	4b7e      	ldr	r3, [pc, #504]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075ee:	d107      	bne.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075f0:	f107 0318 	add.w	r3, r7, #24
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 f977 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80075fe:	e154      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007604:	e151      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007606:	4b75      	ldr	r3, [pc, #468]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800760e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007612:	d107      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007614:	f107 030c 	add.w	r3, r7, #12
 8007618:	4618      	mov	r0, r3
 800761a:	f000 fab1 	bl	8007b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007622:	e142      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
           frequency = 0;
 8007624:	2300      	movs	r3, #0
 8007626:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007628:	e13f      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800762a:	4b6c      	ldr	r3, [pc, #432]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800762c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800762e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007632:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007634:	4b69      	ldr	r3, [pc, #420]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b04      	cmp	r3, #4
 800763e:	d10c      	bne.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007642:	2b00      	cmp	r3, #0
 8007644:	d109      	bne.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007646:	4b65      	ldr	r3, [pc, #404]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	08db      	lsrs	r3, r3, #3
 800764c:	f003 0303 	and.w	r3, r3, #3
 8007650:	4a63      	ldr	r2, [pc, #396]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007652:	fa22 f303 	lsr.w	r3, r2, r3
 8007656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007658:	e01e      	b.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800765a:	4b60      	ldr	r3, [pc, #384]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007666:	d106      	bne.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8007668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800766e:	d102      	bne.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007670:	4b5c      	ldr	r3, [pc, #368]	; (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8007672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007674:	e010      	b.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007676:	4b59      	ldr	r3, [pc, #356]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007682:	d106      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 8007684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800768a:	d102      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800768c:	4b56      	ldr	r3, [pc, #344]	; (80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800768e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007690:	e002      	b.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007692:	2300      	movs	r3, #0
 8007694:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007696:	e108      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8007698:	e107      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      default :
        {
          frequency = 0;
 800769a:	2300      	movs	r3, #0
 800769c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800769e:	bf00      	nop
 80076a0:	e103      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a8:	d133      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80076aa:	4b4c      	ldr	r3, [pc, #304]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80076ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
 80076ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076be:	d012      	beq.n	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80076c0:	e023      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076c2:	4b46      	ldr	r3, [pc, #280]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076ce:	d107      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fb9f 	bl	8007e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80076de:	e0e4      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076e4:	e0e1      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076e6:	4b3d      	ldr	r3, [pc, #244]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076f2:	d107      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076f4:	f107 0318 	add.w	r3, r7, #24
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 f8f5 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007702:	e0d2      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007708:	e0cf      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }

      default :
        {
          frequency = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800770e:	bf00      	nop
 8007710:	e0cb      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007718:	d17e      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800771a:	4b30      	ldr	r3, [pc, #192]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800771c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007722:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800772a:	d028      	beq.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 800772c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007730:	d805      	bhi.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00d      	beq.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800773a:	d00e      	beq.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800773c:	e068      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800773e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007742:	d041      	beq.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8007744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007748:	d055      	beq.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
 800774a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800774e:	d028      	beq.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
 8007750:	e05e      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007752:	f000 f8b3 	bl	80078bc <HAL_RCCEx_GetD3PCLK1Freq>
 8007756:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007758:	e0a7      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800775a:	4b20      	ldr	r3, [pc, #128]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007762:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007766:	d107      	bne.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007768:	f107 0318 	add.w	r3, r7, #24
 800776c:	4618      	mov	r0, r3
 800776e:	f000 f8bb 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007776:	e098      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800777c:	e095      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800777e:	4b17      	ldr	r3, [pc, #92]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800778a:	d107      	bne.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800778c:	f107 030c 	add.w	r3, r7, #12
 8007790:	4618      	mov	r0, r3
 8007792:	f000 f9f5 	bl	8007b80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800779a:	e086      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 800779c:	2300      	movs	r3, #0
 800779e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077a0:	e083      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077a2:	4b0e      	ldr	r3, [pc, #56]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0304 	and.w	r3, r3, #4
 80077aa:	2b04      	cmp	r3, #4
 80077ac:	d109      	bne.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077ae:	4b0b      	ldr	r3, [pc, #44]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	08db      	lsrs	r3, r3, #3
 80077b4:	f003 0303 	and.w	r3, r3, #3
 80077b8:	4a09      	ldr	r2, [pc, #36]	; (80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80077ba:	fa22 f303 	lsr.w	r3, r2, r3
 80077be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80077c0:	e073      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077c6:	e070      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80077c8:	4b04      	ldr	r3, [pc, #16]	; (80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077d4:	d10c      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
         {
          frequency = CSI_VALUE;
 80077d6:	4b03      	ldr	r3, [pc, #12]	; (80077e4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80077d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80077da:	e066      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 80077dc:	58024400 	.word	0x58024400
 80077e0:	03d09000 	.word	0x03d09000
 80077e4:	003d0900 	.word	0x003d0900
 80077e8:	007a1200 	.word	0x007a1200
 80077ec:	00bb8000 	.word	0x00bb8000
           frequency = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077f4:	e059      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80077f6:	4b2f      	ldr	r3, [pc, #188]	; (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007802:	d102      	bne.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
         {
          frequency = HSE_VALUE;
 8007804:	4b2c      	ldr	r3, [pc, #176]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 8007806:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007808:	e04f      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 800780a:	2300      	movs	r3, #0
 800780c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800780e:	e04c      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007814:	bf00      	nop
 8007816:	e048      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800781e:	d142      	bne.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007820:	4b24      	ldr	r3, [pc, #144]	; (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
 8007822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007824:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007828:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007830:	d011      	beq.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007836:	d020      	beq.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007838:	2b00      	cmp	r3, #0
 800783a:	d130      	bne.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800783c:	4b1d      	ldr	r3, [pc, #116]	; (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007848:	d102      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
         {
          frequency = HSE_VALUE;
 800784a:	4b1b      	ldr	r3, [pc, #108]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
 800784c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800784e:	e02c      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007854:	e029      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007856:	4b17      	ldr	r3, [pc, #92]	; (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800785e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007862:	d107      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fad5 	bl	8007e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007872:	e01a      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 8007874:	2300      	movs	r3, #0
 8007876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007878:	e017      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800787a:	4b0e      	ldr	r3, [pc, #56]	; (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007886:	d107      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007888:	f107 0318 	add.w	r3, r7, #24
 800788c:	4618      	mov	r0, r3
 800788e:	f000 f82b 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007896:	e008      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800789c:	e005      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      default :
        {
          frequency = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078a2:	bf00      	nop
 80078a4:	e001      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        }
      }
    }
  else
    {
      frequency = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80078aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3740      	adds	r7, #64	; 0x40
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	58024400 	.word	0x58024400
 80078b8:	007a1200 	.word	0x007a1200

080078bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80078c0:	f7fe fc2c 	bl	800611c <HAL_RCC_GetHCLKFreq>
 80078c4:	4601      	mov	r1, r0
 80078c6:	4b06      	ldr	r3, [pc, #24]	; (80078e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	091b      	lsrs	r3, r3, #4
 80078cc:	f003 0307 	and.w	r3, r3, #7
 80078d0:	4a04      	ldr	r2, [pc, #16]	; (80078e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80078d2:	5cd3      	ldrb	r3, [r2, r3]
 80078d4:	f003 031f 	and.w	r3, r3, #31
 80078d8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80078dc:	4618      	mov	r0, r3
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	58024400 	.word	0x58024400
 80078e4:	0800c720 	.word	0x0800c720

080078e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b089      	sub	sp, #36	; 0x24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078f0:	4b9d      	ldr	r3, [pc, #628]	; (8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80078fa:	4b9b      	ldr	r3, [pc, #620]	; (8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80078fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fe:	0b1b      	lsrs	r3, r3, #12
 8007900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007904:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007906:	4b98      	ldr	r3, [pc, #608]	; (8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790a:	091b      	lsrs	r3, r3, #4
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007912:	4b95      	ldr	r3, [pc, #596]	; (8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007916:	08db      	lsrs	r3, r3, #3
 8007918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	fb02 f303 	mul.w	r3, r2, r3
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 810a 	beq.w	8007b4a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d05a      	beq.n	80079f2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800793c:	2b01      	cmp	r3, #1
 800793e:	d302      	bcc.n	8007946 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007940:	2b02      	cmp	r3, #2
 8007942:	d078      	beq.n	8007a36 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007944:	e099      	b.n	8007a7a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007946:	4b88      	ldr	r3, [pc, #544]	; (8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	d02d      	beq.n	80079ae <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007952:	4b85      	ldr	r3, [pc, #532]	; (8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	08db      	lsrs	r3, r3, #3
 8007958:	f003 0303 	and.w	r3, r3, #3
 800795c:	4a83      	ldr	r2, [pc, #524]	; (8007b6c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800795e:	fa22 f303 	lsr.w	r3, r2, r3
 8007962:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	ee07 3a90 	vmov	s15, r3
 8007974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800797c:	4b7a      	ldr	r3, [pc, #488]	; (8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800797e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007984:	ee07 3a90 	vmov	s15, r3
 8007988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800798c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007990:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007b70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007994:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007998:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800799c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079a8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80079ac:	e087      	b.n	8007abe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	ee07 3a90 	vmov	s15, r3
 80079b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007b74 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80079bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079c0:	4b69      	ldr	r3, [pc, #420]	; (8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c8:	ee07 3a90 	vmov	s15, r3
 80079cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80079d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007b70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80079d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079f0:	e065      	b.n	8007abe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	ee07 3a90 	vmov	s15, r3
 80079f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007a00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a04:	4b58      	ldr	r3, [pc, #352]	; (8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a0c:	ee07 3a90 	vmov	s15, r3
 8007a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a14:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a18:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007b70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a34:	e043      	b.n	8007abe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	ee07 3a90 	vmov	s15, r3
 8007a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a40:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007b7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a48:	4b47      	ldr	r3, [pc, #284]	; (8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a50:	ee07 3a90 	vmov	s15, r3
 8007a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a58:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a5c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007b70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007a60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a78:	e021      	b.n	8007abe <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	ee07 3a90 	vmov	s15, r3
 8007a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a84:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007a88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a8c:	4b36      	ldr	r3, [pc, #216]	; (8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a94:	ee07 3a90 	vmov	s15, r3
 8007a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aa0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007b70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007aa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ab8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007abc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007abe:	4b2a      	ldr	r3, [pc, #168]	; (8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac2:	0a5b      	lsrs	r3, r3, #9
 8007ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ac8:	ee07 3a90 	vmov	s15, r3
 8007acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ad4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ae4:	ee17 2a90 	vmov	r2, s15
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007aec:	4b1e      	ldr	r3, [pc, #120]	; (8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	0c1b      	lsrs	r3, r3, #16
 8007af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b12:	ee17 2a90 	vmov	r2, s15
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007b1a:	4b13      	ldr	r3, [pc, #76]	; (8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1e:	0e1b      	lsrs	r3, r3, #24
 8007b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b24:	ee07 3a90 	vmov	s15, r3
 8007b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b40:	ee17 2a90 	vmov	r2, s15
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007b48:	e008      	b.n	8007b5c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	609a      	str	r2, [r3, #8]
}
 8007b5c:	bf00      	nop
 8007b5e:	3724      	adds	r7, #36	; 0x24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	58024400 	.word	0x58024400
 8007b6c:	03d09000 	.word	0x03d09000
 8007b70:	46000000 	.word	0x46000000
 8007b74:	4c742400 	.word	0x4c742400
 8007b78:	4a742400 	.word	0x4a742400
 8007b7c:	4af42400 	.word	0x4af42400

08007b80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b089      	sub	sp, #36	; 0x24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b88:	4b9d      	ldr	r3, [pc, #628]	; (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8c:	f003 0303 	and.w	r3, r3, #3
 8007b90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007b92:	4b9b      	ldr	r3, [pc, #620]	; (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b96:	0d1b      	lsrs	r3, r3, #20
 8007b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007b9e:	4b98      	ldr	r3, [pc, #608]	; (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba2:	0a1b      	lsrs	r3, r3, #8
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007baa:	4b95      	ldr	r3, [pc, #596]	; (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bae:	08db      	lsrs	r3, r3, #3
 8007bb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	fb02 f303 	mul.w	r3, r2, r3
 8007bba:	ee07 3a90 	vmov	s15, r3
 8007bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 810a 	beq.w	8007de2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d05a      	beq.n	8007c8a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d302      	bcc.n	8007bde <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d078      	beq.n	8007cce <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007bdc:	e099      	b.n	8007d12 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bde:	4b88      	ldr	r3, [pc, #544]	; (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0320 	and.w	r3, r3, #32
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d02d      	beq.n	8007c46 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bea:	4b85      	ldr	r3, [pc, #532]	; (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	08db      	lsrs	r3, r3, #3
 8007bf0:	f003 0303 	and.w	r3, r3, #3
 8007bf4:	4a83      	ldr	r2, [pc, #524]	; (8007e04 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bfa:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	ee07 3a90 	vmov	s15, r3
 8007c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	ee07 3a90 	vmov	s15, r3
 8007c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c14:	4b7a      	ldr	r3, [pc, #488]	; (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1c:	ee07 3a90 	vmov	s15, r3
 8007c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c24:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c28:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007c2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c40:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007c44:	e087      	b.n	8007d56 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	ee07 3a90 	vmov	s15, r3
 8007c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c50:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007e0c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c58:	4b69      	ldr	r3, [pc, #420]	; (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c60:	ee07 3a90 	vmov	s15, r3
 8007c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c68:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c6c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007c70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c88:	e065      	b.n	8007d56 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	ee07 3a90 	vmov	s15, r3
 8007c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c94:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c9c:	4b58      	ldr	r3, [pc, #352]	; (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca4:	ee07 3a90 	vmov	s15, r3
 8007ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cac:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cb0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ccc:	e043      	b.n	8007d56 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	ee07 3a90 	vmov	s15, r3
 8007cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007e14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ce0:	4b47      	ldr	r3, [pc, #284]	; (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce8:	ee07 3a90 	vmov	s15, r3
 8007cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cf4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d10:	e021      	b.n	8007d56 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	ee07 3a90 	vmov	s15, r3
 8007d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d1c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d24:	4b36      	ldr	r3, [pc, #216]	; (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d2c:	ee07 3a90 	vmov	s15, r3
 8007d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d34:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d38:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d54:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007d56:	4b2a      	ldr	r3, [pc, #168]	; (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	0a5b      	lsrs	r3, r3, #9
 8007d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d60:	ee07 3a90 	vmov	s15, r3
 8007d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d70:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d7c:	ee17 2a90 	vmov	r2, s15
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007d84:	4b1e      	ldr	r3, [pc, #120]	; (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d88:	0c1b      	lsrs	r3, r3, #16
 8007d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007daa:	ee17 2a90 	vmov	r2, s15
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007db2:	4b13      	ldr	r3, [pc, #76]	; (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	0e1b      	lsrs	r3, r3, #24
 8007db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dbc:	ee07 3a90 	vmov	s15, r3
 8007dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dd8:	ee17 2a90 	vmov	r2, s15
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007de0:	e008      	b.n	8007df4 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	609a      	str	r2, [r3, #8]
}
 8007df4:	bf00      	nop
 8007df6:	3724      	adds	r7, #36	; 0x24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	58024400 	.word	0x58024400
 8007e04:	03d09000 	.word	0x03d09000
 8007e08:	46000000 	.word	0x46000000
 8007e0c:	4c742400 	.word	0x4c742400
 8007e10:	4a742400 	.word	0x4a742400
 8007e14:	4af42400 	.word	0x4af42400

08007e18 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b089      	sub	sp, #36	; 0x24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e20:	4b9d      	ldr	r3, [pc, #628]	; (8008098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e24:	f003 0303 	and.w	r3, r3, #3
 8007e28:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007e2a:	4b9b      	ldr	r3, [pc, #620]	; (8008098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2e:	091b      	lsrs	r3, r3, #4
 8007e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e34:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007e36:	4b98      	ldr	r3, [pc, #608]	; (8008098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007e40:	4b95      	ldr	r3, [pc, #596]	; (8008098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e44:	08db      	lsrs	r3, r3, #3
 8007e46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	fb02 f303 	mul.w	r3, r2, r3
 8007e50:	ee07 3a90 	vmov	s15, r3
 8007e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e58:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 810a 	beq.w	8008078 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d05a      	beq.n	8007f20 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d302      	bcc.n	8007e74 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d078      	beq.n	8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007e72:	e099      	b.n	8007fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e74:	4b88      	ldr	r3, [pc, #544]	; (8008098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0320 	and.w	r3, r3, #32
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d02d      	beq.n	8007edc <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e80:	4b85      	ldr	r3, [pc, #532]	; (8008098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	08db      	lsrs	r3, r3, #3
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	4a84      	ldr	r2, [pc, #528]	; (800809c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e90:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	ee07 3a90 	vmov	s15, r3
 8007e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	ee07 3a90 	vmov	s15, r3
 8007ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eaa:	4b7b      	ldr	r3, [pc, #492]	; (8008098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb2:	ee07 3a90 	vmov	s15, r3
 8007eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ebe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80080a0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007eda:	e087      	b.n	8007fec <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	ee07 3a90 	vmov	s15, r3
 8007ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80080a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eee:	4b6a      	ldr	r3, [pc, #424]	; (8008098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef6:	ee07 3a90 	vmov	s15, r3
 8007efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f02:	eddf 5a67 	vldr	s11, [pc, #412]	; 80080a0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f1e:	e065      	b.n	8007fec <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f32:	4b59      	ldr	r3, [pc, #356]	; (8008098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3a:	ee07 3a90 	vmov	s15, r3
 8007f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f46:	eddf 5a56 	vldr	s11, [pc, #344]	; 80080a0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f62:	e043      	b.n	8007fec <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80080ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f76:	4b48      	ldr	r3, [pc, #288]	; (8008098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7e:	ee07 3a90 	vmov	s15, r3
 8007f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80080a0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fa6:	e021      	b.n	8007fec <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb2:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80080a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fba:	4b37      	ldr	r3, [pc, #220]	; (8008098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80080a0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fea:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007fec:	4b2a      	ldr	r3, [pc, #168]	; (8008098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff0:	0a5b      	lsrs	r3, r3, #9
 8007ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff6:	ee07 3a90 	vmov	s15, r3
 8007ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008002:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008006:	edd7 6a07 	vldr	s13, [r7, #28]
 800800a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800800e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008012:	ee17 2a90 	vmov	r2, s15
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800801a:	4b1f      	ldr	r3, [pc, #124]	; (8008098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800801c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801e:	0c1b      	lsrs	r3, r3, #16
 8008020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008024:	ee07 3a90 	vmov	s15, r3
 8008028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008030:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008034:	edd7 6a07 	vldr	s13, [r7, #28]
 8008038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800803c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008040:	ee17 2a90 	vmov	r2, s15
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008048:	4b13      	ldr	r3, [pc, #76]	; (8008098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800804a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804c:	0e1b      	lsrs	r3, r3, #24
 800804e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008052:	ee07 3a90 	vmov	s15, r3
 8008056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800805e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008062:	edd7 6a07 	vldr	s13, [r7, #28]
 8008066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800806a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800806e:	ee17 2a90 	vmov	r2, s15
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008076:	e008      	b.n	800808a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	609a      	str	r2, [r3, #8]
}
 800808a:	bf00      	nop
 800808c:	3724      	adds	r7, #36	; 0x24
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	58024400 	.word	0x58024400
 800809c:	03d09000 	.word	0x03d09000
 80080a0:	46000000 	.word	0x46000000
 80080a4:	4c742400 	.word	0x4c742400
 80080a8:	4a742400 	.word	0x4a742400
 80080ac:	4af42400 	.word	0x4af42400

080080b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080be:	4b53      	ldr	r3, [pc, #332]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 80080c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d101      	bne.n	80080ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e099      	b.n	8008202 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80080ce:	4a4f      	ldr	r2, [pc, #316]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 80080d0:	4b4e      	ldr	r3, [pc, #312]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80080d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080da:	f7f8 fb0b 	bl	80006f4 <HAL_GetTick>
 80080de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080e0:	e008      	b.n	80080f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80080e2:	f7f8 fb07 	bl	80006f4 <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d901      	bls.n	80080f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e086      	b.n	8008202 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080f4:	4b45      	ldr	r3, [pc, #276]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1f0      	bne.n	80080e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008100:	4942      	ldr	r1, [pc, #264]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 8008102:	4b42      	ldr	r3, [pc, #264]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 8008104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008106:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	031b      	lsls	r3, r3, #12
 8008110:	4313      	orrs	r3, r2
 8008112:	628b      	str	r3, [r1, #40]	; 0x28
 8008114:	493d      	ldr	r1, [pc, #244]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	3b01      	subs	r3, #1
 800811c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	3b01      	subs	r3, #1
 8008126:	025b      	lsls	r3, r3, #9
 8008128:	b29b      	uxth	r3, r3
 800812a:	431a      	orrs	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	3b01      	subs	r3, #1
 8008132:	041b      	lsls	r3, r3, #16
 8008134:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008138:	431a      	orrs	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	3b01      	subs	r3, #1
 8008140:	061b      	lsls	r3, r3, #24
 8008142:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008146:	4313      	orrs	r3, r2
 8008148:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800814a:	4930      	ldr	r1, [pc, #192]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 800814c:	4b2f      	ldr	r3, [pc, #188]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	4313      	orrs	r3, r2
 800815a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800815c:	492b      	ldr	r1, [pc, #172]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 800815e:	4b2b      	ldr	r3, [pc, #172]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 8008160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008162:	f023 0220 	bic.w	r2, r3, #32
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	4313      	orrs	r3, r2
 800816c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800816e:	4a27      	ldr	r2, [pc, #156]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 8008170:	4b26      	ldr	r3, [pc, #152]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 8008172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008174:	f023 0310 	bic.w	r3, r3, #16
 8008178:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800817a:	4924      	ldr	r1, [pc, #144]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 800817c:	4b23      	ldr	r3, [pc, #140]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 800817e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008180:	4b23      	ldr	r3, [pc, #140]	; (8008210 <RCCEx_PLL2_Config+0x160>)
 8008182:	4013      	ands	r3, r2
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	69d2      	ldr	r2, [r2, #28]
 8008188:	00d2      	lsls	r2, r2, #3
 800818a:	4313      	orrs	r3, r2
 800818c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800818e:	4a1f      	ldr	r2, [pc, #124]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 8008190:	4b1e      	ldr	r3, [pc, #120]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 8008192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008194:	f043 0310 	orr.w	r3, r3, #16
 8008198:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d106      	bne.n	80081ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80081a0:	4a1a      	ldr	r2, [pc, #104]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 80081a2:	4b1a      	ldr	r3, [pc, #104]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 80081a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081ac:	e00f      	b.n	80081ce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d106      	bne.n	80081c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80081b4:	4a15      	ldr	r2, [pc, #84]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 80081b6:	4b15      	ldr	r3, [pc, #84]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081c0:	e005      	b.n	80081ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80081c2:	4a12      	ldr	r2, [pc, #72]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 80081c4:	4b11      	ldr	r3, [pc, #68]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80081ce:	4a0f      	ldr	r2, [pc, #60]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 80081d0:	4b0e      	ldr	r3, [pc, #56]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081da:	f7f8 fa8b 	bl	80006f4 <HAL_GetTick>
 80081de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081e0:	e008      	b.n	80081f4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80081e2:	f7f8 fa87 	bl	80006f4 <HAL_GetTick>
 80081e6:	4602      	mov	r2, r0
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d901      	bls.n	80081f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e006      	b.n	8008202 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081f4:	4b05      	ldr	r3, [pc, #20]	; (800820c <RCCEx_PLL2_Config+0x15c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d0f0      	beq.n	80081e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008200:	7bfb      	ldrb	r3, [r7, #15]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	58024400 	.word	0x58024400
 8008210:	ffff0007 	.word	0xffff0007

08008214 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008222:	4b53      	ldr	r3, [pc, #332]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 8008224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008226:	f003 0303 	and.w	r3, r3, #3
 800822a:	2b03      	cmp	r3, #3
 800822c:	d101      	bne.n	8008232 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e099      	b.n	8008366 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008232:	4a4f      	ldr	r2, [pc, #316]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 8008234:	4b4e      	ldr	r3, [pc, #312]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800823c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800823e:	f7f8 fa59 	bl	80006f4 <HAL_GetTick>
 8008242:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008244:	e008      	b.n	8008258 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008246:	f7f8 fa55 	bl	80006f4 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b02      	cmp	r3, #2
 8008252:	d901      	bls.n	8008258 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e086      	b.n	8008366 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008258:	4b45      	ldr	r3, [pc, #276]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1f0      	bne.n	8008246 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008264:	4942      	ldr	r1, [pc, #264]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 8008266:	4b42      	ldr	r3, [pc, #264]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 8008268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826a:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	051b      	lsls	r3, r3, #20
 8008274:	4313      	orrs	r3, r2
 8008276:	628b      	str	r3, [r1, #40]	; 0x28
 8008278:	493d      	ldr	r1, [pc, #244]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	3b01      	subs	r3, #1
 8008280:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	3b01      	subs	r3, #1
 800828a:	025b      	lsls	r3, r3, #9
 800828c:	b29b      	uxth	r3, r3
 800828e:	431a      	orrs	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	3b01      	subs	r3, #1
 8008296:	041b      	lsls	r3, r3, #16
 8008298:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800829c:	431a      	orrs	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	061b      	lsls	r3, r3, #24
 80082a6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80082aa:	4313      	orrs	r3, r2
 80082ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80082ae:	4930      	ldr	r1, [pc, #192]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 80082b0:	4b2f      	ldr	r3, [pc, #188]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 80082b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	4313      	orrs	r3, r2
 80082be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80082c0:	492b      	ldr	r1, [pc, #172]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 80082c2:	4b2b      	ldr	r3, [pc, #172]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 80082c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80082d2:	4a27      	ldr	r2, [pc, #156]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 80082d4:	4b26      	ldr	r3, [pc, #152]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80082de:	4924      	ldr	r1, [pc, #144]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 80082e0:	4b23      	ldr	r3, [pc, #140]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 80082e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082e4:	4b23      	ldr	r3, [pc, #140]	; (8008374 <RCCEx_PLL3_Config+0x160>)
 80082e6:	4013      	ands	r3, r2
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	69d2      	ldr	r2, [r2, #28]
 80082ec:	00d2      	lsls	r2, r2, #3
 80082ee:	4313      	orrs	r3, r2
 80082f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80082f2:	4a1f      	ldr	r2, [pc, #124]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 80082f4:	4b1e      	ldr	r3, [pc, #120]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 80082f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d106      	bne.n	8008312 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008304:	4a1a      	ldr	r2, [pc, #104]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 8008306:	4b1a      	ldr	r3, [pc, #104]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 8008308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800830e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008310:	e00f      	b.n	8008332 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d106      	bne.n	8008326 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008318:	4a15      	ldr	r2, [pc, #84]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 800831a:	4b15      	ldr	r3, [pc, #84]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 800831c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008322:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008324:	e005      	b.n	8008332 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008326:	4a12      	ldr	r2, [pc, #72]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 8008328:	4b11      	ldr	r3, [pc, #68]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 800832a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008330:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008332:	4a0f      	ldr	r2, [pc, #60]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 8008334:	4b0e      	ldr	r3, [pc, #56]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800833c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800833e:	f7f8 f9d9 	bl	80006f4 <HAL_GetTick>
 8008342:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008344:	e008      	b.n	8008358 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008346:	f7f8 f9d5 	bl	80006f4 <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	2b02      	cmp	r3, #2
 8008352:	d901      	bls.n	8008358 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e006      	b.n	8008366 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008358:	4b05      	ldr	r3, [pc, #20]	; (8008370 <RCCEx_PLL3_Config+0x15c>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d0f0      	beq.n	8008346 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	58024400 	.word	0x58024400
 8008374:	ffff0007 	.word	0xffff0007

08008378 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8008380:	2300      	movs	r3, #0
 8008382:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e0e9      	b.n	8008562 <HAL_SPI_Init+0x1ea>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a74      	ldr	r2, [pc, #464]	; (800856c <HAL_SPI_Init+0x1f4>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d00f      	beq.n	80083be <HAL_SPI_Init+0x46>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a73      	ldr	r2, [pc, #460]	; (8008570 <HAL_SPI_Init+0x1f8>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00a      	beq.n	80083be <HAL_SPI_Init+0x46>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a71      	ldr	r2, [pc, #452]	; (8008574 <HAL_SPI_Init+0x1fc>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d005      	beq.n	80083be <HAL_SPI_Init+0x46>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	2b0f      	cmp	r3, #15
 80083b8:	d901      	bls.n	80083be <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e0d1      	b.n	8008562 <HAL_SPI_Init+0x1ea>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f8da 	bl	8008578 <SPI_GetPacketSize>
 80083c4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a68      	ldr	r2, [pc, #416]	; (800856c <HAL_SPI_Init+0x1f4>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d00c      	beq.n	80083ea <HAL_SPI_Init+0x72>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a66      	ldr	r2, [pc, #408]	; (8008570 <HAL_SPI_Init+0x1f8>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d007      	beq.n	80083ea <HAL_SPI_Init+0x72>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a65      	ldr	r2, [pc, #404]	; (8008574 <HAL_SPI_Init+0x1fc>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d002      	beq.n	80083ea <HAL_SPI_Init+0x72>
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2b08      	cmp	r3, #8
 80083e8:	d811      	bhi.n	800840e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083ee:	4a5f      	ldr	r2, [pc, #380]	; (800856c <HAL_SPI_Init+0x1f4>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d009      	beq.n	8008408 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a5d      	ldr	r2, [pc, #372]	; (8008570 <HAL_SPI_Init+0x1f8>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d004      	beq.n	8008408 <HAL_SPI_Init+0x90>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a5c      	ldr	r2, [pc, #368]	; (8008574 <HAL_SPI_Init+0x1fc>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d104      	bne.n	8008412 <HAL_SPI_Init+0x9a>
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2b10      	cmp	r3, #16
 800840c:	d901      	bls.n	8008412 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e0a7      	b.n	8008562 <HAL_SPI_Init+0x1ea>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d106      	bne.n	800842c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f003 fd6a 	bl	800bf00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2202      	movs	r2, #2
 8008430:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	6812      	ldr	r2, [r2, #0]
 800843c:	6812      	ldr	r2, [r2, #0]
 800843e:	f022 0201 	bic.w	r2, r2, #1
 8008442:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800844c:	d119      	bne.n	8008482 <HAL_SPI_Init+0x10a>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008456:	d103      	bne.n	8008460 <HAL_SPI_Init+0xe8>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845c:	2b00      	cmp	r3, #0
 800845e:	d008      	beq.n	8008472 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10c      	bne.n	8008482 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008470:	d107      	bne.n	8008482 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	6812      	ldr	r2, [r2, #0]
 800847a:	6812      	ldr	r2, [r2, #0]
 800847c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008480:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	69d1      	ldr	r1, [r2, #28]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800848e:	4311      	orrs	r1, r2
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	4311      	orrs	r1, r2
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008498:	4311      	orrs	r1, r2
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	68d2      	ldr	r2, [r2, #12]
 800849e:	430a      	orrs	r2, r1
 80084a0:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80084ae:	4311      	orrs	r1, r2
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084b4:	4311      	orrs	r1, r2
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	6992      	ldr	r2, [r2, #24]
 80084ba:	4311      	orrs	r1, r2
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	6912      	ldr	r2, [r2, #16]
 80084c0:	4311      	orrs	r1, r2
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	6952      	ldr	r2, [r2, #20]
 80084c6:	4311      	orrs	r1, r2
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	6a12      	ldr	r2, [r2, #32]
 80084cc:	4311      	orrs	r1, r2
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	6852      	ldr	r2, [r2, #4]
 80084d2:	4311      	orrs	r1, r2
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80084d8:	4311      	orrs	r1, r2
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	6892      	ldr	r2, [r2, #8]
 80084de:	4311      	orrs	r1, r2
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80084e4:	4311      	orrs	r1, r2
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80084ea:	430a      	orrs	r2, r1
 80084ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d113      	bne.n	800851e <HAL_SPI_Init+0x1a6>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	6812      	ldr	r2, [r2, #0]
 80084fe:	6892      	ldr	r2, [r2, #8]
 8008500:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8008504:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008508:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	6812      	ldr	r2, [r2, #0]
 8008512:	6892      	ldr	r2, [r2, #8]
 8008514:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8008518:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800851c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	6812      	ldr	r2, [r2, #0]
 8008526:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008528:	f022 0201 	bic.w	r2, r2, #1
 800852c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <HAL_SPI_Init+0x1d8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	6812      	ldr	r2, [r2, #0]
 8008542:	68d2      	ldr	r2, [r2, #12]
 8008544:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800854c:	430a      	orrs	r2, r1
 800854e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	40013000 	.word	0x40013000
 8008570:	40003800 	.word	0x40003800
 8008574:	40003c00 	.word	0x40003c00

08008578 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008584:	095b      	lsrs	r3, r3, #5
 8008586:	3301      	adds	r3, #1
 8008588:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	3301      	adds	r3, #1
 8008590:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	3307      	adds	r3, #7
 8008596:	08db      	lsrs	r3, r3, #3
 8008598:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	fb02 f303 	mul.w	r3, r2, r3
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b082      	sub	sp, #8
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e049      	b.n	8008654 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d106      	bne.n	80085da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f003 fead 	bl	800c334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2202      	movs	r2, #2
 80085de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3304      	adds	r3, #4
 80085ea:	4619      	mov	r1, r3
 80085ec:	4610      	mov	r0, r2
 80085ee:	f000 fc2d 	bl	8008e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b01      	cmp	r3, #1
 800866e:	d001      	beq.n	8008674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e04f      	b.n	8008714 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2202      	movs	r2, #2
 8008678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	6812      	ldr	r2, [r2, #0]
 8008684:	68d2      	ldr	r2, [r2, #12]
 8008686:	f042 0201 	orr.w	r2, r2, #1
 800868a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a23      	ldr	r2, [pc, #140]	; (8008720 <HAL_TIM_Base_Start_IT+0xc4>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d01d      	beq.n	80086d2 <HAL_TIM_Base_Start_IT+0x76>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869e:	d018      	beq.n	80086d2 <HAL_TIM_Base_Start_IT+0x76>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1f      	ldr	r2, [pc, #124]	; (8008724 <HAL_TIM_Base_Start_IT+0xc8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d013      	beq.n	80086d2 <HAL_TIM_Base_Start_IT+0x76>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a1e      	ldr	r2, [pc, #120]	; (8008728 <HAL_TIM_Base_Start_IT+0xcc>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d00e      	beq.n	80086d2 <HAL_TIM_Base_Start_IT+0x76>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a1c      	ldr	r2, [pc, #112]	; (800872c <HAL_TIM_Base_Start_IT+0xd0>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d009      	beq.n	80086d2 <HAL_TIM_Base_Start_IT+0x76>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a1b      	ldr	r2, [pc, #108]	; (8008730 <HAL_TIM_Base_Start_IT+0xd4>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d004      	beq.n	80086d2 <HAL_TIM_Base_Start_IT+0x76>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a19      	ldr	r2, [pc, #100]	; (8008734 <HAL_TIM_Base_Start_IT+0xd8>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d115      	bne.n	80086fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689a      	ldr	r2, [r3, #8]
 80086d8:	4b17      	ldr	r3, [pc, #92]	; (8008738 <HAL_TIM_Base_Start_IT+0xdc>)
 80086da:	4013      	ands	r3, r2
 80086dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b06      	cmp	r3, #6
 80086e2:	d015      	beq.n	8008710 <HAL_TIM_Base_Start_IT+0xb4>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ea:	d011      	beq.n	8008710 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	6812      	ldr	r2, [r2, #0]
 80086f4:	6812      	ldr	r2, [r2, #0]
 80086f6:	f042 0201 	orr.w	r2, r2, #1
 80086fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086fc:	e008      	b.n	8008710 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	6812      	ldr	r2, [r2, #0]
 8008706:	6812      	ldr	r2, [r2, #0]
 8008708:	f042 0201 	orr.w	r2, r2, #1
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	e000      	b.n	8008712 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008710:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	40010000 	.word	0x40010000
 8008724:	40000400 	.word	0x40000400
 8008728:	40000800 	.word	0x40000800
 800872c:	40000c00 	.word	0x40000c00
 8008730:	40010400 	.word	0x40010400
 8008734:	40001800 	.word	0x40001800
 8008738:	00010007 	.word	0x00010007

0800873c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e049      	b.n	80087e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	d106      	bne.n	8008768 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f841 	bl	80087ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2202      	movs	r2, #2
 800876c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3304      	adds	r3, #4
 8008778:	4619      	mov	r1, r3
 800877a:	4610      	mov	r0, r2
 800877c:	f000 fb66 	bl	8008e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80087f2:	bf00      	nop
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b082      	sub	sp, #8
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b02      	cmp	r3, #2
 8008812:	d122      	bne.n	800885a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	f003 0302 	and.w	r3, r3, #2
 800881e:	2b02      	cmp	r3, #2
 8008820:	d11b      	bne.n	800885a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f06f 0202 	mvn.w	r2, #2
 800882a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	f003 0303 	and.w	r3, r3, #3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d003      	beq.n	8008848 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fae5 	bl	8008e10 <HAL_TIM_IC_CaptureCallback>
 8008846:	e005      	b.n	8008854 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fad7 	bl	8008dfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fae8 	bl	8008e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b04      	cmp	r3, #4
 8008866:	d122      	bne.n	80088ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	f003 0304 	and.w	r3, r3, #4
 8008872:	2b04      	cmp	r3, #4
 8008874:	d11b      	bne.n	80088ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f06f 0204 	mvn.w	r2, #4
 800887e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2202      	movs	r2, #2
 8008884:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008890:	2b00      	cmp	r3, #0
 8008892:	d003      	beq.n	800889c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fabb 	bl	8008e10 <HAL_TIM_IC_CaptureCallback>
 800889a:	e005      	b.n	80088a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 faad 	bl	8008dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fabe 	bl	8008e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	f003 0308 	and.w	r3, r3, #8
 80088b8:	2b08      	cmp	r3, #8
 80088ba:	d122      	bne.n	8008902 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	f003 0308 	and.w	r3, r3, #8
 80088c6:	2b08      	cmp	r3, #8
 80088c8:	d11b      	bne.n	8008902 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f06f 0208 	mvn.w	r2, #8
 80088d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2204      	movs	r2, #4
 80088d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	f003 0303 	and.w	r3, r3, #3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d003      	beq.n	80088f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fa91 	bl	8008e10 <HAL_TIM_IC_CaptureCallback>
 80088ee:	e005      	b.n	80088fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fa83 	bl	8008dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fa94 	bl	8008e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	f003 0310 	and.w	r3, r3, #16
 800890c:	2b10      	cmp	r3, #16
 800890e:	d122      	bne.n	8008956 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	f003 0310 	and.w	r3, r3, #16
 800891a:	2b10      	cmp	r3, #16
 800891c:	d11b      	bne.n	8008956 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f06f 0210 	mvn.w	r2, #16
 8008926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2208      	movs	r2, #8
 800892c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008938:	2b00      	cmp	r3, #0
 800893a:	d003      	beq.n	8008944 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fa67 	bl	8008e10 <HAL_TIM_IC_CaptureCallback>
 8008942:	e005      	b.n	8008950 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fa59 	bl	8008dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fa6a 	bl	8008e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	2b01      	cmp	r3, #1
 8008962:	d10e      	bne.n	8008982 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b01      	cmp	r3, #1
 8008970:	d107      	bne.n	8008982 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f06f 0201 	mvn.w	r2, #1
 800897a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f002 fe47 	bl	800b610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898c:	2b80      	cmp	r3, #128	; 0x80
 800898e:	d10e      	bne.n	80089ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899a:	2b80      	cmp	r3, #128	; 0x80
 800899c:	d107      	bne.n	80089ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fee7 	bl	800977c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089bc:	d10e      	bne.n	80089dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c8:	2b80      	cmp	r3, #128	; 0x80
 80089ca:	d107      	bne.n	80089dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80089d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 feda 	bl	8009790 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e6:	2b40      	cmp	r3, #64	; 0x40
 80089e8:	d10e      	bne.n	8008a08 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f4:	2b40      	cmp	r3, #64	; 0x40
 80089f6:	d107      	bne.n	8008a08 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fa18 	bl	8008e38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	f003 0320 	and.w	r3, r3, #32
 8008a12:	2b20      	cmp	r3, #32
 8008a14:	d10e      	bne.n	8008a34 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f003 0320 	and.w	r3, r3, #32
 8008a20:	2b20      	cmp	r3, #32
 8008a22:	d107      	bne.n	8008a34 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f06f 0220 	mvn.w	r2, #32
 8008a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fe9a 	bl	8009768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d101      	bne.n	8008a56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008a52:	2302      	movs	r3, #2
 8008a54:	e0fd      	b.n	8008c52 <HAL_TIM_PWM_ConfigChannel+0x216>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b14      	cmp	r3, #20
 8008a62:	f200 80f0 	bhi.w	8008c46 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008a66:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6c:	08008ac1 	.word	0x08008ac1
 8008a70:	08008c47 	.word	0x08008c47
 8008a74:	08008c47 	.word	0x08008c47
 8008a78:	08008c47 	.word	0x08008c47
 8008a7c:	08008b01 	.word	0x08008b01
 8008a80:	08008c47 	.word	0x08008c47
 8008a84:	08008c47 	.word	0x08008c47
 8008a88:	08008c47 	.word	0x08008c47
 8008a8c:	08008b43 	.word	0x08008b43
 8008a90:	08008c47 	.word	0x08008c47
 8008a94:	08008c47 	.word	0x08008c47
 8008a98:	08008c47 	.word	0x08008c47
 8008a9c:	08008b83 	.word	0x08008b83
 8008aa0:	08008c47 	.word	0x08008c47
 8008aa4:	08008c47 	.word	0x08008c47
 8008aa8:	08008c47 	.word	0x08008c47
 8008aac:	08008bc5 	.word	0x08008bc5
 8008ab0:	08008c47 	.word	0x08008c47
 8008ab4:	08008c47 	.word	0x08008c47
 8008ab8:	08008c47 	.word	0x08008c47
 8008abc:	08008c05 	.word	0x08008c05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68b9      	ldr	r1, [r7, #8]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 fa5a 	bl	8008f80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	6812      	ldr	r2, [r2, #0]
 8008ad4:	6992      	ldr	r2, [r2, #24]
 8008ad6:	f042 0208 	orr.w	r2, r2, #8
 8008ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	6812      	ldr	r2, [r2, #0]
 8008ae4:	6992      	ldr	r2, [r2, #24]
 8008ae6:	f022 0204 	bic.w	r2, r2, #4
 8008aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	6812      	ldr	r2, [r2, #0]
 8008af4:	6991      	ldr	r1, [r2, #24]
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	6912      	ldr	r2, [r2, #16]
 8008afa:	430a      	orrs	r2, r1
 8008afc:	619a      	str	r2, [r3, #24]
      break;
 8008afe:	e0a3      	b.n	8008c48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68b9      	ldr	r1, [r7, #8]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 faca 	bl	80090a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	6812      	ldr	r2, [r2, #0]
 8008b14:	6992      	ldr	r2, [r2, #24]
 8008b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	6812      	ldr	r2, [r2, #0]
 8008b24:	6992      	ldr	r2, [r2, #24]
 8008b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	6812      	ldr	r2, [r2, #0]
 8008b34:	6991      	ldr	r1, [r2, #24]
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	6912      	ldr	r2, [r2, #16]
 8008b3a:	0212      	lsls	r2, r2, #8
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	619a      	str	r2, [r3, #24]
      break;
 8008b40:	e082      	b.n	8008c48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68b9      	ldr	r1, [r7, #8]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 fb33 	bl	80091b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	6812      	ldr	r2, [r2, #0]
 8008b56:	69d2      	ldr	r2, [r2, #28]
 8008b58:	f042 0208 	orr.w	r2, r2, #8
 8008b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	6812      	ldr	r2, [r2, #0]
 8008b66:	69d2      	ldr	r2, [r2, #28]
 8008b68:	f022 0204 	bic.w	r2, r2, #4
 8008b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	6812      	ldr	r2, [r2, #0]
 8008b76:	69d1      	ldr	r1, [r2, #28]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	6912      	ldr	r2, [r2, #16]
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	61da      	str	r2, [r3, #28]
      break;
 8008b80:	e062      	b.n	8008c48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68b9      	ldr	r1, [r7, #8]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 fb99 	bl	80092c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	6812      	ldr	r2, [r2, #0]
 8008b96:	69d2      	ldr	r2, [r2, #28]
 8008b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	6812      	ldr	r2, [r2, #0]
 8008ba6:	69d2      	ldr	r2, [r2, #28]
 8008ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	6812      	ldr	r2, [r2, #0]
 8008bb6:	69d1      	ldr	r1, [r2, #28]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	6912      	ldr	r2, [r2, #16]
 8008bbc:	0212      	lsls	r2, r2, #8
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	61da      	str	r2, [r3, #28]
      break;
 8008bc2:	e041      	b.n	8008c48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68b9      	ldr	r1, [r7, #8]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 fbe0 	bl	8009390 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	6812      	ldr	r2, [r2, #0]
 8008bd8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008bda:	f042 0208 	orr.w	r2, r2, #8
 8008bde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	6812      	ldr	r2, [r2, #0]
 8008be8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008bea:	f022 0204 	bic.w	r2, r2, #4
 8008bee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	6812      	ldr	r2, [r2, #0]
 8008bf8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	6912      	ldr	r2, [r2, #16]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008c02:	e021      	b.n	8008c48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68b9      	ldr	r1, [r7, #8]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fc22 	bl	8009454 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	6812      	ldr	r2, [r2, #0]
 8008c18:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	6812      	ldr	r2, [r2, #0]
 8008c28:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	6812      	ldr	r2, [r2, #0]
 8008c38:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	6912      	ldr	r2, [r2, #16]
 8008c3e:	0212      	lsls	r2, r2, #8
 8008c40:	430a      	orrs	r2, r1
 8008c42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008c44:	e000      	b.n	8008c48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008c46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop

08008c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d101      	bne.n	8008c74 <HAL_TIM_ConfigClockSource+0x18>
 8008c70:	2302      	movs	r3, #2
 8008c72:	e0b7      	b.n	8008de4 <HAL_TIM_ConfigClockSource+0x188>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	4b57      	ldr	r3, [pc, #348]	; (8008dec <HAL_TIM_ConfigClockSource+0x190>)
 8008c90:	4013      	ands	r3, r2
 8008c92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2b70      	cmp	r3, #112	; 0x70
 8008caa:	d02e      	beq.n	8008d0a <HAL_TIM_ConfigClockSource+0xae>
 8008cac:	2b70      	cmp	r3, #112	; 0x70
 8008cae:	d812      	bhi.n	8008cd6 <HAL_TIM_ConfigClockSource+0x7a>
 8008cb0:	2b30      	cmp	r3, #48	; 0x30
 8008cb2:	f000 8084 	beq.w	8008dbe <HAL_TIM_ConfigClockSource+0x162>
 8008cb6:	2b30      	cmp	r3, #48	; 0x30
 8008cb8:	d806      	bhi.n	8008cc8 <HAL_TIM_ConfigClockSource+0x6c>
 8008cba:	2b10      	cmp	r3, #16
 8008cbc:	d07f      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x162>
 8008cbe:	2b20      	cmp	r3, #32
 8008cc0:	d07d      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x162>
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d07b      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x162>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008cc6:	e084      	b.n	8008dd2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008cc8:	2b50      	cmp	r3, #80	; 0x50
 8008cca:	d048      	beq.n	8008d5e <HAL_TIM_ConfigClockSource+0x102>
 8008ccc:	2b60      	cmp	r3, #96	; 0x60
 8008cce:	d056      	beq.n	8008d7e <HAL_TIM_ConfigClockSource+0x122>
 8008cd0:	2b40      	cmp	r3, #64	; 0x40
 8008cd2:	d064      	beq.n	8008d9e <HAL_TIM_ConfigClockSource+0x142>
      break;
 8008cd4:	e07d      	b.n	8008dd2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008cd6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008cda:	d070      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x162>
 8008cdc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008ce0:	d809      	bhi.n	8008cf6 <HAL_TIM_ConfigClockSource+0x9a>
 8008ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ce6:	d027      	beq.n	8008d38 <HAL_TIM_ConfigClockSource+0xdc>
 8008ce8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cec:	d067      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x162>
 8008cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cf2:	d06d      	beq.n	8008dd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008cf4:	e06d      	b.n	8008dd2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008cf6:	4a3e      	ldr	r2, [pc, #248]	; (8008df0 <HAL_TIM_ConfigClockSource+0x194>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d060      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x162>
 8008cfc:	4a3d      	ldr	r2, [pc, #244]	; (8008df4 <HAL_TIM_ConfigClockSource+0x198>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d05d      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x162>
 8008d02:	4a3d      	ldr	r2, [pc, #244]	; (8008df8 <HAL_TIM_ConfigClockSource+0x19c>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d05a      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008d08:	e063      	b.n	8008dd2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	6899      	ldr	r1, [r3, #8]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	f000 fc7d 	bl	8009618 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	609a      	str	r2, [r3, #8]
      break;
 8008d36:	e04c      	b.n	8008dd2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6818      	ldr	r0, [r3, #0]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	6899      	ldr	r1, [r3, #8]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f000 fc66 	bl	8009618 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	6812      	ldr	r2, [r2, #0]
 8008d54:	6892      	ldr	r2, [r2, #8]
 8008d56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d5a:	609a      	str	r2, [r3, #8]
      break;
 8008d5c:	e039      	b.n	8008dd2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6818      	ldr	r0, [r3, #0]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	6859      	ldr	r1, [r3, #4]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f000 fbd6 	bl	800951c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2150      	movs	r1, #80	; 0x50
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fc30 	bl	80095dc <TIM_ITRx_SetConfig>
      break;
 8008d7c:	e029      	b.n	8008dd2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6818      	ldr	r0, [r3, #0]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	6859      	ldr	r1, [r3, #4]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f000 fbf5 	bl	800957a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2160      	movs	r1, #96	; 0x60
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 fc20 	bl	80095dc <TIM_ITRx_SetConfig>
      break;
 8008d9c:	e019      	b.n	8008dd2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6818      	ldr	r0, [r3, #0]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	6859      	ldr	r1, [r3, #4]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	461a      	mov	r2, r3
 8008dac:	f000 fbb6 	bl	800951c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2140      	movs	r1, #64	; 0x40
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 fc10 	bl	80095dc <TIM_ITRx_SetConfig>
      break;
 8008dbc:	e009      	b.n	8008dd2 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	4610      	mov	r0, r2
 8008dca:	f000 fc07 	bl	80095dc <TIM_ITRx_SetConfig>
        break;
 8008dce:	e000      	b.n	8008dd2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008dd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	ffceff88 	.word	0xffceff88
 8008df0:	00100030 	.word	0x00100030
 8008df4:	00100040 	.word	0x00100040
 8008df8:	00100020 	.word	0x00100020

08008dfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a40      	ldr	r2, [pc, #256]	; (8008f60 <TIM_Base_SetConfig+0x114>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d013      	beq.n	8008e8c <TIM_Base_SetConfig+0x40>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e6a:	d00f      	beq.n	8008e8c <TIM_Base_SetConfig+0x40>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a3d      	ldr	r2, [pc, #244]	; (8008f64 <TIM_Base_SetConfig+0x118>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d00b      	beq.n	8008e8c <TIM_Base_SetConfig+0x40>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a3c      	ldr	r2, [pc, #240]	; (8008f68 <TIM_Base_SetConfig+0x11c>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d007      	beq.n	8008e8c <TIM_Base_SetConfig+0x40>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a3b      	ldr	r2, [pc, #236]	; (8008f6c <TIM_Base_SetConfig+0x120>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d003      	beq.n	8008e8c <TIM_Base_SetConfig+0x40>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a3a      	ldr	r2, [pc, #232]	; (8008f70 <TIM_Base_SetConfig+0x124>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d108      	bne.n	8008e9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a2f      	ldr	r2, [pc, #188]	; (8008f60 <TIM_Base_SetConfig+0x114>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d01f      	beq.n	8008ee6 <TIM_Base_SetConfig+0x9a>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eac:	d01b      	beq.n	8008ee6 <TIM_Base_SetConfig+0x9a>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a2c      	ldr	r2, [pc, #176]	; (8008f64 <TIM_Base_SetConfig+0x118>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d017      	beq.n	8008ee6 <TIM_Base_SetConfig+0x9a>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a2b      	ldr	r2, [pc, #172]	; (8008f68 <TIM_Base_SetConfig+0x11c>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d013      	beq.n	8008ee6 <TIM_Base_SetConfig+0x9a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a2a      	ldr	r2, [pc, #168]	; (8008f6c <TIM_Base_SetConfig+0x120>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d00f      	beq.n	8008ee6 <TIM_Base_SetConfig+0x9a>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a29      	ldr	r2, [pc, #164]	; (8008f70 <TIM_Base_SetConfig+0x124>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d00b      	beq.n	8008ee6 <TIM_Base_SetConfig+0x9a>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a28      	ldr	r2, [pc, #160]	; (8008f74 <TIM_Base_SetConfig+0x128>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d007      	beq.n	8008ee6 <TIM_Base_SetConfig+0x9a>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a27      	ldr	r2, [pc, #156]	; (8008f78 <TIM_Base_SetConfig+0x12c>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d003      	beq.n	8008ee6 <TIM_Base_SetConfig+0x9a>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a26      	ldr	r2, [pc, #152]	; (8008f7c <TIM_Base_SetConfig+0x130>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d108      	bne.n	8008ef8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	689a      	ldr	r2, [r3, #8]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a10      	ldr	r2, [pc, #64]	; (8008f60 <TIM_Base_SetConfig+0x114>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d00f      	beq.n	8008f44 <TIM_Base_SetConfig+0xf8>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a12      	ldr	r2, [pc, #72]	; (8008f70 <TIM_Base_SetConfig+0x124>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d00b      	beq.n	8008f44 <TIM_Base_SetConfig+0xf8>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a11      	ldr	r2, [pc, #68]	; (8008f74 <TIM_Base_SetConfig+0x128>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d007      	beq.n	8008f44 <TIM_Base_SetConfig+0xf8>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a10      	ldr	r2, [pc, #64]	; (8008f78 <TIM_Base_SetConfig+0x12c>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d003      	beq.n	8008f44 <TIM_Base_SetConfig+0xf8>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a0f      	ldr	r2, [pc, #60]	; (8008f7c <TIM_Base_SetConfig+0x130>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d103      	bne.n	8008f4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	691a      	ldr	r2, [r3, #16]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	615a      	str	r2, [r3, #20]
}
 8008f52:	bf00      	nop
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	40010000 	.word	0x40010000
 8008f64:	40000400 	.word	0x40000400
 8008f68:	40000800 	.word	0x40000800
 8008f6c:	40000c00 	.word	0x40000c00
 8008f70:	40010400 	.word	0x40010400
 8008f74:	40014000 	.word	0x40014000
 8008f78:	40014400 	.word	0x40014400
 8008f7c:	40014800 	.word	0x40014800

08008f80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b087      	sub	sp, #28
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	f023 0201 	bic.w	r2, r3, #1
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	4b37      	ldr	r3, [pc, #220]	; (8009088 <TIM_OC1_SetConfig+0x108>)
 8008fac:	4013      	ands	r3, r2
 8008fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f023 0303 	bic.w	r3, r3, #3
 8008fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f023 0302 	bic.w	r3, r3, #2
 8008fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a2d      	ldr	r2, [pc, #180]	; (800908c <TIM_OC1_SetConfig+0x10c>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d00f      	beq.n	8008ffc <TIM_OC1_SetConfig+0x7c>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a2c      	ldr	r2, [pc, #176]	; (8009090 <TIM_OC1_SetConfig+0x110>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d00b      	beq.n	8008ffc <TIM_OC1_SetConfig+0x7c>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a2b      	ldr	r2, [pc, #172]	; (8009094 <TIM_OC1_SetConfig+0x114>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d007      	beq.n	8008ffc <TIM_OC1_SetConfig+0x7c>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a2a      	ldr	r2, [pc, #168]	; (8009098 <TIM_OC1_SetConfig+0x118>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d003      	beq.n	8008ffc <TIM_OC1_SetConfig+0x7c>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a29      	ldr	r2, [pc, #164]	; (800909c <TIM_OC1_SetConfig+0x11c>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d10c      	bne.n	8009016 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	f023 0308 	bic.w	r3, r3, #8
 8009002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	4313      	orrs	r3, r2
 800900c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f023 0304 	bic.w	r3, r3, #4
 8009014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a1c      	ldr	r2, [pc, #112]	; (800908c <TIM_OC1_SetConfig+0x10c>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d00f      	beq.n	800903e <TIM_OC1_SetConfig+0xbe>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a1b      	ldr	r2, [pc, #108]	; (8009090 <TIM_OC1_SetConfig+0x110>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d00b      	beq.n	800903e <TIM_OC1_SetConfig+0xbe>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a1a      	ldr	r2, [pc, #104]	; (8009094 <TIM_OC1_SetConfig+0x114>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d007      	beq.n	800903e <TIM_OC1_SetConfig+0xbe>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a19      	ldr	r2, [pc, #100]	; (8009098 <TIM_OC1_SetConfig+0x118>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d003      	beq.n	800903e <TIM_OC1_SetConfig+0xbe>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a18      	ldr	r2, [pc, #96]	; (800909c <TIM_OC1_SetConfig+0x11c>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d111      	bne.n	8009062 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800904c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	4313      	orrs	r3, r2
 8009056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	4313      	orrs	r3, r2
 8009060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	621a      	str	r2, [r3, #32]
}
 800907c:	bf00      	nop
 800907e:	371c      	adds	r7, #28
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	fffeff8f 	.word	0xfffeff8f
 800908c:	40010000 	.word	0x40010000
 8009090:	40010400 	.word	0x40010400
 8009094:	40014000 	.word	0x40014000
 8009098:	40014400 	.word	0x40014400
 800909c:	40014800 	.word	0x40014800

080090a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	f023 0210 	bic.w	r2, r3, #16
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	4b34      	ldr	r3, [pc, #208]	; (800919c <TIM_OC2_SetConfig+0xfc>)
 80090cc:	4013      	ands	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	021b      	lsls	r3, r3, #8
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	f023 0320 	bic.w	r3, r3, #32
 80090ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	011b      	lsls	r3, r3, #4
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a29      	ldr	r2, [pc, #164]	; (80091a0 <TIM_OC2_SetConfig+0x100>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d003      	beq.n	8009108 <TIM_OC2_SetConfig+0x68>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a28      	ldr	r2, [pc, #160]	; (80091a4 <TIM_OC2_SetConfig+0x104>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d10d      	bne.n	8009124 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800910e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	011b      	lsls	r3, r3, #4
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	4313      	orrs	r3, r2
 800911a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009122:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a1e      	ldr	r2, [pc, #120]	; (80091a0 <TIM_OC2_SetConfig+0x100>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d00f      	beq.n	800914c <TIM_OC2_SetConfig+0xac>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a1d      	ldr	r2, [pc, #116]	; (80091a4 <TIM_OC2_SetConfig+0x104>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d00b      	beq.n	800914c <TIM_OC2_SetConfig+0xac>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a1c      	ldr	r2, [pc, #112]	; (80091a8 <TIM_OC2_SetConfig+0x108>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d007      	beq.n	800914c <TIM_OC2_SetConfig+0xac>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a1b      	ldr	r2, [pc, #108]	; (80091ac <TIM_OC2_SetConfig+0x10c>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d003      	beq.n	800914c <TIM_OC2_SetConfig+0xac>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a1a      	ldr	r2, [pc, #104]	; (80091b0 <TIM_OC2_SetConfig+0x110>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d113      	bne.n	8009174 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800915a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	4313      	orrs	r3, r2
 8009166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	4313      	orrs	r3, r2
 8009172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	685a      	ldr	r2, [r3, #4]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	621a      	str	r2, [r3, #32]
}
 800918e:	bf00      	nop
 8009190:	371c      	adds	r7, #28
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	feff8fff 	.word	0xfeff8fff
 80091a0:	40010000 	.word	0x40010000
 80091a4:	40010400 	.word	0x40010400
 80091a8:	40014000 	.word	0x40014000
 80091ac:	40014400 	.word	0x40014400
 80091b0:	40014800 	.word	0x40014800

080091b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f023 0303 	bic.w	r3, r3, #3
 80091ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	4313      	orrs	r3, r2
 8009208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a27      	ldr	r2, [pc, #156]	; (80092ac <TIM_OC3_SetConfig+0xf8>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d003      	beq.n	800921a <TIM_OC3_SetConfig+0x66>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a26      	ldr	r2, [pc, #152]	; (80092b0 <TIM_OC3_SetConfig+0xfc>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d10d      	bne.n	8009236 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	021b      	lsls	r3, r3, #8
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	4313      	orrs	r3, r2
 800922c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a1c      	ldr	r2, [pc, #112]	; (80092ac <TIM_OC3_SetConfig+0xf8>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d00f      	beq.n	800925e <TIM_OC3_SetConfig+0xaa>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a1b      	ldr	r2, [pc, #108]	; (80092b0 <TIM_OC3_SetConfig+0xfc>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d00b      	beq.n	800925e <TIM_OC3_SetConfig+0xaa>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a1a      	ldr	r2, [pc, #104]	; (80092b4 <TIM_OC3_SetConfig+0x100>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d007      	beq.n	800925e <TIM_OC3_SetConfig+0xaa>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a19      	ldr	r2, [pc, #100]	; (80092b8 <TIM_OC3_SetConfig+0x104>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d003      	beq.n	800925e <TIM_OC3_SetConfig+0xaa>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a18      	ldr	r2, [pc, #96]	; (80092bc <TIM_OC3_SetConfig+0x108>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d113      	bne.n	8009286 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800926c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	011b      	lsls	r3, r3, #4
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	4313      	orrs	r3, r2
 8009278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	4313      	orrs	r3, r2
 8009284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	685a      	ldr	r2, [r3, #4]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	621a      	str	r2, [r3, #32]
}
 80092a0:	bf00      	nop
 80092a2:	371c      	adds	r7, #28
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	40010000 	.word	0x40010000
 80092b0:	40010400 	.word	0x40010400
 80092b4:	40014000 	.word	0x40014000
 80092b8:	40014400 	.word	0x40014400
 80092bc:	40014800 	.word	0x40014800

080092c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	021b      	lsls	r3, r3, #8
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	4313      	orrs	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800930a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	031b      	lsls	r3, r3, #12
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	4313      	orrs	r3, r2
 8009316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a18      	ldr	r2, [pc, #96]	; (800937c <TIM_OC4_SetConfig+0xbc>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d00f      	beq.n	8009340 <TIM_OC4_SetConfig+0x80>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a17      	ldr	r2, [pc, #92]	; (8009380 <TIM_OC4_SetConfig+0xc0>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d00b      	beq.n	8009340 <TIM_OC4_SetConfig+0x80>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a16      	ldr	r2, [pc, #88]	; (8009384 <TIM_OC4_SetConfig+0xc4>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d007      	beq.n	8009340 <TIM_OC4_SetConfig+0x80>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a15      	ldr	r2, [pc, #84]	; (8009388 <TIM_OC4_SetConfig+0xc8>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d003      	beq.n	8009340 <TIM_OC4_SetConfig+0x80>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a14      	ldr	r2, [pc, #80]	; (800938c <TIM_OC4_SetConfig+0xcc>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d109      	bne.n	8009354 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	695b      	ldr	r3, [r3, #20]
 800934c:	019b      	lsls	r3, r3, #6
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	4313      	orrs	r3, r2
 8009352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	685a      	ldr	r2, [r3, #4]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	621a      	str	r2, [r3, #32]
}
 800936e:	bf00      	nop
 8009370:	371c      	adds	r7, #28
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	40010000 	.word	0x40010000
 8009380:	40010400 	.word	0x40010400
 8009384:	40014000 	.word	0x40014000
 8009388:	40014400 	.word	0x40014400
 800938c:	40014800 	.word	0x40014800

08009390 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009390:	b480      	push	{r7}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80093d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	041b      	lsls	r3, r3, #16
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	4313      	orrs	r3, r2
 80093dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a17      	ldr	r2, [pc, #92]	; (8009440 <TIM_OC5_SetConfig+0xb0>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d00f      	beq.n	8009406 <TIM_OC5_SetConfig+0x76>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a16      	ldr	r2, [pc, #88]	; (8009444 <TIM_OC5_SetConfig+0xb4>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d00b      	beq.n	8009406 <TIM_OC5_SetConfig+0x76>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a15      	ldr	r2, [pc, #84]	; (8009448 <TIM_OC5_SetConfig+0xb8>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d007      	beq.n	8009406 <TIM_OC5_SetConfig+0x76>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a14      	ldr	r2, [pc, #80]	; (800944c <TIM_OC5_SetConfig+0xbc>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d003      	beq.n	8009406 <TIM_OC5_SetConfig+0x76>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a13      	ldr	r2, [pc, #76]	; (8009450 <TIM_OC5_SetConfig+0xc0>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d109      	bne.n	800941a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800940c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	021b      	lsls	r3, r3, #8
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	4313      	orrs	r3, r2
 8009418:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	685a      	ldr	r2, [r3, #4]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	621a      	str	r2, [r3, #32]
}
 8009434:	bf00      	nop
 8009436:	371c      	adds	r7, #28
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	40010000 	.word	0x40010000
 8009444:	40010400 	.word	0x40010400
 8009448:	40014000 	.word	0x40014000
 800944c:	40014400 	.word	0x40014400
 8009450:	40014800 	.word	0x40014800

08009454 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009454:	b480      	push	{r7}
 8009456:	b087      	sub	sp, #28
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800947a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	021b      	lsls	r3, r3, #8
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	4313      	orrs	r3, r2
 800948e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	051b      	lsls	r3, r3, #20
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a18      	ldr	r2, [pc, #96]	; (8009508 <TIM_OC6_SetConfig+0xb4>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d00f      	beq.n	80094cc <TIM_OC6_SetConfig+0x78>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a17      	ldr	r2, [pc, #92]	; (800950c <TIM_OC6_SetConfig+0xb8>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d00b      	beq.n	80094cc <TIM_OC6_SetConfig+0x78>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a16      	ldr	r2, [pc, #88]	; (8009510 <TIM_OC6_SetConfig+0xbc>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d007      	beq.n	80094cc <TIM_OC6_SetConfig+0x78>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a15      	ldr	r2, [pc, #84]	; (8009514 <TIM_OC6_SetConfig+0xc0>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d003      	beq.n	80094cc <TIM_OC6_SetConfig+0x78>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a14      	ldr	r2, [pc, #80]	; (8009518 <TIM_OC6_SetConfig+0xc4>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d109      	bne.n	80094e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80094d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	029b      	lsls	r3, r3, #10
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	4313      	orrs	r3, r2
 80094de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	621a      	str	r2, [r3, #32]
}
 80094fa:	bf00      	nop
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	40010000 	.word	0x40010000
 800950c:	40010400 	.word	0x40010400
 8009510:	40014000 	.word	0x40014000
 8009514:	40014400 	.word	0x40014400
 8009518:	40014800 	.word	0x40014800

0800951c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800951c:	b480      	push	{r7}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	f023 0201 	bic.w	r2, r3, #1
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	011b      	lsls	r3, r3, #4
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	4313      	orrs	r3, r2
 8009550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	f023 030a 	bic.w	r3, r3, #10
 8009558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	4313      	orrs	r3, r2
 8009560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	621a      	str	r2, [r3, #32]
}
 800956e:	bf00      	nop
 8009570:	371c      	adds	r7, #28
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800957a:	b480      	push	{r7}
 800957c:	b087      	sub	sp, #28
 800957e:	af00      	add	r7, sp, #0
 8009580:	60f8      	str	r0, [r7, #12]
 8009582:	60b9      	str	r1, [r7, #8]
 8009584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	f023 0210 	bic.w	r2, r3, #16
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6a1b      	ldr	r3, [r3, #32]
 800959c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	031b      	lsls	r3, r3, #12
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	4313      	orrs	r3, r2
 80095ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80095b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	011b      	lsls	r3, r3, #4
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	4313      	orrs	r3, r2
 80095c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	693a      	ldr	r2, [r7, #16]
 80095cc:	621a      	str	r2, [r3, #32]
}
 80095ce:	bf00      	nop
 80095d0:	371c      	adds	r7, #28
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
	...

080095dc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	4b09      	ldr	r3, [pc, #36]	; (8009614 <TIM_ITRx_SetConfig+0x38>)
 80095f0:	4013      	ands	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	f043 0307 	orr.w	r3, r3, #7
 80095fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	609a      	str	r2, [r3, #8]
}
 8009606:	bf00      	nop
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	ffcfff8f 	.word	0xffcfff8f

08009618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009618:	b480      	push	{r7}
 800961a:	b087      	sub	sp, #28
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	021a      	lsls	r2, r3, #8
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	431a      	orrs	r2, r3
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	4313      	orrs	r3, r2
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	4313      	orrs	r3, r2
 8009644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	609a      	str	r2, [r3, #8]
}
 800964c:	bf00      	nop
 800964e:	371c      	adds	r7, #28
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009668:	2b01      	cmp	r3, #1
 800966a:	d101      	bne.n	8009670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800966c:	2302      	movs	r3, #2
 800966e:	e068      	b.n	8009742 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2202      	movs	r2, #2
 800967c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a2e      	ldr	r2, [pc, #184]	; (8009750 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d004      	beq.n	80096a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a2d      	ldr	r2, [pc, #180]	; (8009754 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d108      	bne.n	80096b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80096aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a1e      	ldr	r2, [pc, #120]	; (8009750 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d01d      	beq.n	8009716 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096e2:	d018      	beq.n	8009716 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a1b      	ldr	r2, [pc, #108]	; (8009758 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d013      	beq.n	8009716 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a1a      	ldr	r2, [pc, #104]	; (800975c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d00e      	beq.n	8009716 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a18      	ldr	r2, [pc, #96]	; (8009760 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d009      	beq.n	8009716 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a13      	ldr	r2, [pc, #76]	; (8009754 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d004      	beq.n	8009716 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a14      	ldr	r2, [pc, #80]	; (8009764 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d10c      	bne.n	8009730 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800971c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	4313      	orrs	r3, r2
 8009726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68ba      	ldr	r2, [r7, #8]
 800972e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	40010000 	.word	0x40010000
 8009754:	40010400 	.word	0x40010400
 8009758:	40000400 	.word	0x40000400
 800975c:	40000800 	.word	0x40000800
 8009760:	40000c00 	.word	0x40000c00
 8009764:	40001800 	.word	0x40001800

08009768 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d101      	bne.n	80097b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e042      	b.n	800983c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d106      	bne.n	80097ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f002 fe5d 	bl	800c488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2224      	movs	r2, #36	; 0x24
 80097d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	6812      	ldr	r2, [r2, #0]
 80097de:	6812      	ldr	r2, [r2, #0]
 80097e0:	f022 0201 	bic.w	r2, r2, #1
 80097e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fb08 	bl	8009dfc <UART_SetConfig>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d101      	bne.n	80097f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e022      	b.n	800983c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d002      	beq.n	8009804 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f001 f89c 	bl	800a93c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	6812      	ldr	r2, [r2, #0]
 800980c:	6852      	ldr	r2, [r2, #4]
 800980e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009812:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	6812      	ldr	r2, [r2, #0]
 800981c:	6892      	ldr	r2, [r2, #8]
 800981e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009822:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	6812      	ldr	r2, [r2, #0]
 800982c:	6812      	ldr	r2, [r2, #0]
 800982e:	f042 0201 	orr.w	r2, r2, #1
 8009832:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f001 f923 	bl	800aa80 <UART_CheckIdleState>
 800983a:	4603      	mov	r3, r0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b088      	sub	sp, #32
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009864:	69fa      	ldr	r2, [r7, #28]
 8009866:	f640 030f 	movw	r3, #2063	; 0x80f
 800986a:	4013      	ands	r3, r2
 800986c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d118      	bne.n	80098a6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	f003 0320 	and.w	r3, r3, #32
 800987a:	2b00      	cmp	r3, #0
 800987c:	d013      	beq.n	80098a6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	f003 0320 	and.w	r3, r3, #32
 8009884:	2b00      	cmp	r3, #0
 8009886:	d104      	bne.n	8009892 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d009      	beq.n	80098a6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009896:	2b00      	cmp	r3, #0
 8009898:	f000 8283 	beq.w	8009da2 <HAL_UART_IRQHandler+0x55e>
      {
        huart->RxISR(huart);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	4798      	blx	r3
      }
      return;
 80098a4:	e27d      	b.n	8009da2 <HAL_UART_IRQHandler+0x55e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 80ef 	beq.w	8009a8c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	4b73      	ldr	r3, [pc, #460]	; (8009a80 <HAL_UART_IRQHandler+0x23c>)
 80098b2:	4013      	ands	r3, r2
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d105      	bne.n	80098c4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80098b8:	69ba      	ldr	r2, [r7, #24]
 80098ba:	4b72      	ldr	r3, [pc, #456]	; (8009a84 <HAL_UART_IRQHandler+0x240>)
 80098bc:	4013      	ands	r3, r2
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f000 80e4 	beq.w	8009a8c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d010      	beq.n	80098f0 <HAL_UART_IRQHandler+0xac>
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00b      	beq.n	80098f0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2201      	movs	r2, #1
 80098de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098e6:	f043 0201 	orr.w	r2, r3, #1
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d010      	beq.n	800991c <HAL_UART_IRQHandler+0xd8>
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00b      	beq.n	800991c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2202      	movs	r2, #2
 800990a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009912:	f043 0204 	orr.w	r2, r3, #4
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	f003 0304 	and.w	r3, r3, #4
 8009922:	2b00      	cmp	r3, #0
 8009924:	d010      	beq.n	8009948 <HAL_UART_IRQHandler+0x104>
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f003 0301 	and.w	r3, r3, #1
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00b      	beq.n	8009948 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2204      	movs	r2, #4
 8009936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800993e:	f043 0202 	orr.w	r2, r3, #2
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	f003 0308 	and.w	r3, r3, #8
 800994e:	2b00      	cmp	r3, #0
 8009950:	d015      	beq.n	800997e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	f003 0320 	and.w	r3, r3, #32
 8009958:	2b00      	cmp	r3, #0
 800995a:	d104      	bne.n	8009966 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	4b48      	ldr	r3, [pc, #288]	; (8009a80 <HAL_UART_IRQHandler+0x23c>)
 8009960:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00b      	beq.n	800997e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2208      	movs	r2, #8
 800996c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009974:	f043 0208 	orr.w	r2, r3, #8
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009984:	2b00      	cmp	r3, #0
 8009986:	d011      	beq.n	80099ac <HAL_UART_IRQHandler+0x168>
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00c      	beq.n	80099ac <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800999a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099a2:	f043 0220 	orr.w	r2, r3, #32
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f000 81f7 	beq.w	8009da6 <HAL_UART_IRQHandler+0x562>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	f003 0320 	and.w	r3, r3, #32
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d011      	beq.n	80099e6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	f003 0320 	and.w	r3, r3, #32
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d104      	bne.n	80099d6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d007      	beq.n	80099e6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099ec:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f8:	2b40      	cmp	r3, #64	; 0x40
 80099fa:	d004      	beq.n	8009a06 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d031      	beq.n	8009a6a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f001 f906 	bl	800ac18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a16:	2b40      	cmp	r3, #64	; 0x40
 8009a18:	d123      	bne.n	8009a62 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	6812      	ldr	r2, [r2, #0]
 8009a22:	6892      	ldr	r2, [r2, #8]
 8009a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a28:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d013      	beq.n	8009a5a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a36:	4a14      	ldr	r2, [pc, #80]	; (8009a88 <HAL_UART_IRQHandler+0x244>)
 8009a38:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7f9 fcc0 	bl	80033c4 <HAL_DMA_Abort_IT>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d017      	beq.n	8009a7a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009a54:	4610      	mov	r0, r2
 8009a56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a58:	e00f      	b.n	8009a7a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f9b8 	bl	8009dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a60:	e00b      	b.n	8009a7a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f9b4 	bl	8009dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a68:	e007      	b.n	8009a7a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f9b0 	bl	8009dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009a78:	e195      	b.n	8009da6 <HAL_UART_IRQHandler+0x562>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a7a:	bf00      	nop
    return;
 8009a7c:	e193      	b.n	8009da6 <HAL_UART_IRQHandler+0x562>
 8009a7e:	bf00      	nop
 8009a80:	10000001 	.word	0x10000001
 8009a84:	04000120 	.word	0x04000120
 8009a88:	0800ac7d 	.word	0x0800ac7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	f040 810f 	bne.w	8009cb4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	f003 0310 	and.w	r3, r3, #16
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 8109 	beq.w	8009cb4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	f003 0310 	and.w	r3, r3, #16
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f000 8103 	beq.w	8009cb4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2210      	movs	r2, #16
 8009ab4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac0:	2b40      	cmp	r3, #64	; 0x40
 8009ac2:	f040 80bb 	bne.w	8009c3c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a96      	ldr	r2, [pc, #600]	; (8009d28 <HAL_UART_IRQHandler+0x4e4>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d059      	beq.n	8009b86 <HAL_UART_IRQHandler+0x342>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a94      	ldr	r2, [pc, #592]	; (8009d2c <HAL_UART_IRQHandler+0x4e8>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d053      	beq.n	8009b86 <HAL_UART_IRQHandler+0x342>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a92      	ldr	r2, [pc, #584]	; (8009d30 <HAL_UART_IRQHandler+0x4ec>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d04d      	beq.n	8009b86 <HAL_UART_IRQHandler+0x342>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a90      	ldr	r2, [pc, #576]	; (8009d34 <HAL_UART_IRQHandler+0x4f0>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d047      	beq.n	8009b86 <HAL_UART_IRQHandler+0x342>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a8e      	ldr	r2, [pc, #568]	; (8009d38 <HAL_UART_IRQHandler+0x4f4>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d041      	beq.n	8009b86 <HAL_UART_IRQHandler+0x342>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a8c      	ldr	r2, [pc, #560]	; (8009d3c <HAL_UART_IRQHandler+0x4f8>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d03b      	beq.n	8009b86 <HAL_UART_IRQHandler+0x342>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a8a      	ldr	r2, [pc, #552]	; (8009d40 <HAL_UART_IRQHandler+0x4fc>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d035      	beq.n	8009b86 <HAL_UART_IRQHandler+0x342>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a88      	ldr	r2, [pc, #544]	; (8009d44 <HAL_UART_IRQHandler+0x500>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d02f      	beq.n	8009b86 <HAL_UART_IRQHandler+0x342>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a86      	ldr	r2, [pc, #536]	; (8009d48 <HAL_UART_IRQHandler+0x504>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d029      	beq.n	8009b86 <HAL_UART_IRQHandler+0x342>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a84      	ldr	r2, [pc, #528]	; (8009d4c <HAL_UART_IRQHandler+0x508>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d023      	beq.n	8009b86 <HAL_UART_IRQHandler+0x342>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a82      	ldr	r2, [pc, #520]	; (8009d50 <HAL_UART_IRQHandler+0x50c>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d01d      	beq.n	8009b86 <HAL_UART_IRQHandler+0x342>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a80      	ldr	r2, [pc, #512]	; (8009d54 <HAL_UART_IRQHandler+0x510>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d017      	beq.n	8009b86 <HAL_UART_IRQHandler+0x342>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a7e      	ldr	r2, [pc, #504]	; (8009d58 <HAL_UART_IRQHandler+0x514>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d011      	beq.n	8009b86 <HAL_UART_IRQHandler+0x342>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a7c      	ldr	r2, [pc, #496]	; (8009d5c <HAL_UART_IRQHandler+0x518>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d00b      	beq.n	8009b86 <HAL_UART_IRQHandler+0x342>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a7a      	ldr	r2, [pc, #488]	; (8009d60 <HAL_UART_IRQHandler+0x51c>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d005      	beq.n	8009b86 <HAL_UART_IRQHandler+0x342>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a78      	ldr	r2, [pc, #480]	; (8009d64 <HAL_UART_IRQHandler+0x520>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d105      	bne.n	8009b92 <HAL_UART_IRQHandler+0x34e>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	e004      	b.n	8009b9c <HAL_UART_IRQHandler+0x358>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	817b      	strh	r3, [r7, #10]
      if ((nb_remaining_rx_data > 0U)
 8009b9e:	897b      	ldrh	r3, [r7, #10]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f000 8102 	beq.w	8009daa <HAL_UART_IRQHandler+0x566>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bac:	897a      	ldrh	r2, [r7, #10]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	f080 80fb 	bcs.w	8009daa <HAL_UART_IRQHandler+0x566>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	897a      	ldrh	r2, [r7, #10]
 8009bb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bc0:	69db      	ldr	r3, [r3, #28]
 8009bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bc6:	d02b      	beq.n	8009c20 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	6812      	ldr	r2, [r2, #0]
 8009bd0:	6812      	ldr	r2, [r2, #0]
 8009bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bd6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	6812      	ldr	r2, [r2, #0]
 8009be0:	6892      	ldr	r2, [r2, #8]
 8009be2:	f022 0201 	bic.w	r2, r2, #1
 8009be6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	6812      	ldr	r2, [r2, #0]
 8009bf0:	6892      	ldr	r2, [r2, #8]
 8009bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bf6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2220      	movs	r2, #32
 8009bfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	6812      	ldr	r2, [r2, #0]
 8009c0e:	6812      	ldr	r2, [r2, #0]
 8009c10:	f022 0210 	bic.w	r2, r2, #16
 8009c14:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7f9 f8b4 	bl	8002d88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	4619      	mov	r1, r3
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f8d5 	bl	8009de4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c3a:	e0b6      	b.n	8009daa <HAL_UART_IRQHandler+0x566>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	813b      	strh	r3, [r7, #8]
      if ((huart->RxXferCount > 0U)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 80a9 	beq.w	8009dae <HAL_UART_IRQHandler+0x56a>
          && (nb_rx_data > 0U))
 8009c5c:	893b      	ldrh	r3, [r7, #8]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 80a5 	beq.w	8009dae <HAL_UART_IRQHandler+0x56a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	6812      	ldr	r2, [r2, #0]
 8009c6c:	6812      	ldr	r2, [r2, #0]
 8009c6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009c72:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6899      	ldr	r1, [r3, #8]
 8009c7e:	4b3a      	ldr	r3, [pc, #232]	; (8009d68 <HAL_UART_IRQHandler+0x524>)
 8009c80:	400b      	ands	r3, r1
 8009c82:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2220      	movs	r2, #32
 8009c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	6812      	ldr	r2, [r2, #0]
 8009ca0:	6812      	ldr	r2, [r2, #0]
 8009ca2:	f022 0210 	bic.w	r2, r2, #16
 8009ca6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ca8:	893b      	ldrh	r3, [r7, #8]
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f899 	bl	8009de4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009cb2:	e07c      	b.n	8009dae <HAL_UART_IRQHandler+0x56a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00d      	beq.n	8009cda <HAL_UART_IRQHandler+0x496>
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d008      	beq.n	8009cda <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009cd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f001 f802 	bl	800acdc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cd8:	e06c      	b.n	8009db4 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d012      	beq.n	8009d0a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d104      	bne.n	8009cf8 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d008      	beq.n	8009d0a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d058      	beq.n	8009db2 <HAL_UART_IRQHandler+0x56e>
    {
      huart->TxISR(huart);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	4798      	blx	r3
    }
    return;
 8009d08:	e053      	b.n	8009db2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d02b      	beq.n	8009d6c <HAL_UART_IRQHandler+0x528>
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d026      	beq.n	8009d6c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 ffc2 	bl	800aca8 <UART_EndTransmit_IT>
    return;
 8009d24:	e046      	b.n	8009db4 <HAL_UART_IRQHandler+0x570>
 8009d26:	bf00      	nop
 8009d28:	40020010 	.word	0x40020010
 8009d2c:	40020028 	.word	0x40020028
 8009d30:	40020040 	.word	0x40020040
 8009d34:	40020058 	.word	0x40020058
 8009d38:	40020070 	.word	0x40020070
 8009d3c:	40020088 	.word	0x40020088
 8009d40:	400200a0 	.word	0x400200a0
 8009d44:	400200b8 	.word	0x400200b8
 8009d48:	40020410 	.word	0x40020410
 8009d4c:	40020428 	.word	0x40020428
 8009d50:	40020440 	.word	0x40020440
 8009d54:	40020458 	.word	0x40020458
 8009d58:	40020470 	.word	0x40020470
 8009d5c:	40020488 	.word	0x40020488
 8009d60:	400204a0 	.word	0x400204a0
 8009d64:	400204b8 	.word	0x400204b8
 8009d68:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d008      	beq.n	8009d88 <HAL_UART_IRQHandler+0x544>
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d003      	beq.n	8009d88 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 ffbf 	bl	800ad04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d86:	e015      	b.n	8009db4 <HAL_UART_IRQHandler+0x570>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d010      	beq.n	8009db4 <HAL_UART_IRQHandler+0x570>
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	da0d      	bge.n	8009db4 <HAL_UART_IRQHandler+0x570>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 ffa9 	bl	800acf0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d9e:	bf00      	nop
 8009da0:	e008      	b.n	8009db4 <HAL_UART_IRQHandler+0x570>
      return;
 8009da2:	bf00      	nop
 8009da4:	e006      	b.n	8009db4 <HAL_UART_IRQHandler+0x570>
    return;
 8009da6:	bf00      	nop
 8009da8:	e004      	b.n	8009db4 <HAL_UART_IRQHandler+0x570>
      return;
 8009daa:	bf00      	nop
 8009dac:	e002      	b.n	8009db4 <HAL_UART_IRQHandler+0x570>
      return;
 8009dae:	bf00      	nop
 8009db0:	e000      	b.n	8009db4 <HAL_UART_IRQHandler+0x570>
    return;
 8009db2:	bf00      	nop
  }
}
 8009db4:	3720      	adds	r7, #32
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop

08009dbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009dc4:	bf00      	nop
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009dd8:	bf00      	nop
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	460b      	mov	r3, r1
 8009dee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009dfc:	b5b0      	push	{r4, r5, r7, lr}
 8009dfe:	b08e      	sub	sp, #56	; 0x38
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	689a      	ldr	r2, [r3, #8]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	695b      	ldr	r3, [r3, #20]
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	69db      	ldr	r3, [r3, #28]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6819      	ldr	r1, [r3, #0]
 8009e2c:	4bc2      	ldr	r3, [pc, #776]	; (800a138 <UART_SetConfig+0x33c>)
 8009e2e:	400b      	ands	r3, r1
 8009e30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e32:	430b      	orrs	r3, r1
 8009e34:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	6812      	ldr	r2, [r2, #0]
 8009e3e:	6852      	ldr	r2, [r2, #4]
 8009e40:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	68d2      	ldr	r2, [r2, #12]
 8009e48:	430a      	orrs	r2, r1
 8009e4a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4ab9      	ldr	r2, [pc, #740]	; (800a13c <UART_SetConfig+0x340>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d004      	beq.n	8009e66 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a1b      	ldr	r3, [r3, #32]
 8009e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e62:	4313      	orrs	r3, r2
 8009e64:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6899      	ldr	r1, [r3, #8]
 8009e70:	4bb3      	ldr	r3, [pc, #716]	; (800a140 <UART_SetConfig+0x344>)
 8009e72:	400b      	ands	r3, r1
 8009e74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e76:	430b      	orrs	r3, r1
 8009e78:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	6812      	ldr	r2, [r2, #0]
 8009e82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009e84:	f022 010f 	bic.w	r1, r2, #15
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4aab      	ldr	r2, [pc, #684]	; (800a144 <UART_SetConfig+0x348>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d177      	bne.n	8009f8a <UART_SetConfig+0x18e>
 8009e9a:	4bab      	ldr	r3, [pc, #684]	; (800a148 <UART_SetConfig+0x34c>)
 8009e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ea2:	2b28      	cmp	r3, #40	; 0x28
 8009ea4:	d86c      	bhi.n	8009f80 <UART_SetConfig+0x184>
 8009ea6:	a201      	add	r2, pc, #4	; (adr r2, 8009eac <UART_SetConfig+0xb0>)
 8009ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eac:	08009f51 	.word	0x08009f51
 8009eb0:	08009f81 	.word	0x08009f81
 8009eb4:	08009f81 	.word	0x08009f81
 8009eb8:	08009f81 	.word	0x08009f81
 8009ebc:	08009f81 	.word	0x08009f81
 8009ec0:	08009f81 	.word	0x08009f81
 8009ec4:	08009f81 	.word	0x08009f81
 8009ec8:	08009f81 	.word	0x08009f81
 8009ecc:	08009f59 	.word	0x08009f59
 8009ed0:	08009f81 	.word	0x08009f81
 8009ed4:	08009f81 	.word	0x08009f81
 8009ed8:	08009f81 	.word	0x08009f81
 8009edc:	08009f81 	.word	0x08009f81
 8009ee0:	08009f81 	.word	0x08009f81
 8009ee4:	08009f81 	.word	0x08009f81
 8009ee8:	08009f81 	.word	0x08009f81
 8009eec:	08009f61 	.word	0x08009f61
 8009ef0:	08009f81 	.word	0x08009f81
 8009ef4:	08009f81 	.word	0x08009f81
 8009ef8:	08009f81 	.word	0x08009f81
 8009efc:	08009f81 	.word	0x08009f81
 8009f00:	08009f81 	.word	0x08009f81
 8009f04:	08009f81 	.word	0x08009f81
 8009f08:	08009f81 	.word	0x08009f81
 8009f0c:	08009f69 	.word	0x08009f69
 8009f10:	08009f81 	.word	0x08009f81
 8009f14:	08009f81 	.word	0x08009f81
 8009f18:	08009f81 	.word	0x08009f81
 8009f1c:	08009f81 	.word	0x08009f81
 8009f20:	08009f81 	.word	0x08009f81
 8009f24:	08009f81 	.word	0x08009f81
 8009f28:	08009f81 	.word	0x08009f81
 8009f2c:	08009f71 	.word	0x08009f71
 8009f30:	08009f81 	.word	0x08009f81
 8009f34:	08009f81 	.word	0x08009f81
 8009f38:	08009f81 	.word	0x08009f81
 8009f3c:	08009f81 	.word	0x08009f81
 8009f40:	08009f81 	.word	0x08009f81
 8009f44:	08009f81 	.word	0x08009f81
 8009f48:	08009f81 	.word	0x08009f81
 8009f4c:	08009f79 	.word	0x08009f79
 8009f50:	2301      	movs	r3, #1
 8009f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f56:	e233      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 8009f58:	2304      	movs	r3, #4
 8009f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f5e:	e22f      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 8009f60:	2308      	movs	r3, #8
 8009f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f66:	e22b      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 8009f68:	2310      	movs	r3, #16
 8009f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f6e:	e227      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 8009f70:	2320      	movs	r3, #32
 8009f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f76:	e223      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 8009f78:	2340      	movs	r3, #64	; 0x40
 8009f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f7e:	e21f      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 8009f80:	2380      	movs	r3, #128	; 0x80
 8009f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f86:	bf00      	nop
 8009f88:	e21a      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a6f      	ldr	r2, [pc, #444]	; (800a14c <UART_SetConfig+0x350>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d132      	bne.n	8009ffa <UART_SetConfig+0x1fe>
 8009f94:	4b6c      	ldr	r3, [pc, #432]	; (800a148 <UART_SetConfig+0x34c>)
 8009f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f98:	f003 0307 	and.w	r3, r3, #7
 8009f9c:	2b05      	cmp	r3, #5
 8009f9e:	d827      	bhi.n	8009ff0 <UART_SetConfig+0x1f4>
 8009fa0:	a201      	add	r2, pc, #4	; (adr r2, 8009fa8 <UART_SetConfig+0x1ac>)
 8009fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa6:	bf00      	nop
 8009fa8:	08009fc1 	.word	0x08009fc1
 8009fac:	08009fc9 	.word	0x08009fc9
 8009fb0:	08009fd1 	.word	0x08009fd1
 8009fb4:	08009fd9 	.word	0x08009fd9
 8009fb8:	08009fe1 	.word	0x08009fe1
 8009fbc:	08009fe9 	.word	0x08009fe9
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fc6:	e1fb      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 8009fc8:	2304      	movs	r3, #4
 8009fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fce:	e1f7      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 8009fd0:	2308      	movs	r3, #8
 8009fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fd6:	e1f3      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 8009fd8:	2310      	movs	r3, #16
 8009fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fde:	e1ef      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 8009fe0:	2320      	movs	r3, #32
 8009fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fe6:	e1eb      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 8009fe8:	2340      	movs	r3, #64	; 0x40
 8009fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fee:	e1e7      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 8009ff0:	2380      	movs	r3, #128	; 0x80
 8009ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ff6:	bf00      	nop
 8009ff8:	e1e2      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a54      	ldr	r2, [pc, #336]	; (800a150 <UART_SetConfig+0x354>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d132      	bne.n	800a06a <UART_SetConfig+0x26e>
 800a004:	4b50      	ldr	r3, [pc, #320]	; (800a148 <UART_SetConfig+0x34c>)
 800a006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a008:	f003 0307 	and.w	r3, r3, #7
 800a00c:	2b05      	cmp	r3, #5
 800a00e:	d827      	bhi.n	800a060 <UART_SetConfig+0x264>
 800a010:	a201      	add	r2, pc, #4	; (adr r2, 800a018 <UART_SetConfig+0x21c>)
 800a012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a016:	bf00      	nop
 800a018:	0800a031 	.word	0x0800a031
 800a01c:	0800a039 	.word	0x0800a039
 800a020:	0800a041 	.word	0x0800a041
 800a024:	0800a049 	.word	0x0800a049
 800a028:	0800a051 	.word	0x0800a051
 800a02c:	0800a059 	.word	0x0800a059
 800a030:	2300      	movs	r3, #0
 800a032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a036:	e1c3      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a038:	2304      	movs	r3, #4
 800a03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a03e:	e1bf      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a040:	2308      	movs	r3, #8
 800a042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a046:	e1bb      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a048:	2310      	movs	r3, #16
 800a04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a04e:	e1b7      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a050:	2320      	movs	r3, #32
 800a052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a056:	e1b3      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a058:	2340      	movs	r3, #64	; 0x40
 800a05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a05e:	e1af      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a060:	2380      	movs	r3, #128	; 0x80
 800a062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a066:	bf00      	nop
 800a068:	e1aa      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a39      	ldr	r2, [pc, #228]	; (800a154 <UART_SetConfig+0x358>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d132      	bne.n	800a0da <UART_SetConfig+0x2de>
 800a074:	4b34      	ldr	r3, [pc, #208]	; (800a148 <UART_SetConfig+0x34c>)
 800a076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a078:	f003 0307 	and.w	r3, r3, #7
 800a07c:	2b05      	cmp	r3, #5
 800a07e:	d827      	bhi.n	800a0d0 <UART_SetConfig+0x2d4>
 800a080:	a201      	add	r2, pc, #4	; (adr r2, 800a088 <UART_SetConfig+0x28c>)
 800a082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a086:	bf00      	nop
 800a088:	0800a0a1 	.word	0x0800a0a1
 800a08c:	0800a0a9 	.word	0x0800a0a9
 800a090:	0800a0b1 	.word	0x0800a0b1
 800a094:	0800a0b9 	.word	0x0800a0b9
 800a098:	0800a0c1 	.word	0x0800a0c1
 800a09c:	0800a0c9 	.word	0x0800a0c9
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0a6:	e18b      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a0a8:	2304      	movs	r3, #4
 800a0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ae:	e187      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a0b0:	2308      	movs	r3, #8
 800a0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0b6:	e183      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a0b8:	2310      	movs	r3, #16
 800a0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0be:	e17f      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a0c0:	2320      	movs	r3, #32
 800a0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0c6:	e17b      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a0c8:	2340      	movs	r3, #64	; 0x40
 800a0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ce:	e177      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a0d0:	2380      	movs	r3, #128	; 0x80
 800a0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0d6:	bf00      	nop
 800a0d8:	e172      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a1e      	ldr	r2, [pc, #120]	; (800a158 <UART_SetConfig+0x35c>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d144      	bne.n	800a16e <UART_SetConfig+0x372>
 800a0e4:	4b18      	ldr	r3, [pc, #96]	; (800a148 <UART_SetConfig+0x34c>)
 800a0e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0e8:	f003 0307 	and.w	r3, r3, #7
 800a0ec:	2b05      	cmp	r3, #5
 800a0ee:	d839      	bhi.n	800a164 <UART_SetConfig+0x368>
 800a0f0:	a201      	add	r2, pc, #4	; (adr r2, 800a0f8 <UART_SetConfig+0x2fc>)
 800a0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f6:	bf00      	nop
 800a0f8:	0800a111 	.word	0x0800a111
 800a0fc:	0800a119 	.word	0x0800a119
 800a100:	0800a121 	.word	0x0800a121
 800a104:	0800a129 	.word	0x0800a129
 800a108:	0800a131 	.word	0x0800a131
 800a10c:	0800a15d 	.word	0x0800a15d
 800a110:	2300      	movs	r3, #0
 800a112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a116:	e153      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a118:	2304      	movs	r3, #4
 800a11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a11e:	e14f      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a120:	2308      	movs	r3, #8
 800a122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a126:	e14b      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a128:	2310      	movs	r3, #16
 800a12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a12e:	e147      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a130:	2320      	movs	r3, #32
 800a132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a136:	e143      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a138:	cfff69f3 	.word	0xcfff69f3
 800a13c:	58000c00 	.word	0x58000c00
 800a140:	11fff4ff 	.word	0x11fff4ff
 800a144:	40011000 	.word	0x40011000
 800a148:	58024400 	.word	0x58024400
 800a14c:	40004400 	.word	0x40004400
 800a150:	40004800 	.word	0x40004800
 800a154:	40004c00 	.word	0x40004c00
 800a158:	40005000 	.word	0x40005000
 800a15c:	2340      	movs	r3, #64	; 0x40
 800a15e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a162:	e12d      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a164:	2380      	movs	r3, #128	; 0x80
 800a166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a16a:	bf00      	nop
 800a16c:	e128      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4ab6      	ldr	r2, [pc, #728]	; (800a44c <UART_SetConfig+0x650>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d178      	bne.n	800a26a <UART_SetConfig+0x46e>
 800a178:	4bb5      	ldr	r3, [pc, #724]	; (800a450 <UART_SetConfig+0x654>)
 800a17a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a17c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a180:	2b28      	cmp	r3, #40	; 0x28
 800a182:	d86d      	bhi.n	800a260 <UART_SetConfig+0x464>
 800a184:	a201      	add	r2, pc, #4	; (adr r2, 800a18c <UART_SetConfig+0x390>)
 800a186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18a:	bf00      	nop
 800a18c:	0800a231 	.word	0x0800a231
 800a190:	0800a261 	.word	0x0800a261
 800a194:	0800a261 	.word	0x0800a261
 800a198:	0800a261 	.word	0x0800a261
 800a19c:	0800a261 	.word	0x0800a261
 800a1a0:	0800a261 	.word	0x0800a261
 800a1a4:	0800a261 	.word	0x0800a261
 800a1a8:	0800a261 	.word	0x0800a261
 800a1ac:	0800a239 	.word	0x0800a239
 800a1b0:	0800a261 	.word	0x0800a261
 800a1b4:	0800a261 	.word	0x0800a261
 800a1b8:	0800a261 	.word	0x0800a261
 800a1bc:	0800a261 	.word	0x0800a261
 800a1c0:	0800a261 	.word	0x0800a261
 800a1c4:	0800a261 	.word	0x0800a261
 800a1c8:	0800a261 	.word	0x0800a261
 800a1cc:	0800a241 	.word	0x0800a241
 800a1d0:	0800a261 	.word	0x0800a261
 800a1d4:	0800a261 	.word	0x0800a261
 800a1d8:	0800a261 	.word	0x0800a261
 800a1dc:	0800a261 	.word	0x0800a261
 800a1e0:	0800a261 	.word	0x0800a261
 800a1e4:	0800a261 	.word	0x0800a261
 800a1e8:	0800a261 	.word	0x0800a261
 800a1ec:	0800a249 	.word	0x0800a249
 800a1f0:	0800a261 	.word	0x0800a261
 800a1f4:	0800a261 	.word	0x0800a261
 800a1f8:	0800a261 	.word	0x0800a261
 800a1fc:	0800a261 	.word	0x0800a261
 800a200:	0800a261 	.word	0x0800a261
 800a204:	0800a261 	.word	0x0800a261
 800a208:	0800a261 	.word	0x0800a261
 800a20c:	0800a251 	.word	0x0800a251
 800a210:	0800a261 	.word	0x0800a261
 800a214:	0800a261 	.word	0x0800a261
 800a218:	0800a261 	.word	0x0800a261
 800a21c:	0800a261 	.word	0x0800a261
 800a220:	0800a261 	.word	0x0800a261
 800a224:	0800a261 	.word	0x0800a261
 800a228:	0800a261 	.word	0x0800a261
 800a22c:	0800a259 	.word	0x0800a259
 800a230:	2301      	movs	r3, #1
 800a232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a236:	e0c3      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a238:	2304      	movs	r3, #4
 800a23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a23e:	e0bf      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a240:	2308      	movs	r3, #8
 800a242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a246:	e0bb      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a248:	2310      	movs	r3, #16
 800a24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a24e:	e0b7      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a250:	2320      	movs	r3, #32
 800a252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a256:	e0b3      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a258:	2340      	movs	r3, #64	; 0x40
 800a25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a25e:	e0af      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a260:	2380      	movs	r3, #128	; 0x80
 800a262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a266:	bf00      	nop
 800a268:	e0aa      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a79      	ldr	r2, [pc, #484]	; (800a454 <UART_SetConfig+0x658>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d132      	bne.n	800a2da <UART_SetConfig+0x4de>
 800a274:	4b76      	ldr	r3, [pc, #472]	; (800a450 <UART_SetConfig+0x654>)
 800a276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a278:	f003 0307 	and.w	r3, r3, #7
 800a27c:	2b05      	cmp	r3, #5
 800a27e:	d827      	bhi.n	800a2d0 <UART_SetConfig+0x4d4>
 800a280:	a201      	add	r2, pc, #4	; (adr r2, 800a288 <UART_SetConfig+0x48c>)
 800a282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a286:	bf00      	nop
 800a288:	0800a2a1 	.word	0x0800a2a1
 800a28c:	0800a2a9 	.word	0x0800a2a9
 800a290:	0800a2b1 	.word	0x0800a2b1
 800a294:	0800a2b9 	.word	0x0800a2b9
 800a298:	0800a2c1 	.word	0x0800a2c1
 800a29c:	0800a2c9 	.word	0x0800a2c9
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2a6:	e08b      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a2a8:	2304      	movs	r3, #4
 800a2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ae:	e087      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a2b0:	2308      	movs	r3, #8
 800a2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2b6:	e083      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a2b8:	2310      	movs	r3, #16
 800a2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2be:	e07f      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a2c0:	2320      	movs	r3, #32
 800a2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2c6:	e07b      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a2c8:	2340      	movs	r3, #64	; 0x40
 800a2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ce:	e077      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a2d0:	2380      	movs	r3, #128	; 0x80
 800a2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2d6:	bf00      	nop
 800a2d8:	e072      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a5e      	ldr	r2, [pc, #376]	; (800a458 <UART_SetConfig+0x65c>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d132      	bne.n	800a34a <UART_SetConfig+0x54e>
 800a2e4:	4b5a      	ldr	r3, [pc, #360]	; (800a450 <UART_SetConfig+0x654>)
 800a2e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e8:	f003 0307 	and.w	r3, r3, #7
 800a2ec:	2b05      	cmp	r3, #5
 800a2ee:	d827      	bhi.n	800a340 <UART_SetConfig+0x544>
 800a2f0:	a201      	add	r2, pc, #4	; (adr r2, 800a2f8 <UART_SetConfig+0x4fc>)
 800a2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f6:	bf00      	nop
 800a2f8:	0800a311 	.word	0x0800a311
 800a2fc:	0800a319 	.word	0x0800a319
 800a300:	0800a321 	.word	0x0800a321
 800a304:	0800a329 	.word	0x0800a329
 800a308:	0800a331 	.word	0x0800a331
 800a30c:	0800a339 	.word	0x0800a339
 800a310:	2300      	movs	r3, #0
 800a312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a316:	e053      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a318:	2304      	movs	r3, #4
 800a31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a31e:	e04f      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a320:	2308      	movs	r3, #8
 800a322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a326:	e04b      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a328:	2310      	movs	r3, #16
 800a32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a32e:	e047      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a330:	2320      	movs	r3, #32
 800a332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a336:	e043      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a338:	2340      	movs	r3, #64	; 0x40
 800a33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a33e:	e03f      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a340:	2380      	movs	r3, #128	; 0x80
 800a342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a346:	bf00      	nop
 800a348:	e03a      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a43      	ldr	r2, [pc, #268]	; (800a45c <UART_SetConfig+0x660>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d132      	bne.n	800a3ba <UART_SetConfig+0x5be>
 800a354:	4b3e      	ldr	r3, [pc, #248]	; (800a450 <UART_SetConfig+0x654>)
 800a356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a358:	f003 0307 	and.w	r3, r3, #7
 800a35c:	2b05      	cmp	r3, #5
 800a35e:	d827      	bhi.n	800a3b0 <UART_SetConfig+0x5b4>
 800a360:	a201      	add	r2, pc, #4	; (adr r2, 800a368 <UART_SetConfig+0x56c>)
 800a362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a366:	bf00      	nop
 800a368:	0800a381 	.word	0x0800a381
 800a36c:	0800a389 	.word	0x0800a389
 800a370:	0800a391 	.word	0x0800a391
 800a374:	0800a399 	.word	0x0800a399
 800a378:	0800a3a1 	.word	0x0800a3a1
 800a37c:	0800a3a9 	.word	0x0800a3a9
 800a380:	2302      	movs	r3, #2
 800a382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a386:	e01b      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a388:	2304      	movs	r3, #4
 800a38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a38e:	e017      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a390:	2308      	movs	r3, #8
 800a392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a396:	e013      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a398:	2310      	movs	r3, #16
 800a39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a39e:	e00f      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a3a0:	2320      	movs	r3, #32
 800a3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3a6:	e00b      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a3a8:	2340      	movs	r3, #64	; 0x40
 800a3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ae:	e007      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a3b0:	2380      	movs	r3, #128	; 0x80
 800a3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3b6:	bf00      	nop
 800a3b8:	e002      	b.n	800a3c0 <UART_SetConfig+0x5c4>
 800a3ba:	2380      	movs	r3, #128	; 0x80
 800a3bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a25      	ldr	r2, [pc, #148]	; (800a45c <UART_SetConfig+0x660>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	f040 80ad 	bne.w	800a526 <UART_SetConfig+0x72a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a3cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3d0:	2b08      	cmp	r3, #8
 800a3d2:	d019      	beq.n	800a408 <UART_SetConfig+0x60c>
 800a3d4:	2b08      	cmp	r3, #8
 800a3d6:	dc04      	bgt.n	800a3e2 <UART_SetConfig+0x5e6>
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	d009      	beq.n	800a3f0 <UART_SetConfig+0x5f4>
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	d00b      	beq.n	800a3f8 <UART_SetConfig+0x5fc>
 800a3e0:	e042      	b.n	800a468 <UART_SetConfig+0x66c>
 800a3e2:	2b20      	cmp	r3, #32
 800a3e4:	d02b      	beq.n	800a43e <UART_SetConfig+0x642>
 800a3e6:	2b40      	cmp	r3, #64	; 0x40
 800a3e8:	d02c      	beq.n	800a444 <UART_SetConfig+0x648>
 800a3ea:	2b10      	cmp	r3, #16
 800a3ec:	d014      	beq.n	800a418 <UART_SetConfig+0x61c>
 800a3ee:	e03b      	b.n	800a468 <UART_SetConfig+0x66c>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a3f0:	f7fd fa64 	bl	80078bc <HAL_RCCEx_GetD3PCLK1Freq>
 800a3f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a3f6:	e03d      	b.n	800a474 <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3f8:	f107 0314 	add.w	r3, r7, #20
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7fd fa73 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a406:	e035      	b.n	800a474 <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a408:	f107 0308 	add.w	r3, r7, #8
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7fd fbb7 	bl	8007b80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a416:	e02d      	b.n	800a474 <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a418:	4b0d      	ldr	r3, [pc, #52]	; (800a450 <UART_SetConfig+0x654>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 0320 	and.w	r3, r3, #32
 800a420:	2b00      	cmp	r3, #0
 800a422:	d009      	beq.n	800a438 <UART_SetConfig+0x63c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a424:	4b0a      	ldr	r3, [pc, #40]	; (800a450 <UART_SetConfig+0x654>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	08db      	lsrs	r3, r3, #3
 800a42a:	f003 0303 	and.w	r3, r3, #3
 800a42e:	4a0c      	ldr	r2, [pc, #48]	; (800a460 <UART_SetConfig+0x664>)
 800a430:	fa22 f303 	lsr.w	r3, r2, r3
 800a434:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a436:	e01d      	b.n	800a474 <UART_SetConfig+0x678>
          pclk = (uint32_t) HSI_VALUE;
 800a438:	4b09      	ldr	r3, [pc, #36]	; (800a460 <UART_SetConfig+0x664>)
 800a43a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a43c:	e01a      	b.n	800a474 <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a43e:	4b09      	ldr	r3, [pc, #36]	; (800a464 <UART_SetConfig+0x668>)
 800a440:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a442:	e017      	b.n	800a474 <UART_SetConfig+0x678>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a444:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a448:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a44a:	e013      	b.n	800a474 <UART_SetConfig+0x678>
 800a44c:	40011400 	.word	0x40011400
 800a450:	58024400 	.word	0x58024400
 800a454:	40007800 	.word	0x40007800
 800a458:	40007c00 	.word	0x40007c00
 800a45c:	58000c00 	.word	0x58000c00
 800a460:	03d09000 	.word	0x03d09000
 800a464:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a468:	2300      	movs	r3, #0
 800a46a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a472:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a476:	2b00      	cmp	r3, #0
 800a478:	f000 8243 	beq.w	800a902 <UART_SetConfig+0xb06>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	4aa8      	ldr	r2, [pc, #672]	; (800a724 <UART_SetConfig+0x928>)
 800a482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a486:	461a      	mov	r2, r3
 800a488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a48e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	685a      	ldr	r2, [r3, #4]
 800a494:	4613      	mov	r3, r2
 800a496:	005b      	lsls	r3, r3, #1
 800a498:	441a      	add	r2, r3
 800a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d805      	bhi.n	800a4ac <UART_SetConfig+0x6b0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d203      	bcs.n	800a4b4 <UART_SetConfig+0x6b8>
      {
        ret = HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a4b2:	e226      	b.n	800a902 <UART_SetConfig+0xb06>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f04f 0100 	mov.w	r1, #0
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c0:	4a98      	ldr	r2, [pc, #608]	; (800a724 <UART_SetConfig+0x928>)
 800a4c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	f04f 0300 	mov.w	r3, #0
 800a4cc:	f7f5 ff04 	bl	80002d8 <__aeabi_uldivmod>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	021d      	lsls	r5, r3, #8
 800a4d6:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800a4da:	0214      	lsls	r4, r2, #8
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	085b      	lsrs	r3, r3, #1
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	f04f 0300 	mov.w	r3, #0
 800a4e8:	18a0      	adds	r0, r4, r2
 800a4ea:	eb45 0103 	adc.w	r1, r5, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f04f 0400 	mov.w	r4, #0
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	4623      	mov	r3, r4
 800a4fa:	f7f5 feed 	bl	80002d8 <__aeabi_uldivmod>
 800a4fe:	4603      	mov	r3, r0
 800a500:	460c      	mov	r4, r1
 800a502:	627b      	str	r3, [r7, #36]	; 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a50a:	d308      	bcc.n	800a51e <UART_SetConfig+0x722>
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a512:	d204      	bcs.n	800a51e <UART_SetConfig+0x722>
        {
          huart->Instance->BRR = usartdiv;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a51a:	60da      	str	r2, [r3, #12]
 800a51c:	e1f1      	b.n	800a902 <UART_SetConfig+0xb06>
        }
        else
        {
          ret = HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a524:	e1ed      	b.n	800a902 <UART_SetConfig+0xb06>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	69db      	ldr	r3, [r3, #28]
 800a52a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a52e:	f040 8101 	bne.w	800a734 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a532:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a536:	2b40      	cmp	r3, #64	; 0x40
 800a538:	f200 80b8 	bhi.w	800a6ac <UART_SetConfig+0x8b0>
 800a53c:	a201      	add	r2, pc, #4	; (adr r2, 800a544 <UART_SetConfig+0x748>)
 800a53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a542:	bf00      	nop
 800a544:	0800a649 	.word	0x0800a649
 800a548:	0800a651 	.word	0x0800a651
 800a54c:	0800a6ad 	.word	0x0800a6ad
 800a550:	0800a6ad 	.word	0x0800a6ad
 800a554:	0800a659 	.word	0x0800a659
 800a558:	0800a6ad 	.word	0x0800a6ad
 800a55c:	0800a6ad 	.word	0x0800a6ad
 800a560:	0800a6ad 	.word	0x0800a6ad
 800a564:	0800a669 	.word	0x0800a669
 800a568:	0800a6ad 	.word	0x0800a6ad
 800a56c:	0800a6ad 	.word	0x0800a6ad
 800a570:	0800a6ad 	.word	0x0800a6ad
 800a574:	0800a6ad 	.word	0x0800a6ad
 800a578:	0800a6ad 	.word	0x0800a6ad
 800a57c:	0800a6ad 	.word	0x0800a6ad
 800a580:	0800a6ad 	.word	0x0800a6ad
 800a584:	0800a679 	.word	0x0800a679
 800a588:	0800a6ad 	.word	0x0800a6ad
 800a58c:	0800a6ad 	.word	0x0800a6ad
 800a590:	0800a6ad 	.word	0x0800a6ad
 800a594:	0800a6ad 	.word	0x0800a6ad
 800a598:	0800a6ad 	.word	0x0800a6ad
 800a59c:	0800a6ad 	.word	0x0800a6ad
 800a5a0:	0800a6ad 	.word	0x0800a6ad
 800a5a4:	0800a6ad 	.word	0x0800a6ad
 800a5a8:	0800a6ad 	.word	0x0800a6ad
 800a5ac:	0800a6ad 	.word	0x0800a6ad
 800a5b0:	0800a6ad 	.word	0x0800a6ad
 800a5b4:	0800a6ad 	.word	0x0800a6ad
 800a5b8:	0800a6ad 	.word	0x0800a6ad
 800a5bc:	0800a6ad 	.word	0x0800a6ad
 800a5c0:	0800a6ad 	.word	0x0800a6ad
 800a5c4:	0800a69f 	.word	0x0800a69f
 800a5c8:	0800a6ad 	.word	0x0800a6ad
 800a5cc:	0800a6ad 	.word	0x0800a6ad
 800a5d0:	0800a6ad 	.word	0x0800a6ad
 800a5d4:	0800a6ad 	.word	0x0800a6ad
 800a5d8:	0800a6ad 	.word	0x0800a6ad
 800a5dc:	0800a6ad 	.word	0x0800a6ad
 800a5e0:	0800a6ad 	.word	0x0800a6ad
 800a5e4:	0800a6ad 	.word	0x0800a6ad
 800a5e8:	0800a6ad 	.word	0x0800a6ad
 800a5ec:	0800a6ad 	.word	0x0800a6ad
 800a5f0:	0800a6ad 	.word	0x0800a6ad
 800a5f4:	0800a6ad 	.word	0x0800a6ad
 800a5f8:	0800a6ad 	.word	0x0800a6ad
 800a5fc:	0800a6ad 	.word	0x0800a6ad
 800a600:	0800a6ad 	.word	0x0800a6ad
 800a604:	0800a6ad 	.word	0x0800a6ad
 800a608:	0800a6ad 	.word	0x0800a6ad
 800a60c:	0800a6ad 	.word	0x0800a6ad
 800a610:	0800a6ad 	.word	0x0800a6ad
 800a614:	0800a6ad 	.word	0x0800a6ad
 800a618:	0800a6ad 	.word	0x0800a6ad
 800a61c:	0800a6ad 	.word	0x0800a6ad
 800a620:	0800a6ad 	.word	0x0800a6ad
 800a624:	0800a6ad 	.word	0x0800a6ad
 800a628:	0800a6ad 	.word	0x0800a6ad
 800a62c:	0800a6ad 	.word	0x0800a6ad
 800a630:	0800a6ad 	.word	0x0800a6ad
 800a634:	0800a6ad 	.word	0x0800a6ad
 800a638:	0800a6ad 	.word	0x0800a6ad
 800a63c:	0800a6ad 	.word	0x0800a6ad
 800a640:	0800a6ad 	.word	0x0800a6ad
 800a644:	0800a6a5 	.word	0x0800a6a5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a648:	f7fb fd98 	bl	800617c <HAL_RCC_GetPCLK1Freq>
 800a64c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a64e:	e033      	b.n	800a6b8 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a650:	f7fb fdaa 	bl	80061a8 <HAL_RCC_GetPCLK2Freq>
 800a654:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a656:	e02f      	b.n	800a6b8 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a658:	f107 0314 	add.w	r3, r7, #20
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fd f943 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a666:	e027      	b.n	800a6b8 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a668:	f107 0308 	add.w	r3, r7, #8
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fd fa87 	bl	8007b80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a676:	e01f      	b.n	800a6b8 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a678:	4b2b      	ldr	r3, [pc, #172]	; (800a728 <UART_SetConfig+0x92c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0320 	and.w	r3, r3, #32
 800a680:	2b00      	cmp	r3, #0
 800a682:	d009      	beq.n	800a698 <UART_SetConfig+0x89c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a684:	4b28      	ldr	r3, [pc, #160]	; (800a728 <UART_SetConfig+0x92c>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	08db      	lsrs	r3, r3, #3
 800a68a:	f003 0303 	and.w	r3, r3, #3
 800a68e:	4a27      	ldr	r2, [pc, #156]	; (800a72c <UART_SetConfig+0x930>)
 800a690:	fa22 f303 	lsr.w	r3, r2, r3
 800a694:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a696:	e00f      	b.n	800a6b8 <UART_SetConfig+0x8bc>
          pclk = (uint32_t) HSI_VALUE;
 800a698:	4b24      	ldr	r3, [pc, #144]	; (800a72c <UART_SetConfig+0x930>)
 800a69a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a69c:	e00c      	b.n	800a6b8 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a69e:	4b24      	ldr	r3, [pc, #144]	; (800a730 <UART_SetConfig+0x934>)
 800a6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6a2:	e009      	b.n	800a6b8 <UART_SetConfig+0x8bc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6aa:	e005      	b.n	800a6b8 <UART_SetConfig+0x8bc>
      default:
        pclk = 0U;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a6b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 8121 	beq.w	800a902 <UART_SetConfig+0xb06>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	4a17      	ldr	r2, [pc, #92]	; (800a724 <UART_SetConfig+0x928>)
 800a6c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6d2:	005a      	lsls	r2, r3, #1
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	085b      	lsrs	r3, r3, #1
 800a6da:	441a      	add	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	627b      	str	r3, [r7, #36]	; 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	2b0f      	cmp	r3, #15
 800a6ec:	d916      	bls.n	800a71c <UART_SetConfig+0x920>
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6f4:	d212      	bcs.n	800a71c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	f023 030f 	bic.w	r3, r3, #15
 800a6fe:	847b      	strh	r3, [r7, #34]	; 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	085b      	lsrs	r3, r3, #1
 800a704:	b29b      	uxth	r3, r3
 800a706:	f003 0307 	and.w	r3, r3, #7
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a70e:	4313      	orrs	r3, r2
 800a710:	847b      	strh	r3, [r7, #34]	; 0x22
        huart->Instance->BRR = brrtemp;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a718:	60da      	str	r2, [r3, #12]
 800a71a:	e0f2      	b.n	800a902 <UART_SetConfig+0xb06>
      }
      else
      {
        ret = HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a722:	e0ee      	b.n	800a902 <UART_SetConfig+0xb06>
 800a724:	0800c6f8 	.word	0x0800c6f8
 800a728:	58024400 	.word	0x58024400
 800a72c:	03d09000 	.word	0x03d09000
 800a730:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a734:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a738:	2b40      	cmp	r3, #64	; 0x40
 800a73a:	f200 80b7 	bhi.w	800a8ac <UART_SetConfig+0xab0>
 800a73e:	a201      	add	r2, pc, #4	; (adr r2, 800a744 <UART_SetConfig+0x948>)
 800a740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a744:	0800a849 	.word	0x0800a849
 800a748:	0800a851 	.word	0x0800a851
 800a74c:	0800a8ad 	.word	0x0800a8ad
 800a750:	0800a8ad 	.word	0x0800a8ad
 800a754:	0800a859 	.word	0x0800a859
 800a758:	0800a8ad 	.word	0x0800a8ad
 800a75c:	0800a8ad 	.word	0x0800a8ad
 800a760:	0800a8ad 	.word	0x0800a8ad
 800a764:	0800a869 	.word	0x0800a869
 800a768:	0800a8ad 	.word	0x0800a8ad
 800a76c:	0800a8ad 	.word	0x0800a8ad
 800a770:	0800a8ad 	.word	0x0800a8ad
 800a774:	0800a8ad 	.word	0x0800a8ad
 800a778:	0800a8ad 	.word	0x0800a8ad
 800a77c:	0800a8ad 	.word	0x0800a8ad
 800a780:	0800a8ad 	.word	0x0800a8ad
 800a784:	0800a879 	.word	0x0800a879
 800a788:	0800a8ad 	.word	0x0800a8ad
 800a78c:	0800a8ad 	.word	0x0800a8ad
 800a790:	0800a8ad 	.word	0x0800a8ad
 800a794:	0800a8ad 	.word	0x0800a8ad
 800a798:	0800a8ad 	.word	0x0800a8ad
 800a79c:	0800a8ad 	.word	0x0800a8ad
 800a7a0:	0800a8ad 	.word	0x0800a8ad
 800a7a4:	0800a8ad 	.word	0x0800a8ad
 800a7a8:	0800a8ad 	.word	0x0800a8ad
 800a7ac:	0800a8ad 	.word	0x0800a8ad
 800a7b0:	0800a8ad 	.word	0x0800a8ad
 800a7b4:	0800a8ad 	.word	0x0800a8ad
 800a7b8:	0800a8ad 	.word	0x0800a8ad
 800a7bc:	0800a8ad 	.word	0x0800a8ad
 800a7c0:	0800a8ad 	.word	0x0800a8ad
 800a7c4:	0800a89f 	.word	0x0800a89f
 800a7c8:	0800a8ad 	.word	0x0800a8ad
 800a7cc:	0800a8ad 	.word	0x0800a8ad
 800a7d0:	0800a8ad 	.word	0x0800a8ad
 800a7d4:	0800a8ad 	.word	0x0800a8ad
 800a7d8:	0800a8ad 	.word	0x0800a8ad
 800a7dc:	0800a8ad 	.word	0x0800a8ad
 800a7e0:	0800a8ad 	.word	0x0800a8ad
 800a7e4:	0800a8ad 	.word	0x0800a8ad
 800a7e8:	0800a8ad 	.word	0x0800a8ad
 800a7ec:	0800a8ad 	.word	0x0800a8ad
 800a7f0:	0800a8ad 	.word	0x0800a8ad
 800a7f4:	0800a8ad 	.word	0x0800a8ad
 800a7f8:	0800a8ad 	.word	0x0800a8ad
 800a7fc:	0800a8ad 	.word	0x0800a8ad
 800a800:	0800a8ad 	.word	0x0800a8ad
 800a804:	0800a8ad 	.word	0x0800a8ad
 800a808:	0800a8ad 	.word	0x0800a8ad
 800a80c:	0800a8ad 	.word	0x0800a8ad
 800a810:	0800a8ad 	.word	0x0800a8ad
 800a814:	0800a8ad 	.word	0x0800a8ad
 800a818:	0800a8ad 	.word	0x0800a8ad
 800a81c:	0800a8ad 	.word	0x0800a8ad
 800a820:	0800a8ad 	.word	0x0800a8ad
 800a824:	0800a8ad 	.word	0x0800a8ad
 800a828:	0800a8ad 	.word	0x0800a8ad
 800a82c:	0800a8ad 	.word	0x0800a8ad
 800a830:	0800a8ad 	.word	0x0800a8ad
 800a834:	0800a8ad 	.word	0x0800a8ad
 800a838:	0800a8ad 	.word	0x0800a8ad
 800a83c:	0800a8ad 	.word	0x0800a8ad
 800a840:	0800a8ad 	.word	0x0800a8ad
 800a844:	0800a8a5 	.word	0x0800a8a5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a848:	f7fb fc98 	bl	800617c <HAL_RCC_GetPCLK1Freq>
 800a84c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a84e:	e033      	b.n	800a8b8 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a850:	f7fb fcaa 	bl	80061a8 <HAL_RCC_GetPCLK2Freq>
 800a854:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a856:	e02f      	b.n	800a8b8 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a858:	f107 0314 	add.w	r3, r7, #20
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fd f843 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a866:	e027      	b.n	800a8b8 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a868:	f107 0308 	add.w	r3, r7, #8
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7fd f987 	bl	8007b80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a876:	e01f      	b.n	800a8b8 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a878:	4b2c      	ldr	r3, [pc, #176]	; (800a92c <UART_SetConfig+0xb30>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 0320 	and.w	r3, r3, #32
 800a880:	2b00      	cmp	r3, #0
 800a882:	d009      	beq.n	800a898 <UART_SetConfig+0xa9c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a884:	4b29      	ldr	r3, [pc, #164]	; (800a92c <UART_SetConfig+0xb30>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	08db      	lsrs	r3, r3, #3
 800a88a:	f003 0303 	and.w	r3, r3, #3
 800a88e:	4a28      	ldr	r2, [pc, #160]	; (800a930 <UART_SetConfig+0xb34>)
 800a890:	fa22 f303 	lsr.w	r3, r2, r3
 800a894:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a896:	e00f      	b.n	800a8b8 <UART_SetConfig+0xabc>
          pclk = (uint32_t) HSI_VALUE;
 800a898:	4b25      	ldr	r3, [pc, #148]	; (800a930 <UART_SetConfig+0xb34>)
 800a89a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a89c:	e00c      	b.n	800a8b8 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a89e:	4b25      	ldr	r3, [pc, #148]	; (800a934 <UART_SetConfig+0xb38>)
 800a8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8a2:	e009      	b.n	800a8b8 <UART_SetConfig+0xabc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8aa:	e005      	b.n	800a8b8 <UART_SetConfig+0xabc>
      default:
        pclk = 0U;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a8b6:	bf00      	nop
    }

    if (pclk != 0U)
 800a8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d021      	beq.n	800a902 <UART_SetConfig+0xb06>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c2:	4a1d      	ldr	r2, [pc, #116]	; (800a938 <UART_SetConfig+0xb3c>)
 800a8c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8cc:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	085b      	lsrs	r3, r3, #1
 800a8d6:	441a      	add	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	627b      	str	r3, [r7, #36]	; 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e6:	2b0f      	cmp	r3, #15
 800a8e8:	d908      	bls.n	800a8fc <UART_SetConfig+0xb00>
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8f0:	d204      	bcs.n	800a8fc <UART_SetConfig+0xb00>
      {
        huart->Instance->BRR = usartdiv;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8f8:	60da      	str	r2, [r3, #12]
 800a8fa:	e002      	b.n	800a902 <UART_SetConfig+0xb06>
      }
      else
      {
        ret = HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a91e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a922:	4618      	mov	r0, r3
 800a924:	3738      	adds	r7, #56	; 0x38
 800a926:	46bd      	mov	sp, r7
 800a928:	bdb0      	pop	{r4, r5, r7, pc}
 800a92a:	bf00      	nop
 800a92c:	58024400 	.word	0x58024400
 800a930:	03d09000 	.word	0x03d09000
 800a934:	003d0900 	.word	0x003d0900
 800a938:	0800c6f8 	.word	0x0800c6f8

0800a93c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a948:	f003 0301 	and.w	r3, r3, #1
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00a      	beq.n	800a966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	6812      	ldr	r2, [r2, #0]
 800a958:	6852      	ldr	r2, [r2, #4]
 800a95a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a962:	430a      	orrs	r2, r1
 800a964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a96a:	f003 0302 	and.w	r3, r3, #2
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00a      	beq.n	800a988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	6812      	ldr	r2, [r2, #0]
 800a97a:	6852      	ldr	r2, [r2, #4]
 800a97c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a984:	430a      	orrs	r2, r1
 800a986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98c:	f003 0304 	and.w	r3, r3, #4
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00a      	beq.n	800a9aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	6812      	ldr	r2, [r2, #0]
 800a99c:	6852      	ldr	r2, [r2, #4]
 800a99e:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a9a6:	430a      	orrs	r2, r1
 800a9a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ae:	f003 0308 	and.w	r3, r3, #8
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00a      	beq.n	800a9cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	6812      	ldr	r2, [r2, #0]
 800a9be:	6852      	ldr	r2, [r2, #4]
 800a9c0:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a9c8:	430a      	orrs	r2, r1
 800a9ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d0:	f003 0310 	and.w	r3, r3, #16
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00a      	beq.n	800a9ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	6812      	ldr	r2, [r2, #0]
 800a9e0:	6892      	ldr	r2, [r2, #8]
 800a9e2:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a9ea:	430a      	orrs	r2, r1
 800a9ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f2:	f003 0320 	and.w	r3, r3, #32
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00a      	beq.n	800aa10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	6812      	ldr	r2, [r2, #0]
 800aa02:	6892      	ldr	r2, [r2, #8]
 800aa04:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800aa0c:	430a      	orrs	r2, r1
 800aa0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d01a      	beq.n	800aa52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	6812      	ldr	r2, [r2, #0]
 800aa24:	6852      	ldr	r2, [r2, #4]
 800aa26:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa3a:	d10a      	bne.n	800aa52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	6812      	ldr	r2, [r2, #0]
 800aa44:	6852      	ldr	r2, [r2, #4]
 800aa46:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00a      	beq.n	800aa74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	6812      	ldr	r2, [r2, #0]
 800aa66:	6852      	ldr	r2, [r2, #4]
 800aa68:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800aa70:	430a      	orrs	r2, r1
 800aa72:	605a      	str	r2, [r3, #4]
  }
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af02      	add	r7, sp, #8
 800aa86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa90:	f7f5 fe30 	bl	80006f4 <HAL_GetTick>
 800aa94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0308 	and.w	r3, r3, #8
 800aaa0:	2b08      	cmp	r3, #8
 800aaa2:	d10e      	bne.n	800aac2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aaa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f82f 	bl	800ab16 <UART_WaitOnFlagUntilTimeout>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aabe:	2303      	movs	r3, #3
 800aac0:	e025      	b.n	800ab0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 0304 	and.w	r3, r3, #4
 800aacc:	2b04      	cmp	r3, #4
 800aace:	d10e      	bne.n	800aaee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aad0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 f819 	bl	800ab16 <UART_WaitOnFlagUntilTimeout>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d001      	beq.n	800aaee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aaea:	2303      	movs	r3, #3
 800aaec:	e00f      	b.n	800ab0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2220      	movs	r2, #32
 800aaf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2220      	movs	r2, #32
 800aafa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	60f8      	str	r0, [r7, #12]
 800ab1e:	60b9      	str	r1, [r7, #8]
 800ab20:	603b      	str	r3, [r7, #0]
 800ab22:	4613      	mov	r3, r2
 800ab24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab26:	e062      	b.n	800abee <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab2e:	d05e      	beq.n	800abee <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab30:	f7f5 fde0 	bl	80006f4 <HAL_GetTick>
 800ab34:	4602      	mov	r2, r0
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	1ad2      	subs	r2, r2, r3
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d802      	bhi.n	800ab46 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d11d      	bne.n	800ab82 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	6812      	ldr	r2, [r2, #0]
 800ab4e:	6812      	ldr	r2, [r2, #0]
 800ab50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab54:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	6812      	ldr	r2, [r2, #0]
 800ab5e:	6892      	ldr	r2, [r2, #8]
 800ab60:	f022 0201 	bic.w	r2, r2, #1
 800ab64:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2220      	movs	r2, #32
 800ab6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2220      	movs	r2, #32
 800ab72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e045      	b.n	800ac0e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 0304 	and.w	r3, r3, #4
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d02e      	beq.n	800abee <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	69db      	ldr	r3, [r3, #28]
 800ab96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab9e:	d126      	bne.n	800abee <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aba8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	6812      	ldr	r2, [r2, #0]
 800abb2:	6812      	ldr	r2, [r2, #0]
 800abb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800abb8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	6812      	ldr	r2, [r2, #0]
 800abc2:	6892      	ldr	r2, [r2, #8]
 800abc4:	f022 0201 	bic.w	r2, r2, #1
 800abc8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2220      	movs	r2, #32
 800abce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2220      	movs	r2, #32
 800abd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2220      	movs	r2, #32
 800abde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800abea:	2303      	movs	r3, #3
 800abec:	e00f      	b.n	800ac0e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	69da      	ldr	r2, [r3, #28]
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	401a      	ands	r2, r3
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	bf0c      	ite	eq
 800abfe:	2301      	moveq	r3, #1
 800ac00:	2300      	movne	r3, #0
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	461a      	mov	r2, r3
 800ac06:	79fb      	ldrb	r3, [r7, #7]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d08d      	beq.n	800ab28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
	...

0800ac18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	6812      	ldr	r2, [r2, #0]
 800ac28:	6812      	ldr	r2, [r2, #0]
 800ac2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ac2e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	6899      	ldr	r1, [r3, #8]
 800ac3a:	4b0f      	ldr	r3, [pc, #60]	; (800ac78 <UART_EndRxTransfer+0x60>)
 800ac3c:	400b      	ands	r3, r1
 800ac3e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d107      	bne.n	800ac58 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	6812      	ldr	r2, [r2, #0]
 800ac50:	6812      	ldr	r2, [r2, #0]
 800ac52:	f022 0210 	bic.w	r2, r2, #16
 800ac56:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2220      	movs	r2, #32
 800ac5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	effffffe 	.word	0xeffffffe

0800ac7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f7ff f898 	bl	8009dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aca0:	bf00      	nop
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	6812      	ldr	r2, [r2, #0]
 800acb8:	6812      	ldr	r2, [r2, #0]
 800acba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acbe:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2220      	movs	r2, #32
 800acc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f7ff f874 	bl	8009dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acd4:	bf00      	nop
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800acf8:	bf00      	nop
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d101      	bne.n	800ad2e <HAL_UARTEx_DisableFifoMode+0x16>
 800ad2a:	2302      	movs	r3, #2
 800ad2c:	e027      	b.n	800ad7e <HAL_UARTEx_DisableFifoMode+0x66>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2224      	movs	r2, #36	; 0x24
 800ad3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	6812      	ldr	r2, [r2, #0]
 800ad4e:	6812      	ldr	r2, [r2, #0]
 800ad50:	f022 0201 	bic.w	r2, r2, #1
 800ad54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ad5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2220      	movs	r2, #32
 800ad70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3714      	adds	r7, #20
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b084      	sub	sp, #16
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
 800ad92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d101      	bne.n	800ada2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad9e:	2302      	movs	r3, #2
 800ada0:	e02d      	b.n	800adfe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2201      	movs	r2, #1
 800ada6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2224      	movs	r2, #36	; 0x24
 800adae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	6812      	ldr	r2, [r2, #0]
 800adc2:	6812      	ldr	r2, [r2, #0]
 800adc4:	f022 0201 	bic.w	r2, r2, #1
 800adc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	6812      	ldr	r2, [r2, #0]
 800add2:	6892      	ldr	r2, [r2, #8]
 800add4:	f022 4160 	bic.w	r1, r2, #3758096384	; 0xe0000000
 800add8:	683a      	ldr	r2, [r7, #0]
 800adda:	430a      	orrs	r2, r1
 800addc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 f850 	bl	800ae84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2220      	movs	r2, #32
 800adf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b084      	sub	sp, #16
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
 800ae0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d101      	bne.n	800ae1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae1a:	2302      	movs	r3, #2
 800ae1c:	e02d      	b.n	800ae7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2201      	movs	r2, #1
 800ae22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2224      	movs	r2, #36	; 0x24
 800ae2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	6812      	ldr	r2, [r2, #0]
 800ae3e:	6812      	ldr	r2, [r2, #0]
 800ae40:	f022 0201 	bic.w	r2, r2, #1
 800ae44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	6812      	ldr	r2, [r2, #0]
 800ae4e:	6892      	ldr	r2, [r2, #8]
 800ae50:	f022 6160 	bic.w	r1, r2, #234881024	; 0xe000000
 800ae54:	683a      	ldr	r2, [r7, #0]
 800ae56:	430a      	orrs	r2, r1
 800ae58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 f812 	bl	800ae84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2220      	movs	r2, #32
 800ae6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
	...

0800ae84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b085      	sub	sp, #20
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d108      	bne.n	800aea6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aea4:	e031      	b.n	800af0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aea6:	2310      	movs	r3, #16
 800aea8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aeaa:	2310      	movs	r3, #16
 800aeac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	0e5b      	lsrs	r3, r3, #25
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	f003 0307 	and.w	r3, r3, #7
 800aebc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	0f5b      	lsrs	r3, r3, #29
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	f003 0307 	and.w	r3, r3, #7
 800aecc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aece:	7bbb      	ldrb	r3, [r7, #14]
 800aed0:	7b3a      	ldrb	r2, [r7, #12]
 800aed2:	4911      	ldr	r1, [pc, #68]	; (800af18 <UARTEx_SetNbDataToProcess+0x94>)
 800aed4:	5c8a      	ldrb	r2, [r1, r2]
 800aed6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aeda:	7b3a      	ldrb	r2, [r7, #12]
 800aedc:	490f      	ldr	r1, [pc, #60]	; (800af1c <UARTEx_SetNbDataToProcess+0x98>)
 800aede:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aee0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	7b7a      	ldrb	r2, [r7, #13]
 800aef0:	4909      	ldr	r1, [pc, #36]	; (800af18 <UARTEx_SetNbDataToProcess+0x94>)
 800aef2:	5c8a      	ldrb	r2, [r1, r2]
 800aef4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aef8:	7b7a      	ldrb	r2, [r7, #13]
 800aefa:	4908      	ldr	r1, [pc, #32]	; (800af1c <UARTEx_SetNbDataToProcess+0x98>)
 800aefc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aefe:	fb93 f3f2 	sdiv	r3, r3, r2
 800af02:	b29a      	uxth	r2, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800af0a:	bf00      	nop
 800af0c:	3714      	adds	r7, #20
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	0800c710 	.word	0x0800c710
 800af1c:	0800c718 	.word	0x0800c718

0800af20 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b08a      	sub	sp, #40	; 0x28
 800af24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800af26:	f107 031c 	add.w	r3, r7, #28
 800af2a:	2200      	movs	r2, #0
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	605a      	str	r2, [r3, #4]
 800af30:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800af32:	463b      	mov	r3, r7
 800af34:	2200      	movs	r2, #0
 800af36:	601a      	str	r2, [r3, #0]
 800af38:	605a      	str	r2, [r3, #4]
 800af3a:	609a      	str	r2, [r3, #8]
 800af3c:	60da      	str	r2, [r3, #12]
 800af3e:	611a      	str	r2, [r3, #16]
 800af40:	615a      	str	r2, [r3, #20]
 800af42:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800af44:	4b2f      	ldr	r3, [pc, #188]	; (800b004 <MX_ADC1_Init+0xe4>)
 800af46:	4a30      	ldr	r2, [pc, #192]	; (800b008 <MX_ADC1_Init+0xe8>)
 800af48:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800af4a:	4b2e      	ldr	r3, [pc, #184]	; (800b004 <MX_ADC1_Init+0xe4>)
 800af4c:	2200      	movs	r2, #0
 800af4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800af50:	4b2c      	ldr	r3, [pc, #176]	; (800b004 <MX_ADC1_Init+0xe4>)
 800af52:	2200      	movs	r2, #0
 800af54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800af56:	4b2b      	ldr	r3, [pc, #172]	; (800b004 <MX_ADC1_Init+0xe4>)
 800af58:	2200      	movs	r2, #0
 800af5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800af5c:	4b29      	ldr	r3, [pc, #164]	; (800b004 <MX_ADC1_Init+0xe4>)
 800af5e:	2204      	movs	r2, #4
 800af60:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800af62:	4b28      	ldr	r3, [pc, #160]	; (800b004 <MX_ADC1_Init+0xe4>)
 800af64:	2200      	movs	r2, #0
 800af66:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800af68:	4b26      	ldr	r3, [pc, #152]	; (800b004 <MX_ADC1_Init+0xe4>)
 800af6a:	2201      	movs	r2, #1
 800af6c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800af6e:	4b25      	ldr	r3, [pc, #148]	; (800b004 <MX_ADC1_Init+0xe4>)
 800af70:	2201      	movs	r2, #1
 800af72:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800af74:	4b23      	ldr	r3, [pc, #140]	; (800b004 <MX_ADC1_Init+0xe4>)
 800af76:	2200      	movs	r2, #0
 800af78:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800af7a:	4b22      	ldr	r3, [pc, #136]	; (800b004 <MX_ADC1_Init+0xe4>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800af80:	4b20      	ldr	r3, [pc, #128]	; (800b004 <MX_ADC1_Init+0xe4>)
 800af82:	2200      	movs	r2, #0
 800af84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800af86:	4b1f      	ldr	r3, [pc, #124]	; (800b004 <MX_ADC1_Init+0xe4>)
 800af88:	2203      	movs	r2, #3
 800af8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800af8c:	4b1d      	ldr	r3, [pc, #116]	; (800b004 <MX_ADC1_Init+0xe4>)
 800af8e:	2200      	movs	r2, #0
 800af90:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800af92:	4b1c      	ldr	r3, [pc, #112]	; (800b004 <MX_ADC1_Init+0xe4>)
 800af94:	2200      	movs	r2, #0
 800af96:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800af98:	4b1a      	ldr	r3, [pc, #104]	; (800b004 <MX_ADC1_Init+0xe4>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800afa0:	4818      	ldr	r0, [pc, #96]	; (800b004 <MX_ADC1_Init+0xe4>)
 800afa2:	f7f5 fddf 	bl	8000b64 <HAL_ADC_Init>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d001      	beq.n	800afb0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800afac:	f000 fcf6 	bl	800b99c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800afb0:	2300      	movs	r3, #0
 800afb2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800afb4:	f107 031c 	add.w	r3, r7, #28
 800afb8:	4619      	mov	r1, r3
 800afba:	4812      	ldr	r0, [pc, #72]	; (800b004 <MX_ADC1_Init+0xe4>)
 800afbc:	f7f6 fde0 	bl	8001b80 <HAL_ADCEx_MultiModeConfigChannel>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d001      	beq.n	800afca <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800afc6:	f000 fce9 	bl	800b99c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800afca:	4b10      	ldr	r3, [pc, #64]	; (800b00c <MX_ADC1_Init+0xec>)
 800afcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800afce:	2306      	movs	r3, #6
 800afd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800afd2:	2300      	movs	r3, #0
 800afd4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800afd6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800afda:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800afdc:	2304      	movs	r3, #4
 800afde:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800afe0:	2300      	movs	r3, #0
 800afe2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800afe4:	2300      	movs	r3, #0
 800afe6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800afe8:	463b      	mov	r3, r7
 800afea:	4619      	mov	r1, r3
 800afec:	4805      	ldr	r0, [pc, #20]	; (800b004 <MX_ADC1_Init+0xe4>)
 800afee:	f7f6 f83b 	bl	8001068 <HAL_ADC_ConfigChannel>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d001      	beq.n	800affc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800aff8:	f000 fcd0 	bl	800b99c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800affc:	bf00      	nop
 800affe:	3728      	adds	r7, #40	; 0x28
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	24000138 	.word	0x24000138
 800b008:	40022000 	.word	0x40022000
 800b00c:	08600004 	.word	0x08600004

0800b010 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b088      	sub	sp, #32
 800b014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800b016:	1d3b      	adds	r3, r7, #4
 800b018:	2200      	movs	r2, #0
 800b01a:	601a      	str	r2, [r3, #0]
 800b01c:	605a      	str	r2, [r3, #4]
 800b01e:	609a      	str	r2, [r3, #8]
 800b020:	60da      	str	r2, [r3, #12]
 800b022:	611a      	str	r2, [r3, #16]
 800b024:	615a      	str	r2, [r3, #20]
 800b026:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800b028:	4b29      	ldr	r3, [pc, #164]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b02a:	4a2a      	ldr	r2, [pc, #168]	; (800b0d4 <MX_ADC3_Init+0xc4>)
 800b02c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800b02e:	4b28      	ldr	r3, [pc, #160]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b030:	2200      	movs	r2, #0
 800b032:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800b034:	4b26      	ldr	r3, [pc, #152]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b036:	2200      	movs	r2, #0
 800b038:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b03a:	4b25      	ldr	r3, [pc, #148]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b03c:	2200      	movs	r2, #0
 800b03e:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b040:	4b23      	ldr	r3, [pc, #140]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b042:	2204      	movs	r2, #4
 800b044:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800b046:	4b22      	ldr	r3, [pc, #136]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b048:	2200      	movs	r2, #0
 800b04a:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800b04c:	4b20      	ldr	r3, [pc, #128]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b04e:	2200      	movs	r2, #0
 800b050:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800b052:	4b1f      	ldr	r3, [pc, #124]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b054:	2201      	movs	r2, #1
 800b056:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800b058:	4b1d      	ldr	r3, [pc, #116]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b05e:	4b1c      	ldr	r3, [pc, #112]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b060:	2200      	movs	r2, #0
 800b062:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b064:	4b1a      	ldr	r3, [pc, #104]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b066:	2200      	movs	r2, #0
 800b068:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800b06a:	4b19      	ldr	r3, [pc, #100]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800b070:	4b17      	ldr	r3, [pc, #92]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b072:	2200      	movs	r2, #0
 800b074:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800b076:	4b16      	ldr	r3, [pc, #88]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b078:	2200      	movs	r2, #0
 800b07a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800b07c:	4b14      	ldr	r3, [pc, #80]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800b084:	4812      	ldr	r0, [pc, #72]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b086:	f7f5 fd6d 	bl	8000b64 <HAL_ADC_Init>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 800b090:	f000 fc84 	bl	800b99c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800b094:	4b10      	ldr	r3, [pc, #64]	; (800b0d8 <MX_ADC3_Init+0xc8>)
 800b096:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b098:	2306      	movs	r3, #6
 800b09a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800b09c:	2300      	movs	r3, #0
 800b09e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800b0a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800b0a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800b0a6:	2304      	movs	r3, #4
 800b0a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800b0b2:	1d3b      	adds	r3, r7, #4
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	4806      	ldr	r0, [pc, #24]	; (800b0d0 <MX_ADC3_Init+0xc0>)
 800b0b8:	f7f5 ffd6 	bl	8001068 <HAL_ADC_ConfigChannel>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d001      	beq.n	800b0c6 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 800b0c2:	f000 fc6b 	bl	800b99c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800b0c6:	bf00      	nop
 800b0c8:	3720      	adds	r7, #32
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	2400019c 	.word	0x2400019c
 800b0d4:	58026000 	.word	0x58026000
 800b0d8:	04300002 	.word	0x04300002

0800b0dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b08c      	sub	sp, #48	; 0x30
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0e4:	f107 031c 	add.w	r3, r7, #28
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	605a      	str	r2, [r3, #4]
 800b0ee:	609a      	str	r2, [r3, #8]
 800b0f0:	60da      	str	r2, [r3, #12]
 800b0f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a46      	ldr	r2, [pc, #280]	; (800b214 <HAL_ADC_MspInit+0x138>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d15c      	bne.n	800b1b8 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800b0fe:	4a46      	ldr	r2, [pc, #280]	; (800b218 <HAL_ADC_MspInit+0x13c>)
 800b100:	4b45      	ldr	r3, [pc, #276]	; (800b218 <HAL_ADC_MspInit+0x13c>)
 800b102:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b106:	f043 0320 	orr.w	r3, r3, #32
 800b10a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b10e:	4b42      	ldr	r3, [pc, #264]	; (800b218 <HAL_ADC_MspInit+0x13c>)
 800b110:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b114:	f003 0320 	and.w	r3, r3, #32
 800b118:	61bb      	str	r3, [r7, #24]
 800b11a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800b11c:	4a3e      	ldr	r2, [pc, #248]	; (800b218 <HAL_ADC_MspInit+0x13c>)
 800b11e:	4b3e      	ldr	r3, [pc, #248]	; (800b218 <HAL_ADC_MspInit+0x13c>)
 800b120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b124:	f043 0320 	orr.w	r3, r3, #32
 800b128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b12c:	4b3a      	ldr	r3, [pc, #232]	; (800b218 <HAL_ADC_MspInit+0x13c>)
 800b12e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b132:	f003 0320 	and.w	r3, r3, #32
 800b136:	617b      	str	r3, [r7, #20]
 800b138:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b13a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b13e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b140:	2303      	movs	r3, #3
 800b142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b144:	2300      	movs	r3, #0
 800b146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b148:	f107 031c 	add.w	r3, r7, #28
 800b14c:	4619      	mov	r1, r3
 800b14e:	4833      	ldr	r0, [pc, #204]	; (800b21c <HAL_ADC_MspInit+0x140>)
 800b150:	f7f9 fe8e 	bl	8004e70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800b154:	4b32      	ldr	r3, [pc, #200]	; (800b220 <HAL_ADC_MspInit+0x144>)
 800b156:	4a33      	ldr	r2, [pc, #204]	; (800b224 <HAL_ADC_MspInit+0x148>)
 800b158:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800b15a:	4b31      	ldr	r3, [pc, #196]	; (800b220 <HAL_ADC_MspInit+0x144>)
 800b15c:	2209      	movs	r2, #9
 800b15e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b160:	4b2f      	ldr	r3, [pc, #188]	; (800b220 <HAL_ADC_MspInit+0x144>)
 800b162:	2200      	movs	r2, #0
 800b164:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800b166:	4b2e      	ldr	r3, [pc, #184]	; (800b220 <HAL_ADC_MspInit+0x144>)
 800b168:	2200      	movs	r2, #0
 800b16a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800b16c:	4b2c      	ldr	r3, [pc, #176]	; (800b220 <HAL_ADC_MspInit+0x144>)
 800b16e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b172:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b174:	4b2a      	ldr	r3, [pc, #168]	; (800b220 <HAL_ADC_MspInit+0x144>)
 800b176:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b17a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b17c:	4b28      	ldr	r3, [pc, #160]	; (800b220 <HAL_ADC_MspInit+0x144>)
 800b17e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b182:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800b184:	4b26      	ldr	r3, [pc, #152]	; (800b220 <HAL_ADC_MspInit+0x144>)
 800b186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b18a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800b18c:	4b24      	ldr	r3, [pc, #144]	; (800b220 <HAL_ADC_MspInit+0x144>)
 800b18e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800b192:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b194:	4b22      	ldr	r3, [pc, #136]	; (800b220 <HAL_ADC_MspInit+0x144>)
 800b196:	2200      	movs	r2, #0
 800b198:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800b19a:	4821      	ldr	r0, [pc, #132]	; (800b220 <HAL_ADC_MspInit+0x144>)
 800b19c:	f7f7 f82e 	bl	80021fc <HAL_DMA_Init>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <HAL_ADC_MspInit+0xce>
    {
      Error_Handler();
 800b1a6:	f000 fbf9 	bl	800b99c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4a1c      	ldr	r2, [pc, #112]	; (800b220 <HAL_ADC_MspInit+0x144>)
 800b1ae:	64da      	str	r2, [r3, #76]	; 0x4c
 800b1b0:	4a1b      	ldr	r2, [pc, #108]	; (800b220 <HAL_ADC_MspInit+0x144>)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800b1b6:	e028      	b.n	800b20a <HAL_ADC_MspInit+0x12e>
  else if(adcHandle->Instance==ADC3)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a1a      	ldr	r2, [pc, #104]	; (800b228 <HAL_ADC_MspInit+0x14c>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d123      	bne.n	800b20a <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800b1c2:	4a15      	ldr	r2, [pc, #84]	; (800b218 <HAL_ADC_MspInit+0x13c>)
 800b1c4:	4b14      	ldr	r3, [pc, #80]	; (800b218 <HAL_ADC_MspInit+0x13c>)
 800b1c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b1d2:	4b11      	ldr	r3, [pc, #68]	; (800b218 <HAL_ADC_MspInit+0x13c>)
 800b1d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b1dc:	613b      	str	r3, [r7, #16]
 800b1de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b1e0:	4a0d      	ldr	r2, [pc, #52]	; (800b218 <HAL_ADC_MspInit+0x13c>)
 800b1e2:	4b0d      	ldr	r3, [pc, #52]	; (800b218 <HAL_ADC_MspInit+0x13c>)
 800b1e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1e8:	f043 0304 	orr.w	r3, r3, #4
 800b1ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b1f0:	4b09      	ldr	r3, [pc, #36]	; (800b218 <HAL_ADC_MspInit+0x13c>)
 800b1f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1f6:	f003 0304 	and.w	r3, r3, #4
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800b1fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800b202:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800b206:	f7f5 faaf 	bl	8000768 <HAL_SYSCFG_AnalogSwitchConfig>
}
 800b20a:	bf00      	nop
 800b20c:	3730      	adds	r7, #48	; 0x30
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	40022000 	.word	0x40022000
 800b218:	58024400 	.word	0x58024400
 800b21c:	58021400 	.word	0x58021400
 800b220:	240002c4 	.word	0x240002c4
 800b224:	40020010 	.word	0x40020010
 800b228:	58026000 	.word	0x58026000

0800b22c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b08a      	sub	sp, #40	; 0x28
 800b230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800b232:	1d3b      	adds	r3, r7, #4
 800b234:	2224      	movs	r2, #36	; 0x24
 800b236:	2100      	movs	r1, #0
 800b238:	4618      	mov	r0, r3
 800b23a:	f001 fa45 	bl	800c6c8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800b23e:	4b17      	ldr	r3, [pc, #92]	; (800b29c <MX_DAC1_Init+0x70>)
 800b240:	4a17      	ldr	r2, [pc, #92]	; (800b2a0 <MX_DAC1_Init+0x74>)
 800b242:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800b244:	4815      	ldr	r0, [pc, #84]	; (800b29c <MX_DAC1_Init+0x70>)
 800b246:	f7f6 fe86 	bl	8001f56 <HAL_DAC_Init>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d001      	beq.n	800b254 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800b250:	f000 fba4 	bl	800b99c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800b254:	2300      	movs	r3, #0
 800b256:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800b258:	230a      	movs	r3, #10
 800b25a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800b25c:	2300      	movs	r3, #0
 800b25e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800b260:	2301      	movs	r3, #1
 800b262:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800b264:	2300      	movs	r3, #0
 800b266:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800b268:	1d3b      	adds	r3, r7, #4
 800b26a:	2200      	movs	r2, #0
 800b26c:	4619      	mov	r1, r3
 800b26e:	480b      	ldr	r0, [pc, #44]	; (800b29c <MX_DAC1_Init+0x70>)
 800b270:	f7f6 fe94 	bl	8001f9c <HAL_DAC_ConfigChannel>
 800b274:	4603      	mov	r3, r0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d001      	beq.n	800b27e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800b27a:	f000 fb8f 	bl	800b99c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800b27e:	1d3b      	adds	r3, r7, #4
 800b280:	2210      	movs	r2, #16
 800b282:	4619      	mov	r1, r3
 800b284:	4805      	ldr	r0, [pc, #20]	; (800b29c <MX_DAC1_Init+0x70>)
 800b286:	f7f6 fe89 	bl	8001f9c <HAL_DAC_ConfigChannel>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d001      	beq.n	800b294 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800b290:	f000 fb84 	bl	800b99c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800b294:	bf00      	nop
 800b296:	3728      	adds	r7, #40	; 0x28
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	24000358 	.word	0x24000358
 800b2a0:	40007400 	.word	0x40007400

0800b2a4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b08a      	sub	sp, #40	; 0x28
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2ac:	f107 0314 	add.w	r3, r7, #20
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	601a      	str	r2, [r3, #0]
 800b2b4:	605a      	str	r2, [r3, #4]
 800b2b6:	609a      	str	r2, [r3, #8]
 800b2b8:	60da      	str	r2, [r3, #12]
 800b2ba:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a18      	ldr	r2, [pc, #96]	; (800b324 <HAL_DAC_MspInit+0x80>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d129      	bne.n	800b31a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800b2c6:	4a18      	ldr	r2, [pc, #96]	; (800b328 <HAL_DAC_MspInit+0x84>)
 800b2c8:	4b17      	ldr	r3, [pc, #92]	; (800b328 <HAL_DAC_MspInit+0x84>)
 800b2ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b2ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800b2d6:	4b14      	ldr	r3, [pc, #80]	; (800b328 <HAL_DAC_MspInit+0x84>)
 800b2d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b2dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2e0:	613b      	str	r3, [r7, #16]
 800b2e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2e4:	4a10      	ldr	r2, [pc, #64]	; (800b328 <HAL_DAC_MspInit+0x84>)
 800b2e6:	4b10      	ldr	r3, [pc, #64]	; (800b328 <HAL_DAC_MspInit+0x84>)
 800b2e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b2ec:	f043 0301 	orr.w	r3, r3, #1
 800b2f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b2f4:	4b0c      	ldr	r3, [pc, #48]	; (800b328 <HAL_DAC_MspInit+0x84>)
 800b2f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b2fa:	f003 0301 	and.w	r3, r3, #1
 800b2fe:	60fb      	str	r3, [r7, #12]
 800b300:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b302:	2330      	movs	r3, #48	; 0x30
 800b304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b306:	2303      	movs	r3, #3
 800b308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b30a:	2300      	movs	r3, #0
 800b30c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b30e:	f107 0314 	add.w	r3, r7, #20
 800b312:	4619      	mov	r1, r3
 800b314:	4805      	ldr	r0, [pc, #20]	; (800b32c <HAL_DAC_MspInit+0x88>)
 800b316:	f7f9 fdab 	bl	8004e70 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800b31a:	bf00      	nop
 800b31c:	3728      	adds	r7, #40	; 0x28
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	40007400 	.word	0x40007400
 800b328:	58024400 	.word	0x58024400
 800b32c:	58020000 	.word	0x58020000

0800b330 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b336:	4a15      	ldr	r2, [pc, #84]	; (800b38c <MX_DMA_Init+0x5c>)
 800b338:	4b14      	ldr	r3, [pc, #80]	; (800b38c <MX_DMA_Init+0x5c>)
 800b33a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b33e:	f043 0301 	orr.w	r3, r3, #1
 800b342:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b346:	4b11      	ldr	r3, [pc, #68]	; (800b38c <MX_DMA_Init+0x5c>)
 800b348:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b34c:	f003 0301 	and.w	r3, r3, #1
 800b350:	607b      	str	r3, [r7, #4]
 800b352:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
 800b354:	2200      	movs	r2, #0
 800b356:	2102      	movs	r1, #2
 800b358:	200b      	movs	r0, #11
 800b35a:	f7f6 fdc8 	bl	8001eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800b35e:	200b      	movs	r0, #11
 800b360:	f7f6 fddf 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800b364:	2200      	movs	r2, #0
 800b366:	2100      	movs	r1, #0
 800b368:	200c      	movs	r0, #12
 800b36a:	f7f6 fdc0 	bl	8001eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800b36e:	200c      	movs	r0, #12
 800b370:	f7f6 fdd7 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 0);
 800b374:	2200      	movs	r2, #0
 800b376:	2101      	movs	r1, #1
 800b378:	200d      	movs	r0, #13
 800b37a:	f7f6 fdb8 	bl	8001eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800b37e:	200d      	movs	r0, #13
 800b380:	f7f6 fdcf 	bl	8001f22 <HAL_NVIC_EnableIRQ>

}
 800b384:	bf00      	nop
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	58024400 	.word	0x58024400

0800b390 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b08e      	sub	sp, #56	; 0x38
 800b394:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b39a:	2200      	movs	r2, #0
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	605a      	str	r2, [r3, #4]
 800b3a0:	609a      	str	r2, [r3, #8]
 800b3a2:	60da      	str	r2, [r3, #12]
 800b3a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b3a6:	4a92      	ldr	r2, [pc, #584]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b3a8:	4b91      	ldr	r3, [pc, #580]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b3aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3ae:	f043 0310 	orr.w	r3, r3, #16
 800b3b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b3b6:	4b8e      	ldr	r3, [pc, #568]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b3b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3bc:	f003 0310 	and.w	r3, r3, #16
 800b3c0:	623b      	str	r3, [r7, #32]
 800b3c2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b3c4:	4a8a      	ldr	r2, [pc, #552]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b3c6:	4b8a      	ldr	r3, [pc, #552]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b3c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3cc:	f043 0304 	orr.w	r3, r3, #4
 800b3d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b3d4:	4b86      	ldr	r3, [pc, #536]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b3d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3da:	f003 0304 	and.w	r3, r3, #4
 800b3de:	61fb      	str	r3, [r7, #28]
 800b3e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b3e2:	4a83      	ldr	r2, [pc, #524]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b3e4:	4b82      	ldr	r3, [pc, #520]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b3e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3ea:	f043 0320 	orr.w	r3, r3, #32
 800b3ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b3f2:	4b7f      	ldr	r3, [pc, #508]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b3f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3f8:	f003 0320 	and.w	r3, r3, #32
 800b3fc:	61bb      	str	r3, [r7, #24]
 800b3fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b400:	4a7b      	ldr	r2, [pc, #492]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b402:	4b7b      	ldr	r3, [pc, #492]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b40c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b410:	4b77      	ldr	r3, [pc, #476]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b41a:	617b      	str	r3, [r7, #20]
 800b41c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b41e:	4a74      	ldr	r2, [pc, #464]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b420:	4b73      	ldr	r3, [pc, #460]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b426:	f043 0301 	orr.w	r3, r3, #1
 800b42a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b42e:	4b70      	ldr	r3, [pc, #448]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b434:	f003 0301 	and.w	r3, r3, #1
 800b438:	613b      	str	r3, [r7, #16]
 800b43a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b43c:	4a6c      	ldr	r2, [pc, #432]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b43e:	4b6c      	ldr	r3, [pc, #432]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b444:	f043 0302 	orr.w	r3, r3, #2
 800b448:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b44c:	4b68      	ldr	r3, [pc, #416]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b44e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b452:	f003 0302 	and.w	r3, r3, #2
 800b456:	60fb      	str	r3, [r7, #12]
 800b458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b45a:	4a65      	ldr	r2, [pc, #404]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b45c:	4b64      	ldr	r3, [pc, #400]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b45e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b46a:	4b61      	ldr	r3, [pc, #388]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b46c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b474:	60bb      	str	r3, [r7, #8]
 800b476:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b478:	4a5d      	ldr	r2, [pc, #372]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b47a:	4b5d      	ldr	r3, [pc, #372]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b47c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b480:	f043 0308 	orr.w	r3, r3, #8
 800b484:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b488:	4b59      	ldr	r3, [pc, #356]	; (800b5f0 <MX_GPIO_Init+0x260>)
 800b48a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b48e:	f003 0308 	and.w	r3, r3, #8
 800b492:	607b      	str	r3, [r7, #4]
 800b494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800b496:	2200      	movs	r2, #0
 800b498:	2102      	movs	r1, #2
 800b49a:	4856      	ldr	r0, [pc, #344]	; (800b5f4 <MX_GPIO_Init+0x264>)
 800b49c:	f7f9 fe98 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	4854      	ldr	r0, [pc, #336]	; (800b5f8 <MX_GPIO_Init+0x268>)
 800b4a6:	f7f9 fe93 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b4b0:	4852      	ldr	r0, [pc, #328]	; (800b5fc <MX_GPIO_Init+0x26c>)
 800b4b2:	f7f9 fe8d 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	2110      	movs	r1, #16
 800b4ba:	484e      	ldr	r0, [pc, #312]	; (800b5f4 <MX_GPIO_Init+0x264>)
 800b4bc:	f7f9 fe88 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE11 PE13 PE15 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800b4c0:	f64a 33ff 	movw	r3, #44031	; 0xabff
 800b4c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b4ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4849      	ldr	r0, [pc, #292]	; (800b5fc <MX_GPIO_Init+0x26c>)
 800b4d6:	f7f9 fccb 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800b4da:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800b4de:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b4e0:	2303      	movs	r3, #3
 800b4e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b4e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	4844      	ldr	r0, [pc, #272]	; (800b600 <MX_GPIO_Init+0x270>)
 800b4f0:	f7f9 fcbe 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF12
                           PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800b4f4:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800b4f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4fe:	2300      	movs	r3, #0
 800b500:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b506:	4619      	mov	r1, r3
 800b508:	483e      	ldr	r0, [pc, #248]	; (800b604 <MX_GPIO_Init+0x274>)
 800b50a:	f7f9 fcb1 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 800b50e:	f649 73ce 	movw	r3, #40910	; 0x9fce
 800b512:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b514:	2303      	movs	r3, #3
 800b516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b518:	2300      	movs	r3, #0
 800b51a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b51c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b520:	4619      	mov	r1, r3
 800b522:	4839      	ldr	r0, [pc, #228]	; (800b608 <MX_GPIO_Init+0x278>)
 800b524:	f7f9 fca4 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800b528:	f64f 73c5 	movw	r3, #65477	; 0xffc5
 800b52c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b52e:	2303      	movs	r3, #3
 800b530:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b532:	2300      	movs	r3, #0
 800b534:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b53a:	4619      	mov	r1, r3
 800b53c:	482d      	ldr	r0, [pc, #180]	; (800b5f4 <MX_GPIO_Init+0x264>)
 800b53e:	f7f9 fc97 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b542:	2302      	movs	r3, #2
 800b544:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b546:	2301      	movs	r3, #1
 800b548:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b54a:	2302      	movs	r3, #2
 800b54c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b54e:	2303      	movs	r3, #3
 800b550:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b556:	4619      	mov	r1, r3
 800b558:	4826      	ldr	r0, [pc, #152]	; (800b5f4 <MX_GPIO_Init+0x264>)
 800b55a:	f7f9 fc89 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800b55e:	2301      	movs	r3, #1
 800b560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b562:	2301      	movs	r3, #1
 800b564:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b566:	2300      	movs	r3, #0
 800b568:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b56a:	2300      	movs	r3, #0
 800b56c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b56e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b572:	4619      	mov	r1, r3
 800b574:	4820      	ldr	r0, [pc, #128]	; (800b5f8 <MX_GPIO_Init+0x268>)
 800b576:	f7f9 fc7b 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG2 PG3 PG4
                           PG5 PG6 PG7 PG8
                           PG9 PG10 PG11 PG12
                           PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800b57a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800b57e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b580:	2303      	movs	r3, #3
 800b582:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b584:	2300      	movs	r3, #0
 800b586:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b58c:	4619      	mov	r1, r3
 800b58e:	481a      	ldr	r0, [pc, #104]	; (800b5f8 <MX_GPIO_Init+0x268>)
 800b590:	f7f9 fc6e 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b59a:	2301      	movs	r3, #1
 800b59c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b5a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	4813      	ldr	r0, [pc, #76]	; (800b5fc <MX_GPIO_Init+0x26c>)
 800b5ae:	f7f9 fc5f 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800b5b2:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800b5b6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b5c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	4811      	ldr	r0, [pc, #68]	; (800b60c <MX_GPIO_Init+0x27c>)
 800b5c8:	f7f9 fc52 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b5cc:	2310      	movs	r3, #16
 800b5ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b5d8:	2302      	movs	r3, #2
 800b5da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b5dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4804      	ldr	r0, [pc, #16]	; (800b5f4 <MX_GPIO_Init+0x264>)
 800b5e4:	f7f9 fc44 	bl	8004e70 <HAL_GPIO_Init>

}
 800b5e8:	bf00      	nop
 800b5ea:	3738      	adds	r7, #56	; 0x38
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	58024400 	.word	0x58024400
 800b5f4:	58020400 	.word	0x58020400
 800b5f8:	58021800 	.word	0x58021800
 800b5fc:	58021000 	.word	0x58021000
 800b600:	58020800 	.word	0x58020800
 800b604:	58021400 	.word	0x58021400
 800b608:	58020000 	.word	0x58020000
 800b60c:	58020c00 	.word	0x58020c00

0800b610 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b610:	b590      	push	{r4, r7, lr}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
		PT_Anf =PT_End;
 800b618:	4b41      	ldr	r3, [pc, #260]	; (800b720 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800b61a:	cb18      	ldmia	r3, {r3, r4}
 800b61c:	4a41      	ldr	r2, [pc, #260]	; (800b724 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800b61e:	e882 0018 	stmia.w	r2, {r3, r4}
		adc_value =(float)ADCBuf[0];
 800b622:	4b41      	ldr	r3, [pc, #260]	; (800b728 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	ee07 3a90 	vmov	s15, r3
 800b62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b62e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b632:	ee17 2a90 	vmov	r2, s15
 800b636:	4b3d      	ldr	r3, [pc, #244]	; (800b72c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800b638:	601a      	str	r2, [r3, #0]
		volt_value=3.3f*((float)(adc_value)/65536); // single ended mode
 800b63a:	4b3c      	ldr	r3, [pc, #240]	; (800b72c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	ee07 3a90 	vmov	s15, r3
 800b642:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b646:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800b730 <HAL_TIM_PeriodElapsedCallback+0x120>
 800b64a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b64e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800b734 <HAL_TIM_PeriodElapsedCallback+0x124>
 800b652:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b656:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b65a:	4b37      	ldr	r3, [pc, #220]	; (800b738 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800b65c:	ed83 7b00 	vstr	d7, [r3]
		PID_Calc(pPID1,PIDInputOption, volt_value,LockInOutput);
 800b660:	4b36      	ldr	r3, [pc, #216]	; (800b73c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	4b36      	ldr	r3, [pc, #216]	; (800b740 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800b666:	7819      	ldrb	r1, [r3, #0]
 800b668:	4b33      	ldr	r3, [pc, #204]	; (800b738 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800b66a:	ed93 7b00 	vldr	d7, [r3]
 800b66e:	4b35      	ldr	r3, [pc, #212]	; (800b744 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800b670:	ed93 6b00 	vldr	d6, [r3]
 800b674:	eeb0 1b46 	vmov.f64	d1, d6
 800b678:	eeb0 0b47 	vmov.f64	d0, d7
 800b67c:	4610      	mov	r0, r2
 800b67e:	f000 fab7 	bl	800bbf0 <PID_Calc>
		DACoutput1 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG12BIT);
 800b682:	4b31      	ldr	r3, [pc, #196]	; (800b748 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800b684:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 800b688:	ed9f 6b23 	vldr	d6, [pc, #140]	; 800b718 <HAL_TIM_PeriodElapsedCallback+0x108>
 800b68c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b690:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b694:	edc7 7a00 	vstr	s15, [r7]
 800b698:	883b      	ldrh	r3, [r7, #0]
 800b69a:	b29a      	uxth	r2, r3
 800b69c:	4b2b      	ldr	r3, [pc, #172]	; (800b74c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800b69e:	801a      	strh	r2, [r3, #0]
		DACoutput2 = (uint16_t)(InstancePID1.outvalue*VOLT2DIG12BIT);
 800b6a0:	4b29      	ldr	r3, [pc, #164]	; (800b748 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800b6a2:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 800b6a6:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800b718 <HAL_TIM_PeriodElapsedCallback+0x108>
 800b6aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b6ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b6b2:	edc7 7a00 	vstr	s15, [r7]
 800b6b6:	883b      	ldrh	r3, [r7, #0]
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	4b25      	ldr	r3, [pc, #148]	; (800b750 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800b6bc:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_0);
 800b6be:	2101      	movs	r1, #1
 800b6c0:	4824      	ldr	r0, [pc, #144]	; (800b754 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800b6c2:	f7f9 fd9e 	bl	8005202 <HAL_GPIO_TogglePin>
			li=0;
			pData = 0xFFFF;

		}*/
		//pData = (uint16_t)ADCBuf[0];
		pData =(uint16_t)0xFFFF;
 800b6c6:	4b24      	ldr	r3, [pc, #144]	; (800b758 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800b6c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6cc:	801a      	strh	r2, [r3, #0]
		//itoa(pData, hexString, 16);
		__IO uint16_t *ptxdr_16bits = (uint16_t*)&SPI1->TXDR; // for 16-bit-write
 800b6ce:	4b23      	ldr	r3, [pc, #140]	; (800b75c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800b6d0:	60fb      	str	r3, [r7, #12]
		SPI1->CR1 |= SPI_CR1_SPE_Msk;    // enable SPI
 800b6d2:	4a23      	ldr	r2, [pc, #140]	; (800b760 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800b6d4:	4b22      	ldr	r3, [pc, #136]	; (800b760 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f043 0301 	orr.w	r3, r3, #1
 800b6dc:	6013      	str	r3, [r2, #0]
		SPI1->CR1 |= SPI_CR1_CSTART_Msk; // master transfer start
 800b6de:	4a20      	ldr	r2, [pc, #128]	; (800b760 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800b6e0:	4b1f      	ldr	r3, [pc, #124]	; (800b760 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6e8:	6013      	str	r3, [r2, #0]
		while (1)
		  {
		         GPIOB->BSRR = GPIO_PIN_4 << 16; // Reset
 800b6ea:	4b1e      	ldr	r3, [pc, #120]	; (800b764 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800b6ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b6f0:	619a      	str	r2, [r3, #24]
		         *ptxdr_16bits = pData++;
 800b6f2:	4b19      	ldr	r3, [pc, #100]	; (800b758 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800b6f4:	881b      	ldrh	r3, [r3, #0]
 800b6f6:	1c5a      	adds	r2, r3, #1
 800b6f8:	b291      	uxth	r1, r2
 800b6fa:	4a17      	ldr	r2, [pc, #92]	; (800b758 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800b6fc:	8011      	strh	r1, [r2, #0]
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	8013      	strh	r3, [r2, #0]
		         while( !(SPI1->SR & SPI_SR_TXC_Msk));  // check if FiFo transmission complete
 800b702:	bf00      	nop
 800b704:	4b16      	ldr	r3, [pc, #88]	; (800b760 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800b706:	695b      	ldr	r3, [r3, #20]
 800b708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d0f9      	beq.n	800b704 <HAL_TIM_PeriodElapsedCallback+0xf4>
		         GPIOB->BSRR = GPIO_PIN_4; // Set
 800b710:	4b14      	ldr	r3, [pc, #80]	; (800b764 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800b712:	2210      	movs	r2, #16
 800b714:	619a      	str	r2, [r3, #24]
		         GPIOB->BSRR = GPIO_PIN_4 << 16; // Reset
 800b716:	e7e8      	b.n	800b6ea <HAL_TIM_PeriodElapsedCallback+0xda>
 800b718:	9999999a 	.word	0x9999999a
 800b71c:	40936399 	.word	0x40936399
 800b720:	24000048 	.word	0x24000048
 800b724:	24000040 	.word	0x24000040
 800b728:	240003a0 	.word	0x240003a0
 800b72c:	24000034 	.word	0x24000034
 800b730:	47800000 	.word	0x47800000
 800b734:	40533333 	.word	0x40533333
 800b738:	24000038 	.word	0x24000038
 800b73c:	24000008 	.word	0x24000008
 800b740:	24000005 	.word	0x24000005
 800b744:	24000050 	.word	0x24000050
 800b748:	24000200 	.word	0x24000200
 800b74c:	2400039c 	.word	0x2400039c
 800b750:	240003b8 	.word	0x240003b8
 800b754:	58021800 	.word	0x58021800
 800b758:	240003a8 	.word	0x240003a8
 800b75c:	40013020 	.word	0x40013020
 800b760:	40013000 	.word	0x40013000
 800b764:	58020400 	.word	0x58020400

0800b768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b768:	b598      	push	{r3, r4, r7, lr}
 800b76a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b76c:	f7f4 ff3c 	bl	80005e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b770:	f000 f85a 	bl	800b828 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800b774:	f000 f8dc 	bl	800b930 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b778:	f7ff fe0a 	bl	800b390 <MX_GPIO_Init>
  MX_DMA_Init();
 800b77c:	f7ff fdd8 	bl	800b330 <MX_DMA_Init>
  MX_DAC1_Init();
 800b780:	f7ff fd54 	bl	800b22c <MX_DAC1_Init>
  MX_ADC1_Init();
 800b784:	f7ff fbcc 	bl	800af20 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800b788:	f000 fe32 	bl	800c3f0 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 800b78c:	f7ff fc40 	bl	800b010 <MX_ADC3_Init>
  MX_TIM2_Init();
 800b790:	f000 fd5a 	bl	800c248 <MX_TIM2_Init>
  MX_SPI1_Init();
 800b794:	f000 fb06 	bl	800bda4 <MX_SPI1_Init>
  MX_SPI4_Init();
 800b798:	f000 fb5a 	bl	800be50 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800b79c:	4a1a      	ldr	r2, [pc, #104]	; (800b808 <main+0xa0>)
 800b79e:	4b1a      	ldr	r3, [pc, #104]	; (800b808 <main+0xa0>)
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b7a6:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= 1;
 800b7a8:	4a18      	ldr	r2, [pc, #96]	; (800b80c <main+0xa4>)
 800b7aa:	4b18      	ldr	r3, [pc, #96]	; (800b80c <main+0xa4>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f043 0301 	orr.w	r3, r3, #1
 800b7b2:	6013      	str	r3, [r2, #0]
  Tim2ARR=200e6 / CTRLFREQUENCY-1;
 800b7b4:	4b16      	ldr	r3, [pc, #88]	; (800b810 <main+0xa8>)
 800b7b6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800b7ba:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_PRESCALER(&htim2, TIM2PSC);
 800b7bc:	4b15      	ldr	r3, [pc, #84]	; (800b814 <main+0xac>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_TIM_SET_AUTORELOAD(&htim2,  Tim2ARR);
 800b7c4:	4b13      	ldr	r3, [pc, #76]	; (800b814 <main+0xac>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a11      	ldr	r2, [pc, #68]	; (800b810 <main+0xa8>)
 800b7ca:	6812      	ldr	r2, [r2, #0]
 800b7cc:	62da      	str	r2, [r3, #44]	; 0x2c
 800b7ce:	4b10      	ldr	r3, [pc, #64]	; (800b810 <main+0xa8>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a10      	ldr	r2, [pc, #64]	; (800b814 <main+0xac>)
 800b7d4:	60d3      	str	r3, [r2, #12]
  paramFreq = CTRLFREQUENCY;
 800b7d6:	4a10      	ldr	r2, [pc, #64]	; (800b818 <main+0xb0>)
 800b7d8:	a409      	add	r4, pc, #36	; (adr r4, 800b800 <main+0x98>)
 800b7da:	cc18      	ldmia	r4, {r3, r4}
 800b7dc:	e882 0018 	stmia.w	r2, {r3, r4}
  PID_vInit(pPID1);
 800b7e0:	4b0e      	ldr	r3, [pc, #56]	; (800b81c <main+0xb4>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f000 f8fb 	bl	800b9e0 <PID_vInit>
  /* USER CODE BEGIN 1 */
	 // HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim2);
 800b7ea:	480a      	ldr	r0, [pc, #40]	; (800b814 <main+0xac>)
 800b7ec:	f7fc ff36 	bl	800865c <HAL_TIM_Base_Start_IT>
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
	      /* Start DAC */
  HAL_ADC_Start_DMA(&hadc1,ADCBuf,2);
 800b7f0:	2202      	movs	r2, #2
 800b7f2:	490b      	ldr	r1, [pc, #44]	; (800b820 <main+0xb8>)
 800b7f4:	480b      	ldr	r0, [pc, #44]	; (800b824 <main+0xbc>)
 800b7f6:	f7f5 fb55 	bl	8000ea4 <HAL_ADC_Start_DMA>
 // HAL_SPI_Transmit_DMA(&hspi1, pData,2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800b7fa:	e7fe      	b.n	800b7fa <main+0x92>
 800b7fc:	f3af 8000 	nop.w
 800b800:	00000000 	.word	0x00000000
 800b804:	40c38800 	.word	0x40c38800
 800b808:	e000edf0 	.word	0xe000edf0
 800b80c:	e0001000 	.word	0xe0001000
 800b810:	240003c0 	.word	0x240003c0
 800b814:	240004d8 	.word	0x240004d8
 800b818:	240003b0 	.word	0x240003b0
 800b81c:	24000008 	.word	0x24000008
 800b820:	240003a0 	.word	0x240003a0
 800b824:	24000138 	.word	0x24000138

0800b828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b09c      	sub	sp, #112	; 0x70
 800b82c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b82e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b832:	224c      	movs	r2, #76	; 0x4c
 800b834:	2100      	movs	r1, #0
 800b836:	4618      	mov	r0, r3
 800b838:	f000 ff46 	bl	800c6c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b83c:	1d3b      	adds	r3, r7, #4
 800b83e:	2220      	movs	r2, #32
 800b840:	2100      	movs	r1, #0
 800b842:	4618      	mov	r0, r3
 800b844:	f000 ff40 	bl	800c6c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800b848:	2002      	movs	r0, #2
 800b84a:	f7f9 fcf5 	bl	8005238 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b84e:	2300      	movs	r3, #0
 800b850:	603b      	str	r3, [r7, #0]
 800b852:	4a34      	ldr	r2, [pc, #208]	; (800b924 <SystemClock_Config+0xfc>)
 800b854:	4b33      	ldr	r3, [pc, #204]	; (800b924 <SystemClock_Config+0xfc>)
 800b856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b858:	f023 0301 	bic.w	r3, r3, #1
 800b85c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b85e:	4b31      	ldr	r3, [pc, #196]	; (800b924 <SystemClock_Config+0xfc>)
 800b860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b862:	f003 0301 	and.w	r3, r3, #1
 800b866:	603b      	str	r3, [r7, #0]
 800b868:	4a2f      	ldr	r2, [pc, #188]	; (800b928 <SystemClock_Config+0x100>)
 800b86a:	4b2f      	ldr	r3, [pc, #188]	; (800b928 <SystemClock_Config+0x100>)
 800b86c:	699b      	ldr	r3, [r3, #24]
 800b86e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b872:	6193      	str	r3, [r2, #24]
 800b874:	4b2c      	ldr	r3, [pc, #176]	; (800b928 <SystemClock_Config+0x100>)
 800b876:	699b      	ldr	r3, [r3, #24]
 800b878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b87c:	603b      	str	r3, [r7, #0]
 800b87e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800b880:	bf00      	nop
 800b882:	4b29      	ldr	r3, [pc, #164]	; (800b928 <SystemClock_Config+0x100>)
 800b884:	699b      	ldr	r3, [r3, #24]
 800b886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b88a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b88e:	d1f8      	bne.n	800b882 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800b890:	4a26      	ldr	r2, [pc, #152]	; (800b92c <SystemClock_Config+0x104>)
 800b892:	4b26      	ldr	r3, [pc, #152]	; (800b92c <SystemClock_Config+0x104>)
 800b894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b896:	f023 0303 	bic.w	r3, r3, #3
 800b89a:	f043 0302 	orr.w	r3, r3, #2
 800b89e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b8a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b8a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b8ae:	2302      	movs	r3, #2
 800b8b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 800b8b6:	2364      	movs	r3, #100	; 0x64
 800b8b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800b8be:	2302      	movs	r3, #2
 800b8c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800b8c2:	2302      	movs	r3, #2
 800b8c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800b8c6:	230c      	movs	r3, #12
 800b8c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b8d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7f9 fce8 	bl	80052ac <HAL_RCC_OscConfig>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800b8e2:	f000 f85b 	bl	800b99c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b8e6:	233f      	movs	r3, #63	; 0x3f
 800b8e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800b8f2:	2308      	movs	r3, #8
 800b8f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800b8f6:	2340      	movs	r3, #64	; 0x40
 800b8f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800b8fa:	2340      	movs	r3, #64	; 0x40
 800b8fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800b8fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b902:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800b904:	2340      	movs	r3, #64	; 0x40
 800b906:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800b908:	1d3b      	adds	r3, r7, #4
 800b90a:	2102      	movs	r1, #2
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7fa f8dd 	bl	8005acc <HAL_RCC_ClockConfig>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d001      	beq.n	800b91c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800b918:	f000 f840 	bl	800b99c <Error_Handler>
  }
}
 800b91c:	bf00      	nop
 800b91e:	3770      	adds	r7, #112	; 0x70
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	58000400 	.word	0x58000400
 800b928:	58024800 	.word	0x58024800
 800b92c:	58024400 	.word	0x58024400

0800b930 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b0b0      	sub	sp, #192	; 0xc0
 800b934:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b936:	1d3b      	adds	r3, r7, #4
 800b938:	22bc      	movs	r2, #188	; 0xbc
 800b93a:	2100      	movs	r1, #0
 800b93c:	4618      	mov	r0, r3
 800b93e:	f000 fec3 	bl	800c6c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI1
 800b942:	4b15      	ldr	r3, [pc, #84]	; (800b998 <PeriphCommonClock_Config+0x68>)
 800b944:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM;
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 800b946:	2302      	movs	r3, #2
 800b948:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 54;
 800b94a:	2336      	movs	r3, #54	; 0x36
 800b94c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800b94e:	2302      	movs	r3, #2
 800b950:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800b952:	2302      	movs	r3, #2
 800b954:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 6;
 800b956:	2306      	movs	r3, #6
 800b958:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800b95a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b95e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800b960:	2300      	movs	r3, #0
 800b962:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800b964:	2300      	movs	r3, #0
 800b966:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800b968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b96c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800b96e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b972:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800b976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b97a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b97e:	1d3b      	adds	r3, r7, #4
 800b980:	4618      	mov	r0, r3
 800b982:	f7fa fc27 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d001      	beq.n	800b990 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 800b98c:	f000 f806 	bl	800b99c <Error_Handler>
  }
}
 800b990:	bf00      	nop
 800b992:	37c0      	adds	r7, #192	; 0xc0
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	40081000 	.word	0x40081000

0800b99c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b99c:	b480      	push	{r7}
 800b99e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b9a0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b9a2:	e7fe      	b.n	800b9a2 <Error_Handler+0x6>

0800b9a4 <PIDInputSWitch>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

float PIDInputSWitch(uint8_t PIDInputOption, float ADCvalue,float LockIn)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b087      	sub	sp, #28
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	ed87 0a02 	vstr	s0, [r7, #8]
 800b9b0:	edc7 0a01 	vstr	s1, [r7, #4]
 800b9b4:	73fb      	strb	r3, [r7, #15]
	 float PIDInput;
	 if (PIDInputOption == 0)
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d102      	bne.n	800b9c2 <PIDInputSWitch+0x1e>
			 {
	 	 	 	 PIDInput=LockIn;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	617b      	str	r3, [r7, #20]
 800b9c0:	e001      	b.n	800b9c6 <PIDInputSWitch+0x22>
			 }
	else
			{
				PIDInput =ADCvalue;
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	617b      	str	r3, [r7, #20]
			}
	 return(PIDInput);
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	ee07 3a90 	vmov	s15, r3
}
 800b9cc:	eeb0 0a67 	vmov.f32	s0, s15
 800b9d0:	371c      	adds	r7, #28
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	0000      	movs	r0, r0
 800b9dc:	0000      	movs	r0, r0
	...

0800b9e0 <PID_vInit>:
void PID_vInit(tPID* pPID)
{                                          ///< Zeiger auf Reglerstruktur
 800b9e0:	b490      	push	{r4, r7}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
	pPID->_Ts 				= 		1/CTRLFREQUENCY;
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	a47d      	add	r4, pc, #500	; (adr r4, 800bbe0 <PID_vInit+0x200>)
 800b9ec:	cc18      	ldmia	r4, {r3, r4}
 800b9ee:	e882 0018 	stmia.w	r2, {r3, r4}
	pPID-> _Kp				= 		0.2;
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	a47c      	add	r4, pc, #496	; (adr r4, 800bbe8 <PID_vInit+0x208>)
 800b9f6:	cc18      	ldmia	r4, {r3, r4}
 800b9f8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	pPID-> _Ki				= 		0;
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	f04f 0300 	mov.w	r3, #0
 800ba02:	f04f 0400 	mov.w	r4, #0
 800ba06:	e9c2 3404 	strd	r3, r4, [r2, #16]
	pPID-> _Kd				= 		0.0;
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	f04f 0300 	mov.w	r3, #0
 800ba10:	f04f 0400 	mov.w	r4, #0
 800ba14:	e9c2 3406 	strd	r3, r4, [r2, #24]
	pPID-> _max				= 		3;
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	f04f 0300 	mov.w	r3, #0
 800ba1e:	4c6c      	ldr	r4, [pc, #432]	; (800bbd0 <PID_vInit+0x1f0>)
 800ba20:	e9c2 3408 	strd	r3, r4, [r2, #32]
	pPID-> _min				= 		-3;
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	f04f 0300 	mov.w	r3, #0
 800ba2a:	4c6a      	ldr	r4, [pc, #424]	; (800bbd4 <PID_vInit+0x1f4>)
 800ba2c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	pPID-> _Kaw				= 		0.0;
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	f04f 0300 	mov.w	r3, #0
 800ba36:	f04f 0400 	mov.w	r4, #0
 800ba3a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	pPID-> _EnKc			= 		1;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2201      	movs	r2, #1
 800ba42:	639a      	str	r2, [r3, #56]	; 0x38
	pPID-> _fc				= 		10;
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	f04f 0300 	mov.w	r3, #0
 800ba4a:	4c63      	ldr	r4, [pc, #396]	; (800bbd8 <PID_vInit+0x1f8>)
 800ba4c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
    pPID-> _PIDHold			= 		0.0;
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	f04f 0300 	mov.w	r3, #0
 800ba56:	f04f 0400 	mov.w	r4, #0
 800ba5a:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pPID->error             =        0;
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	f04f 0300 	mov.w	r3, #0
 800ba64:	f04f 0400 	mov.w	r4, #0
 800ba68:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	pPID->error_1lag        =        0;
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	f04f 0300 	mov.w	r3, #0
 800ba72:	f04f 0400 	mov.w	r4, #0
 800ba76:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pPID->error_2lag        =        0;
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	f04f 0300 	mov.w	r3, #0
 800ba80:	f04f 0400 	mov.w	r4, #0
 800ba84:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pPID->error_AnWi        =        0;
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	f04f 0300 	mov.w	r3, #0
 800ba8e:	f04f 0400 	mov.w	r4, #0
 800ba92:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pPID->preout            =        0;
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	f04f 0300 	mov.w	r3, #0
 800ba9c:	f04f 0400 	mov.w	r4, #0
 800baa0:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	pPID->_kt               =        -1;
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	f04f 0300 	mov.w	r3, #0
 800baaa:	4c4c      	ldr	r4, [pc, #304]	; (800bbdc <PID_vInit+0x1fc>)
 800baac:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pPID->En                =        1.0;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2201      	movs	r2, #1
 800bab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pPID->ref               =       0.0;
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	f04f 0300 	mov.w	r3, #0
 800babe:	f04f 0400 	mov.w	r4, #0
 800bac2:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	pPID->a0                =        0.0;
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	f04f 0300 	mov.w	r3, #0
 800bacc:	f04f 0400 	mov.w	r4, #0
 800bad0:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	pPID->a1 				= 		0.0;
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	f04f 0300 	mov.w	r3, #0
 800bada:	f04f 0400 	mov.w	r4, #0
 800bade:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	pPID->a2      			= 		0.0;
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	f04f 0300 	mov.w	r3, #0
 800bae8:	f04f 0400 	mov.w	r4, #0
 800baec:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	pPID->aw				=		0.0;
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	f04f 0300 	mov.w	r3, #0
 800baf6:	f04f 0400 	mov.w	r4, #0
 800bafa:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	pPID->omega 			=		0;
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	f04f 0300 	mov.w	r3, #0
 800bb04:	f04f 0400 	mov.w	r4, #0
 800bb08:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pPID->a0 				= 		pPID-> _Kp+pPID-> _Kd/V2MUV/pPID->_Ts+pPID->_Ki*V2MV*pPID->_Ts;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	ed93 6b02 	vldr	d6, [r3, #8]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	ed93 7b06 	vldr	d7, [r3, #24]
 800bb18:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800bbc0 <PID_vInit+0x1e0>
 800bb1c:	ee87 4b05 	vdiv.f64	d4, d7, d5
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	ed93 5b00 	vldr	d5, [r3]
 800bb26:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800bb2a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	ed93 7b04 	vldr	d7, [r3, #16]
 800bb34:	ed9f 5b24 	vldr	d5, [pc, #144]	; 800bbc8 <PID_vInit+0x1e8>
 800bb38:	ee27 5b05 	vmul.f64	d5, d7, d5
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	ed93 7b00 	vldr	d7, [r3]
 800bb42:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bb46:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
	pPID->a1 				= 		-(pPID-> _Kp+pPID-> _Kd/V2MUV/pPID->_Ts*2.0);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	ed93 6b02 	vldr	d6, [r3, #8]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	ed93 7b06 	vldr	d7, [r3, #24]
 800bb5c:	ed9f 5b18 	vldr	d5, [pc, #96]	; 800bbc0 <PID_vInit+0x1e0>
 800bb60:	ee87 4b05 	vdiv.f64	d4, d7, d5
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	ed93 5b00 	vldr	d5, [r3]
 800bb6a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800bb6e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bb72:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bb76:	eeb1 7b47 	vneg.f64	d7, d7
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
	pPID->a2 				=		pPID->_Kd/V2MUV/pPID->_Ts;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	ed93 7b06 	vldr	d7, [r3, #24]
 800bb86:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 800bbc0 <PID_vInit+0x1e0>
 800bb8a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	ed93 6b00 	vldr	d6, [r3]
 800bb94:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
	pPID->aw   				=		pPID->_Kaw*pPID->_Ts;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	ed93 7b00 	vldr	d7, [r3]
 800bbaa:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
};
 800bbb4:	bf00      	nop
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bc90      	pop	{r4, r7}
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	00000000 	.word	0x00000000
 800bbc4:	412e8480 	.word	0x412e8480
 800bbc8:	00000000 	.word	0x00000000
 800bbcc:	408f4000 	.word	0x408f4000
 800bbd0:	40080000 	.word	0x40080000
 800bbd4:	c0080000 	.word	0xc0080000
 800bbd8:	40240000 	.word	0x40240000
 800bbdc:	bff00000 	.word	0xbff00000
 800bbe0:	eb1c432d 	.word	0xeb1c432d
 800bbe4:	3f1a36e2 	.word	0x3f1a36e2
 800bbe8:	9999999a 	.word	0x9999999a
 800bbec:	3fc99999 	.word	0x3fc99999

0800bbf0 <PID_Calc>:
void PID_Calc(tPID* pPID,uint8_t PIDInputOption, double ADCvalue,double LockIn)
{
 800bbf0:	b590      	push	{r4, r7, lr}
 800bbf2:	b08d      	sub	sp, #52	; 0x34
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6178      	str	r0, [r7, #20]
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	ed87 0b02 	vstr	d0, [r7, #8]
 800bbfe:	ed87 1b00 	vstr	d1, [r7]
 800bc02:	74fb      	strb	r3, [r7, #19]
	double 			output;
	double 			outputsat;
	double          pd;
	pd          				= 	PIDInputSWitch(PIDInputOption, ADCvalue, LockIn);
 800bc04:	ed97 7b02 	vldr	d7, [r7, #8]
 800bc08:	eef7 6bc7 	vcvt.f32.f64	s13, d7
 800bc0c:	ed97 7b00 	vldr	d7, [r7]
 800bc10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bc14:	7cfb      	ldrb	r3, [r7, #19]
 800bc16:	eef0 0a67 	vmov.f32	s1, s15
 800bc1a:	eeb0 0a66 	vmov.f32	s0, s13
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7ff fec0 	bl	800b9a4 <PIDInputSWitch>
 800bc24:	eef0 7a40 	vmov.f32	s15, s0
 800bc28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bc2c:	ed87 7b06 	vstr	d7, [r7, #24]
	pPID->error = (pPID->ref - pd)*pPID->_kt;
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	ed93 6b2c 	vldr	d6, [r3, #176]	; 0xb0
 800bc36:	ed97 7b06 	vldr	d7, [r7, #24]
 800bc3a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 800bc44:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	if (pPID->En>=1)
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	dd3b      	ble.n	800bcd0 <PID_Calc+0xe0>
	{
		output = (pPID->preout+pPID->a0*pPID->error + pPID->a1*pPID->error_1lag + pPID->a2*pPID->error_2lag+pPID->aw*pPID->error_AnWi)/(1+pPID->omega*pPID->_Ts);
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	ed93 5b24 	vldr	d5, [r3, #144]	; 0x90
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800bc6a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bc6e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	ed93 5b26 	vldr	d5, [r3, #152]	; 0x98
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800bc7e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bc82:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	ed93 5b28 	vldr	d5, [r3, #160]	; 0xa0
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800bc92:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bc96:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	ed93 5b2a 	vldr	d5, [r3, #168]	; 0xa8
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800bca6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bcaa:	ee36 5b07 	vadd.f64	d5, d6, d7
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	ed93 7b00 	vldr	d7, [r3]
 800bcba:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bcbe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bcc2:	ee37 6b06 	vadd.f64	d6, d7, d6
 800bcc6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bcca:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
 800bcce:	e021      	b.n	800bd14 <PID_Calc+0x124>
	}
	else
	{
		output = 0;
 800bcd0:	f04f 0300 	mov.w	r3, #0
 800bcd4:	f04f 0400 	mov.w	r4, #0
 800bcd8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		pPID->error             =        0;
 800bcdc:	697a      	ldr	r2, [r7, #20]
 800bcde:	f04f 0300 	mov.w	r3, #0
 800bce2:	f04f 0400 	mov.w	r4, #0
 800bce6:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		pPID->error_1lag        =        0;
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	f04f 0300 	mov.w	r3, #0
 800bcf0:	f04f 0400 	mov.w	r4, #0
 800bcf4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		pPID->error_2lag        =        0;
 800bcf8:	697a      	ldr	r2, [r7, #20]
 800bcfa:	f04f 0300 	mov.w	r3, #0
 800bcfe:	f04f 0400 	mov.w	r4, #0
 800bd02:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		pPID->preout            =        0;
 800bd06:	697a      	ldr	r2, [r7, #20]
 800bd08:	f04f 0300 	mov.w	r3, #0
 800bd0c:	f04f 0400 	mov.w	r4, #0
 800bd10:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
//		}
//	if( output < pPID->_min*3 )
//			{
//			   output = 3*pPID->_min;
//			}
	pPID->preout = output;
 800bd14:	697a      	ldr	r2, [r7, #20]
 800bd16:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800bd1a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	    // Restrict to max/min
	if( output > pPID->_max )
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	ed93 6b08 	vldr	d6, [r3, #32]
 800bd24:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800bd28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd30:	d505      	bpl.n	800bd3e <PID_Calc+0x14e>
	{
	   outputsat = pPID->_max;
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800bd38:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800bd3c:	e013      	b.n	800bd66 <PID_Calc+0x176>
	}
	else if( output < pPID->_min )
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 800bd44:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800bd48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bd4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd50:	dd05      	ble.n	800bd5e <PID_Calc+0x16e>
	{
	   outputsat = pPID->_min;
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800bd58:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800bd5c:	e003      	b.n	800bd66 <PID_Calc+0x176>
	}
	else
	{
	   outputsat = output;
 800bd5e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800bd62:	e9c7 3408 	strd	r3, r4, [r7, #32]
	}
	pPID->error_AnWi              =   outputsat-output;
 800bd66:	ed97 6b08 	vldr	d6, [r7, #32]
 800bd6a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800bd6e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	    // Save error to previous error
	pPID->error_2lag = pPID->error_1lag;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pPID->error_1lag = pPID->error;
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 800bd8a:	697a      	ldr	r2, [r7, #20]
 800bd8c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
//   tty3 =Kd/pPID->_Ts;
	pPID->outvalue= outputsat;
 800bd90:	697a      	ldr	r2, [r7, #20]
 800bd92:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800bd96:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
}
 800bd9a:	bf00      	nop
 800bd9c:	3734      	adds	r7, #52	; 0x34
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd90      	pop	{r4, r7, pc}
	...

0800bda4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800bda8:	4b27      	ldr	r3, [pc, #156]	; (800be48 <MX_SPI1_Init+0xa4>)
 800bdaa:	4a28      	ldr	r2, [pc, #160]	; (800be4c <MX_SPI1_Init+0xa8>)
 800bdac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800bdae:	4b26      	ldr	r3, [pc, #152]	; (800be48 <MX_SPI1_Init+0xa4>)
 800bdb0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800bdb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800bdb6:	4b24      	ldr	r3, [pc, #144]	; (800be48 <MX_SPI1_Init+0xa4>)
 800bdb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bdbc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800bdbe:	4b22      	ldr	r3, [pc, #136]	; (800be48 <MX_SPI1_Init+0xa4>)
 800bdc0:	220f      	movs	r2, #15
 800bdc2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bdc4:	4b20      	ldr	r3, [pc, #128]	; (800be48 <MX_SPI1_Init+0xa4>)
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800bdca:	4b1f      	ldr	r3, [pc, #124]	; (800be48 <MX_SPI1_Init+0xa4>)
 800bdcc:	2200      	movs	r2, #0
 800bdce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800bdd0:	4b1d      	ldr	r3, [pc, #116]	; (800be48 <MX_SPI1_Init+0xa4>)
 800bdd2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800bdd6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800bdd8:	4b1b      	ldr	r3, [pc, #108]	; (800be48 <MX_SPI1_Init+0xa4>)
 800bdda:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800bdde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bde0:	4b19      	ldr	r3, [pc, #100]	; (800be48 <MX_SPI1_Init+0xa4>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800bde6:	4b18      	ldr	r3, [pc, #96]	; (800be48 <MX_SPI1_Init+0xa4>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bdec:	4b16      	ldr	r3, [pc, #88]	; (800be48 <MX_SPI1_Init+0xa4>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800bdf2:	4b15      	ldr	r3, [pc, #84]	; (800be48 <MX_SPI1_Init+0xa4>)
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800bdf8:	4b13      	ldr	r3, [pc, #76]	; (800be48 <MX_SPI1_Init+0xa4>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800bdfe:	4b12      	ldr	r3, [pc, #72]	; (800be48 <MX_SPI1_Init+0xa4>)
 800be00:	2200      	movs	r2, #0
 800be02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800be04:	4b10      	ldr	r3, [pc, #64]	; (800be48 <MX_SPI1_Init+0xa4>)
 800be06:	2200      	movs	r2, #0
 800be08:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800be0a:	4b0f      	ldr	r3, [pc, #60]	; (800be48 <MX_SPI1_Init+0xa4>)
 800be0c:	2200      	movs	r2, #0
 800be0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800be10:	4b0d      	ldr	r3, [pc, #52]	; (800be48 <MX_SPI1_Init+0xa4>)
 800be12:	2200      	movs	r2, #0
 800be14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800be16:	4b0c      	ldr	r3, [pc, #48]	; (800be48 <MX_SPI1_Init+0xa4>)
 800be18:	2200      	movs	r2, #0
 800be1a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800be1c:	4b0a      	ldr	r3, [pc, #40]	; (800be48 <MX_SPI1_Init+0xa4>)
 800be1e:	2200      	movs	r2, #0
 800be20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800be22:	4b09      	ldr	r3, [pc, #36]	; (800be48 <MX_SPI1_Init+0xa4>)
 800be24:	2200      	movs	r2, #0
 800be26:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800be28:	4b07      	ldr	r3, [pc, #28]	; (800be48 <MX_SPI1_Init+0xa4>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800be2e:	4b06      	ldr	r3, [pc, #24]	; (800be48 <MX_SPI1_Init+0xa4>)
 800be30:	2200      	movs	r2, #0
 800be32:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800be34:	4804      	ldr	r0, [pc, #16]	; (800be48 <MX_SPI1_Init+0xa4>)
 800be36:	f7fc fa9f 	bl	8008378 <HAL_SPI_Init>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d001      	beq.n	800be44 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800be40:	f7ff fdac 	bl	800b99c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800be44:	bf00      	nop
 800be46:	bd80      	pop	{r7, pc}
 800be48:	24000450 	.word	0x24000450
 800be4c:	40013000 	.word	0x40013000

0800be50 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800be54:	4b28      	ldr	r3, [pc, #160]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800be56:	4a29      	ldr	r2, [pc, #164]	; (800befc <MX_SPI4_Init+0xac>)
 800be58:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800be5a:	4b27      	ldr	r3, [pc, #156]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800be5c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800be60:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800be62:	4b25      	ldr	r3, [pc, #148]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800be64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800be68:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800be6a:	4b23      	ldr	r3, [pc, #140]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800be6c:	2203      	movs	r2, #3
 800be6e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800be70:	4b21      	ldr	r3, [pc, #132]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800be72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800be76:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800be78:	4b1f      	ldr	r3, [pc, #124]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800be7e:	4b1e      	ldr	r3, [pc, #120]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800be80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800be84:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800be86:	4b1c      	ldr	r3, [pc, #112]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800be88:	2200      	movs	r2, #0
 800be8a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800be8c:	4b1a      	ldr	r3, [pc, #104]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800be8e:	2200      	movs	r2, #0
 800be90:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800be92:	4b19      	ldr	r3, [pc, #100]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800be94:	2200      	movs	r2, #0
 800be96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be98:	4b17      	ldr	r3, [pc, #92]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800be9e:	4b16      	ldr	r3, [pc, #88]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800bea0:	2200      	movs	r2, #0
 800bea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800bea4:	4b14      	ldr	r3, [pc, #80]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800bea6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800beaa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800beac:	4b12      	ldr	r3, [pc, #72]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800beae:	2200      	movs	r2, #0
 800beb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800beb2:	4b11      	ldr	r3, [pc, #68]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800beb4:	2200      	movs	r2, #0
 800beb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800beb8:	4b0f      	ldr	r3, [pc, #60]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800beba:	2200      	movs	r2, #0
 800bebc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800bebe:	4b0e      	ldr	r3, [pc, #56]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800bec4:	4b0c      	ldr	r3, [pc, #48]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800beca:	4b0b      	ldr	r3, [pc, #44]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800becc:	2200      	movs	r2, #0
 800bece:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800bed0:	4b09      	ldr	r3, [pc, #36]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800bed2:	2200      	movs	r2, #0
 800bed4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800bed6:	4b08      	ldr	r3, [pc, #32]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800bed8:	2200      	movs	r2, #0
 800beda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800bedc:	4b06      	ldr	r3, [pc, #24]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800bede:	2200      	movs	r2, #0
 800bee0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800bee2:	4805      	ldr	r0, [pc, #20]	; (800bef8 <MX_SPI4_Init+0xa8>)
 800bee4:	f7fc fa48 	bl	8008378 <HAL_SPI_Init>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d001      	beq.n	800bef2 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 800beee:	f7ff fd55 	bl	800b99c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800bef2:	bf00      	nop
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	240003c8 	.word	0x240003c8
 800befc:	40013400 	.word	0x40013400

0800bf00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b0ba      	sub	sp, #232	; 0xe8
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	605a      	str	r2, [r3, #4]
 800bf12:	609a      	str	r2, [r3, #8]
 800bf14:	60da      	str	r2, [r3, #12]
 800bf16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bf18:	f107 0318 	add.w	r3, r7, #24
 800bf1c:	22bc      	movs	r2, #188	; 0xbc
 800bf1e:	2100      	movs	r1, #0
 800bf20:	4618      	mov	r0, r3
 800bf22:	f000 fbd1 	bl	800c6c8 <memset>
  if(spiHandle->Instance==SPI1)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a41      	ldr	r2, [pc, #260]	; (800c030 <HAL_SPI_MspInit+0x130>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d133      	bne.n	800bf98 <HAL_SPI_MspInit+0x98>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800bf30:	4a40      	ldr	r2, [pc, #256]	; (800c034 <HAL_SPI_MspInit+0x134>)
 800bf32:	4b40      	ldr	r3, [pc, #256]	; (800c034 <HAL_SPI_MspInit+0x134>)
 800bf34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bf3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800bf40:	4b3c      	ldr	r3, [pc, #240]	; (800c034 <HAL_SPI_MspInit+0x134>)
 800bf42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf4a:	617b      	str	r3, [r7, #20]
 800bf4c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf4e:	4a39      	ldr	r2, [pc, #228]	; (800c034 <HAL_SPI_MspInit+0x134>)
 800bf50:	4b38      	ldr	r3, [pc, #224]	; (800c034 <HAL_SPI_MspInit+0x134>)
 800bf52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf56:	f043 0302 	orr.w	r3, r3, #2
 800bf5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bf5e:	4b35      	ldr	r3, [pc, #212]	; (800c034 <HAL_SPI_MspInit+0x134>)
 800bf60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf64:	f003 0302 	and.w	r3, r3, #2
 800bf68:	613b      	str	r3, [r7, #16]
 800bf6a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800bf6c:	2328      	movs	r3, #40	; 0x28
 800bf6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf72:	2302      	movs	r3, #2
 800bf74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800bf84:	2305      	movs	r3, #5
 800bf86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800bf8e:	4619      	mov	r1, r3
 800bf90:	4829      	ldr	r0, [pc, #164]	; (800c038 <HAL_SPI_MspInit+0x138>)
 800bf92:	f7f8 ff6d 	bl	8004e70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800bf96:	e047      	b.n	800c028 <HAL_SPI_MspInit+0x128>
  else if(spiHandle->Instance==SPI4)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a27      	ldr	r2, [pc, #156]	; (800c03c <HAL_SPI_MspInit+0x13c>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d142      	bne.n	800c028 <HAL_SPI_MspInit+0x128>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800bfa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bfa6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bfac:	f107 0318 	add.w	r3, r7, #24
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7fa f90f 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d001      	beq.n	800bfc0 <HAL_SPI_MspInit+0xc0>
      Error_Handler();
 800bfbc:	f7ff fcee 	bl	800b99c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800bfc0:	4a1c      	ldr	r2, [pc, #112]	; (800c034 <HAL_SPI_MspInit+0x134>)
 800bfc2:	4b1c      	ldr	r3, [pc, #112]	; (800c034 <HAL_SPI_MspInit+0x134>)
 800bfc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bfc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bfcc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800bfd0:	4b18      	ldr	r3, [pc, #96]	; (800c034 <HAL_SPI_MspInit+0x134>)
 800bfd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bfd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bfda:	60fb      	str	r3, [r7, #12]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800bfde:	4a15      	ldr	r2, [pc, #84]	; (800c034 <HAL_SPI_MspInit+0x134>)
 800bfe0:	4b14      	ldr	r3, [pc, #80]	; (800c034 <HAL_SPI_MspInit+0x134>)
 800bfe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfe6:	f043 0310 	orr.w	r3, r3, #16
 800bfea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bfee:	4b11      	ldr	r3, [pc, #68]	; (800c034 <HAL_SPI_MspInit+0x134>)
 800bff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bff4:	f003 0310 	and.w	r3, r3, #16
 800bff8:	60bb      	str	r3, [r7, #8]
 800bffa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800bffc:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800c000:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c004:	2302      	movs	r3, #2
 800c006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c00a:	2300      	movs	r3, #0
 800c00c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c010:	2300      	movs	r3, #0
 800c012:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800c016:	2305      	movs	r3, #5
 800c018:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c01c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800c020:	4619      	mov	r1, r3
 800c022:	4807      	ldr	r0, [pc, #28]	; (800c040 <HAL_SPI_MspInit+0x140>)
 800c024:	f7f8 ff24 	bl	8004e70 <HAL_GPIO_Init>
}
 800c028:	bf00      	nop
 800c02a:	37e8      	adds	r7, #232	; 0xe8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	40013000 	.word	0x40013000
 800c034:	58024400 	.word	0x58024400
 800c038:	58020400 	.word	0x58020400
 800c03c:	40013400 	.word	0x40013400
 800c040:	58021000 	.word	0x58021000

0800c044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c04a:	4a0a      	ldr	r2, [pc, #40]	; (800c074 <HAL_MspInit+0x30>)
 800c04c:	4b09      	ldr	r3, [pc, #36]	; (800c074 <HAL_MspInit+0x30>)
 800c04e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c052:	f043 0302 	orr.w	r3, r3, #2
 800c056:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c05a:	4b06      	ldr	r3, [pc, #24]	; (800c074 <HAL_MspInit+0x30>)
 800c05c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c060:	f003 0302 	and.w	r3, r3, #2
 800c064:	607b      	str	r3, [r7, #4]
 800c066:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c068:	bf00      	nop
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr
 800c074:	58024400 	.word	0x58024400

0800c078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c078:	b480      	push	{r7}
 800c07a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800c07c:	e7fe      	b.n	800c07c <NMI_Handler+0x4>

0800c07e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c07e:	b480      	push	{r7}
 800c080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c082:	e7fe      	b.n	800c082 <HardFault_Handler+0x4>

0800c084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c084:	b480      	push	{r7}
 800c086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c088:	e7fe      	b.n	800c088 <MemManage_Handler+0x4>

0800c08a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c08a:	b480      	push	{r7}
 800c08c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c08e:	e7fe      	b.n	800c08e <BusFault_Handler+0x4>

0800c090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c090:	b480      	push	{r7}
 800c092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c094:	e7fe      	b.n	800c094 <UsageFault_Handler+0x4>

0800c096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c096:	b480      	push	{r7}
 800c098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800c09a:	bf00      	nop
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c0a8:	bf00      	nop
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr

0800c0b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c0b2:	b480      	push	{r7}
 800c0b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c0b6:	bf00      	nop
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c0c4:	f7f4 fb02 	bl	80006cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c0c8:	bf00      	nop
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800c0d0:	4802      	ldr	r0, [pc, #8]	; (800c0dc <DMA1_Stream0_IRQHandler+0x10>)
 800c0d2:	f7f7 fbbb 	bl	800384c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800c0d6:	bf00      	nop
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	240002c4 	.word	0x240002c4

0800c0e0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800c0e4:	4802      	ldr	r0, [pc, #8]	; (800c0f0 <DMA1_Stream1_IRQHandler+0x10>)
 800c0e6:	f7f7 fbb1 	bl	800384c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800c0ea:	bf00      	nop
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	24000524 	.word	0x24000524

0800c0f4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800c0f8:	4802      	ldr	r0, [pc, #8]	; (800c104 <DMA1_Stream2_IRQHandler+0x10>)
 800c0fa:	f7f7 fba7 	bl	800384c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800c0fe:	bf00      	nop
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	2400062c 	.word	0x2400062c

0800c108 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800c10c:	4802      	ldr	r0, [pc, #8]	; (800c118 <TIM2_IRQHandler+0x10>)
 800c10e:	f7fc fb76 	bl	80087fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800c112:	bf00      	nop
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	240004d8 	.word	0x240004d8

0800c11c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800c120:	4802      	ldr	r0, [pc, #8]	; (800c12c <USART3_IRQHandler+0x10>)
 800c122:	f7fd fb8f 	bl	8009844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800c126:	bf00      	nop
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	2400059c 	.word	0x2400059c

0800c130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800c130:	b480      	push	{r7}
 800c132:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800c134:	4a39      	ldr	r2, [pc, #228]	; (800c21c <SystemInit+0xec>)
 800c136:	4b39      	ldr	r3, [pc, #228]	; (800c21c <SystemInit+0xec>)
 800c138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c13c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800c144:	4b36      	ldr	r3, [pc, #216]	; (800c220 <SystemInit+0xf0>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f003 030f 	and.w	r3, r3, #15
 800c14c:	2b06      	cmp	r3, #6
 800c14e:	d807      	bhi.n	800c160 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800c150:	4a33      	ldr	r2, [pc, #204]	; (800c220 <SystemInit+0xf0>)
 800c152:	4b33      	ldr	r3, [pc, #204]	; (800c220 <SystemInit+0xf0>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f023 030f 	bic.w	r3, r3, #15
 800c15a:	f043 0307 	orr.w	r3, r3, #7
 800c15e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800c160:	4a30      	ldr	r2, [pc, #192]	; (800c224 <SystemInit+0xf4>)
 800c162:	4b30      	ldr	r3, [pc, #192]	; (800c224 <SystemInit+0xf4>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f043 0301 	orr.w	r3, r3, #1
 800c16a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c16c:	4b2d      	ldr	r3, [pc, #180]	; (800c224 <SystemInit+0xf4>)
 800c16e:	2200      	movs	r2, #0
 800c170:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800c172:	492c      	ldr	r1, [pc, #176]	; (800c224 <SystemInit+0xf4>)
 800c174:	4b2b      	ldr	r3, [pc, #172]	; (800c224 <SystemInit+0xf4>)
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	4b2b      	ldr	r3, [pc, #172]	; (800c228 <SystemInit+0xf8>)
 800c17a:	4013      	ands	r3, r2
 800c17c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800c17e:	4b28      	ldr	r3, [pc, #160]	; (800c220 <SystemInit+0xf0>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f003 030f 	and.w	r3, r3, #15
 800c186:	2b07      	cmp	r3, #7
 800c188:	d907      	bls.n	800c19a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800c18a:	4a25      	ldr	r2, [pc, #148]	; (800c220 <SystemInit+0xf0>)
 800c18c:	4b24      	ldr	r3, [pc, #144]	; (800c220 <SystemInit+0xf0>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f023 030f 	bic.w	r3, r3, #15
 800c194:	f043 0307 	orr.w	r3, r3, #7
 800c198:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800c19a:	4b22      	ldr	r3, [pc, #136]	; (800c224 <SystemInit+0xf4>)
 800c19c:	2200      	movs	r2, #0
 800c19e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800c1a0:	4b20      	ldr	r3, [pc, #128]	; (800c224 <SystemInit+0xf4>)
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800c1a6:	4b1f      	ldr	r3, [pc, #124]	; (800c224 <SystemInit+0xf4>)
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800c1ac:	4b1d      	ldr	r3, [pc, #116]	; (800c224 <SystemInit+0xf4>)
 800c1ae:	4a1f      	ldr	r2, [pc, #124]	; (800c22c <SystemInit+0xfc>)
 800c1b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800c1b2:	4b1c      	ldr	r3, [pc, #112]	; (800c224 <SystemInit+0xf4>)
 800c1b4:	4a1e      	ldr	r2, [pc, #120]	; (800c230 <SystemInit+0x100>)
 800c1b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800c1b8:	4b1a      	ldr	r3, [pc, #104]	; (800c224 <SystemInit+0xf4>)
 800c1ba:	4a1e      	ldr	r2, [pc, #120]	; (800c234 <SystemInit+0x104>)
 800c1bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800c1be:	4b19      	ldr	r3, [pc, #100]	; (800c224 <SystemInit+0xf4>)
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800c1c4:	4b17      	ldr	r3, [pc, #92]	; (800c224 <SystemInit+0xf4>)
 800c1c6:	4a1b      	ldr	r2, [pc, #108]	; (800c234 <SystemInit+0x104>)
 800c1c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800c1ca:	4b16      	ldr	r3, [pc, #88]	; (800c224 <SystemInit+0xf4>)
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800c1d0:	4b14      	ldr	r3, [pc, #80]	; (800c224 <SystemInit+0xf4>)
 800c1d2:	4a18      	ldr	r2, [pc, #96]	; (800c234 <SystemInit+0x104>)
 800c1d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800c1d6:	4b13      	ldr	r3, [pc, #76]	; (800c224 <SystemInit+0xf4>)
 800c1d8:	2200      	movs	r2, #0
 800c1da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800c1dc:	4a11      	ldr	r2, [pc, #68]	; (800c224 <SystemInit+0xf4>)
 800c1de:	4b11      	ldr	r3, [pc, #68]	; (800c224 <SystemInit+0xf4>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c1e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800c1e8:	4b0e      	ldr	r3, [pc, #56]	; (800c224 <SystemInit+0xf4>)
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800c1ee:	4b12      	ldr	r3, [pc, #72]	; (800c238 <SystemInit+0x108>)
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	4b12      	ldr	r3, [pc, #72]	; (800c23c <SystemInit+0x10c>)
 800c1f4:	4013      	ands	r3, r2
 800c1f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1fa:	d202      	bcs.n	800c202 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800c1fc:	4b10      	ldr	r3, [pc, #64]	; (800c240 <SystemInit+0x110>)
 800c1fe:	2201      	movs	r2, #1
 800c200:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800c202:	4b10      	ldr	r3, [pc, #64]	; (800c244 <SystemInit+0x114>)
 800c204:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800c208:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c20a:	4b04      	ldr	r3, [pc, #16]	; (800c21c <SystemInit+0xec>)
 800c20c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c210:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800c212:	bf00      	nop
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	e000ed00 	.word	0xe000ed00
 800c220:	52002000 	.word	0x52002000
 800c224:	58024400 	.word	0x58024400
 800c228:	eaf6ed7f 	.word	0xeaf6ed7f
 800c22c:	02020200 	.word	0x02020200
 800c230:	01ff0000 	.word	0x01ff0000
 800c234:	01010280 	.word	0x01010280
 800c238:	5c001000 	.word	0x5c001000
 800c23c:	ffff0000 	.word	0xffff0000
 800c240:	51008108 	.word	0x51008108
 800c244:	52004000 	.word	0x52004000

0800c248 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b08e      	sub	sp, #56	; 0x38
 800c24c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c24e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c252:	2200      	movs	r2, #0
 800c254:	601a      	str	r2, [r3, #0]
 800c256:	605a      	str	r2, [r3, #4]
 800c258:	609a      	str	r2, [r3, #8]
 800c25a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c25c:	f107 031c 	add.w	r3, r7, #28
 800c260:	2200      	movs	r2, #0
 800c262:	601a      	str	r2, [r3, #0]
 800c264:	605a      	str	r2, [r3, #4]
 800c266:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c268:	463b      	mov	r3, r7
 800c26a:	2200      	movs	r2, #0
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	605a      	str	r2, [r3, #4]
 800c270:	609a      	str	r2, [r3, #8]
 800c272:	60da      	str	r2, [r3, #12]
 800c274:	611a      	str	r2, [r3, #16]
 800c276:	615a      	str	r2, [r3, #20]
 800c278:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800c27a:	4b2d      	ldr	r3, [pc, #180]	; (800c330 <MX_TIM2_Init+0xe8>)
 800c27c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c280:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800c282:	4b2b      	ldr	r3, [pc, #172]	; (800c330 <MX_TIM2_Init+0xe8>)
 800c284:	2200      	movs	r2, #0
 800c286:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c288:	4b29      	ldr	r3, [pc, #164]	; (800c330 <MX_TIM2_Init+0xe8>)
 800c28a:	2200      	movs	r2, #0
 800c28c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800c28e:	4b28      	ldr	r3, [pc, #160]	; (800c330 <MX_TIM2_Init+0xe8>)
 800c290:	f04f 32ff 	mov.w	r2, #4294967295
 800c294:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c296:	4b26      	ldr	r3, [pc, #152]	; (800c330 <MX_TIM2_Init+0xe8>)
 800c298:	2200      	movs	r2, #0
 800c29a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c29c:	4b24      	ldr	r3, [pc, #144]	; (800c330 <MX_TIM2_Init+0xe8>)
 800c29e:	2200      	movs	r2, #0
 800c2a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c2a2:	4823      	ldr	r0, [pc, #140]	; (800c330 <MX_TIM2_Init+0xe8>)
 800c2a4:	f7fc f983 	bl	80085ae <HAL_TIM_Base_Init>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d001      	beq.n	800c2b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800c2ae:	f7ff fb75 	bl	800b99c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c2b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c2b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c2bc:	4619      	mov	r1, r3
 800c2be:	481c      	ldr	r0, [pc, #112]	; (800c330 <MX_TIM2_Init+0xe8>)
 800c2c0:	f7fc fccc 	bl	8008c5c <HAL_TIM_ConfigClockSource>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d001      	beq.n	800c2ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800c2ca:	f7ff fb67 	bl	800b99c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800c2ce:	4818      	ldr	r0, [pc, #96]	; (800c330 <MX_TIM2_Init+0xe8>)
 800c2d0:	f7fc fa34 	bl	800873c <HAL_TIM_PWM_Init>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800c2da:	f7ff fb5f 	bl	800b99c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c2de:	2320      	movs	r3, #32
 800c2e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c2e6:	f107 031c 	add.w	r3, r7, #28
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	4810      	ldr	r0, [pc, #64]	; (800c330 <MX_TIM2_Init+0xe8>)
 800c2ee:	f7fd f9b3 	bl	8009658 <HAL_TIMEx_MasterConfigSynchronization>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d001      	beq.n	800c2fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800c2f8:	f7ff fb50 	bl	800b99c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c2fc:	2360      	movs	r3, #96	; 0x60
 800c2fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2;
 800c300:	2302      	movs	r3, #2
 800c302:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c304:	2300      	movs	r3, #0
 800c306:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c308:	2300      	movs	r3, #0
 800c30a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c30c:	463b      	mov	r3, r7
 800c30e:	2200      	movs	r2, #0
 800c310:	4619      	mov	r1, r3
 800c312:	4807      	ldr	r0, [pc, #28]	; (800c330 <MX_TIM2_Init+0xe8>)
 800c314:	f7fc fb92 	bl	8008a3c <HAL_TIM_PWM_ConfigChannel>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d001      	beq.n	800c322 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800c31e:	f7ff fb3d 	bl	800b99c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800c322:	4803      	ldr	r0, [pc, #12]	; (800c330 <MX_TIM2_Init+0xe8>)
 800c324:	f000 f82c 	bl	800c380 <HAL_TIM_MspPostInit>

}
 800c328:	bf00      	nop
 800c32a:	3738      	adds	r7, #56	; 0x38
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	240004d8 	.word	0x240004d8

0800c334 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c344:	d116      	bne.n	800c374 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c346:	4a0d      	ldr	r2, [pc, #52]	; (800c37c <HAL_TIM_Base_MspInit+0x48>)
 800c348:	4b0c      	ldr	r3, [pc, #48]	; (800c37c <HAL_TIM_Base_MspInit+0x48>)
 800c34a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c34e:	f043 0301 	orr.w	r3, r3, #1
 800c352:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c356:	4b09      	ldr	r3, [pc, #36]	; (800c37c <HAL_TIM_Base_MspInit+0x48>)
 800c358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c35c:	f003 0301 	and.w	r3, r3, #1
 800c360:	60fb      	str	r3, [r7, #12]
 800c362:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800c364:	2200      	movs	r2, #0
 800c366:	2101      	movs	r1, #1
 800c368:	201c      	movs	r0, #28
 800c36a:	f7f5 fdc0 	bl	8001eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800c36e:	201c      	movs	r0, #28
 800c370:	f7f5 fdd7 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800c374:	bf00      	nop
 800c376:	3710      	adds	r7, #16
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	58024400 	.word	0x58024400

0800c380 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b088      	sub	sp, #32
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c388:	f107 030c 	add.w	r3, r7, #12
 800c38c:	2200      	movs	r2, #0
 800c38e:	601a      	str	r2, [r3, #0]
 800c390:	605a      	str	r2, [r3, #4]
 800c392:	609a      	str	r2, [r3, #8]
 800c394:	60da      	str	r2, [r3, #12]
 800c396:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3a0:	d11e      	bne.n	800c3e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3a2:	4a11      	ldr	r2, [pc, #68]	; (800c3e8 <HAL_TIM_MspPostInit+0x68>)
 800c3a4:	4b10      	ldr	r3, [pc, #64]	; (800c3e8 <HAL_TIM_MspPostInit+0x68>)
 800c3a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c3aa:	f043 0301 	orr.w	r3, r3, #1
 800c3ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c3b2:	4b0d      	ldr	r3, [pc, #52]	; (800c3e8 <HAL_TIM_MspPostInit+0x68>)
 800c3b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c3b8:	f003 0301 	and.w	r3, r3, #1
 800c3bc:	60bb      	str	r3, [r7, #8]
 800c3be:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3c4:	2302      	movs	r3, #2
 800c3c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3d4:	f107 030c 	add.w	r3, r7, #12
 800c3d8:	4619      	mov	r1, r3
 800c3da:	4804      	ldr	r0, [pc, #16]	; (800c3ec <HAL_TIM_MspPostInit+0x6c>)
 800c3dc:	f7f8 fd48 	bl	8004e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800c3e0:	bf00      	nop
 800c3e2:	3720      	adds	r7, #32
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	58024400 	.word	0x58024400
 800c3ec:	58020000 	.word	0x58020000

0800c3f0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800c3f4:	4b22      	ldr	r3, [pc, #136]	; (800c480 <MX_USART3_UART_Init+0x90>)
 800c3f6:	4a23      	ldr	r2, [pc, #140]	; (800c484 <MX_USART3_UART_Init+0x94>)
 800c3f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800c3fa:	4b21      	ldr	r3, [pc, #132]	; (800c480 <MX_USART3_UART_Init+0x90>)
 800c3fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800c400:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c402:	4b1f      	ldr	r3, [pc, #124]	; (800c480 <MX_USART3_UART_Init+0x90>)
 800c404:	2200      	movs	r2, #0
 800c406:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c408:	4b1d      	ldr	r3, [pc, #116]	; (800c480 <MX_USART3_UART_Init+0x90>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c40e:	4b1c      	ldr	r3, [pc, #112]	; (800c480 <MX_USART3_UART_Init+0x90>)
 800c410:	2200      	movs	r2, #0
 800c412:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c414:	4b1a      	ldr	r3, [pc, #104]	; (800c480 <MX_USART3_UART_Init+0x90>)
 800c416:	220c      	movs	r2, #12
 800c418:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c41a:	4b19      	ldr	r3, [pc, #100]	; (800c480 <MX_USART3_UART_Init+0x90>)
 800c41c:	2200      	movs	r2, #0
 800c41e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c420:	4b17      	ldr	r3, [pc, #92]	; (800c480 <MX_USART3_UART_Init+0x90>)
 800c422:	2200      	movs	r2, #0
 800c424:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c426:	4b16      	ldr	r3, [pc, #88]	; (800c480 <MX_USART3_UART_Init+0x90>)
 800c428:	2200      	movs	r2, #0
 800c42a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800c42c:	4b14      	ldr	r3, [pc, #80]	; (800c480 <MX_USART3_UART_Init+0x90>)
 800c42e:	2200      	movs	r2, #0
 800c430:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c432:	4b13      	ldr	r3, [pc, #76]	; (800c480 <MX_USART3_UART_Init+0x90>)
 800c434:	2200      	movs	r2, #0
 800c436:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c438:	4811      	ldr	r0, [pc, #68]	; (800c480 <MX_USART3_UART_Init+0x90>)
 800c43a:	f7fd f9b3 	bl	80097a4 <HAL_UART_Init>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d001      	beq.n	800c448 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800c444:	f7ff faaa 	bl	800b99c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800c448:	2100      	movs	r1, #0
 800c44a:	480d      	ldr	r0, [pc, #52]	; (800c480 <MX_USART3_UART_Init+0x90>)
 800c44c:	f7fe fc9d 	bl	800ad8a <HAL_UARTEx_SetTxFifoThreshold>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d001      	beq.n	800c45a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800c456:	f7ff faa1 	bl	800b99c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800c45a:	2100      	movs	r1, #0
 800c45c:	4808      	ldr	r0, [pc, #32]	; (800c480 <MX_USART3_UART_Init+0x90>)
 800c45e:	f7fe fcd2 	bl	800ae06 <HAL_UARTEx_SetRxFifoThreshold>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d001      	beq.n	800c46c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800c468:	f7ff fa98 	bl	800b99c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800c46c:	4804      	ldr	r0, [pc, #16]	; (800c480 <MX_USART3_UART_Init+0x90>)
 800c46e:	f7fe fc53 	bl	800ad18 <HAL_UARTEx_DisableFifoMode>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d001      	beq.n	800c47c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800c478:	f7ff fa90 	bl	800b99c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800c47c:	bf00      	nop
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	2400059c 	.word	0x2400059c
 800c484:	40004800 	.word	0x40004800

0800c488 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b0b8      	sub	sp, #224	; 0xe0
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c490:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c494:	2200      	movs	r2, #0
 800c496:	601a      	str	r2, [r3, #0]
 800c498:	605a      	str	r2, [r3, #4]
 800c49a:	609a      	str	r2, [r3, #8]
 800c49c:	60da      	str	r2, [r3, #12]
 800c49e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c4a0:	f107 0310 	add.w	r3, r7, #16
 800c4a4:	22bc      	movs	r2, #188	; 0xbc
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f000 f90d 	bl	800c6c8 <memset>
  if(uartHandle->Instance==USART3)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a57      	ldr	r2, [pc, #348]	; (800c610 <HAL_UART_MspInit+0x188>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	f040 80a6 	bne.w	800c606 <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800c4ba:	2302      	movs	r3, #2
 800c4bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c4c4:	f107 0310 	add.w	r3, r7, #16
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7f9 fe83 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d001      	beq.n	800c4d8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800c4d4:	f7ff fa62 	bl	800b99c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800c4d8:	4a4e      	ldr	r2, [pc, #312]	; (800c614 <HAL_UART_MspInit+0x18c>)
 800c4da:	4b4e      	ldr	r3, [pc, #312]	; (800c614 <HAL_UART_MspInit+0x18c>)
 800c4dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c4e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c4e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800c4e8:	4b4a      	ldr	r3, [pc, #296]	; (800c614 <HAL_UART_MspInit+0x18c>)
 800c4ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c4ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c4f2:	60fb      	str	r3, [r7, #12]
 800c4f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c4f6:	4a47      	ldr	r2, [pc, #284]	; (800c614 <HAL_UART_MspInit+0x18c>)
 800c4f8:	4b46      	ldr	r3, [pc, #280]	; (800c614 <HAL_UART_MspInit+0x18c>)
 800c4fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c4fe:	f043 0308 	orr.w	r3, r3, #8
 800c502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c506:	4b43      	ldr	r3, [pc, #268]	; (800c614 <HAL_UART_MspInit+0x18c>)
 800c508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c50c:	f003 0308 	and.w	r3, r3, #8
 800c510:	60bb      	str	r3, [r7, #8]
 800c512:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800c514:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c518:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c51c:	2302      	movs	r3, #2
 800c51e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c522:	2300      	movs	r3, #0
 800c524:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c528:	2300      	movs	r3, #0
 800c52a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800c52e:	2307      	movs	r3, #7
 800c530:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c534:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c538:	4619      	mov	r1, r3
 800c53a:	4837      	ldr	r0, [pc, #220]	; (800c618 <HAL_UART_MspInit+0x190>)
 800c53c:	f7f8 fc98 	bl	8004e70 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800c540:	4b36      	ldr	r3, [pc, #216]	; (800c61c <HAL_UART_MspInit+0x194>)
 800c542:	4a37      	ldr	r2, [pc, #220]	; (800c620 <HAL_UART_MspInit+0x198>)
 800c544:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800c546:	4b35      	ldr	r3, [pc, #212]	; (800c61c <HAL_UART_MspInit+0x194>)
 800c548:	222d      	movs	r2, #45	; 0x2d
 800c54a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c54c:	4b33      	ldr	r3, [pc, #204]	; (800c61c <HAL_UART_MspInit+0x194>)
 800c54e:	2200      	movs	r2, #0
 800c550:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c552:	4b32      	ldr	r3, [pc, #200]	; (800c61c <HAL_UART_MspInit+0x194>)
 800c554:	2200      	movs	r2, #0
 800c556:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c558:	4b30      	ldr	r3, [pc, #192]	; (800c61c <HAL_UART_MspInit+0x194>)
 800c55a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c55e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c560:	4b2e      	ldr	r3, [pc, #184]	; (800c61c <HAL_UART_MspInit+0x194>)
 800c562:	2200      	movs	r2, #0
 800c564:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c566:	4b2d      	ldr	r3, [pc, #180]	; (800c61c <HAL_UART_MspInit+0x194>)
 800c568:	2200      	movs	r2, #0
 800c56a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800c56c:	4b2b      	ldr	r3, [pc, #172]	; (800c61c <HAL_UART_MspInit+0x194>)
 800c56e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c572:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c574:	4b29      	ldr	r3, [pc, #164]	; (800c61c <HAL_UART_MspInit+0x194>)
 800c576:	2200      	movs	r2, #0
 800c578:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c57a:	4b28      	ldr	r3, [pc, #160]	; (800c61c <HAL_UART_MspInit+0x194>)
 800c57c:	2200      	movs	r2, #0
 800c57e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800c580:	4826      	ldr	r0, [pc, #152]	; (800c61c <HAL_UART_MspInit+0x194>)
 800c582:	f7f5 fe3b 	bl	80021fc <HAL_DMA_Init>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d001      	beq.n	800c590 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 800c58c:	f7ff fa06 	bl	800b99c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4a22      	ldr	r2, [pc, #136]	; (800c61c <HAL_UART_MspInit+0x194>)
 800c594:	67da      	str	r2, [r3, #124]	; 0x7c
 800c596:	4a21      	ldr	r2, [pc, #132]	; (800c61c <HAL_UART_MspInit+0x194>)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800c59c:	4b21      	ldr	r3, [pc, #132]	; (800c624 <HAL_UART_MspInit+0x19c>)
 800c59e:	4a22      	ldr	r2, [pc, #136]	; (800c628 <HAL_UART_MspInit+0x1a0>)
 800c5a0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800c5a2:	4b20      	ldr	r3, [pc, #128]	; (800c624 <HAL_UART_MspInit+0x19c>)
 800c5a4:	222e      	movs	r2, #46	; 0x2e
 800c5a6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c5a8:	4b1e      	ldr	r3, [pc, #120]	; (800c624 <HAL_UART_MspInit+0x19c>)
 800c5aa:	2240      	movs	r2, #64	; 0x40
 800c5ac:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c5ae:	4b1d      	ldr	r3, [pc, #116]	; (800c624 <HAL_UART_MspInit+0x19c>)
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c5b4:	4b1b      	ldr	r3, [pc, #108]	; (800c624 <HAL_UART_MspInit+0x19c>)
 800c5b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c5ba:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c5bc:	4b19      	ldr	r3, [pc, #100]	; (800c624 <HAL_UART_MspInit+0x19c>)
 800c5be:	2200      	movs	r2, #0
 800c5c0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c5c2:	4b18      	ldr	r3, [pc, #96]	; (800c624 <HAL_UART_MspInit+0x19c>)
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800c5c8:	4b16      	ldr	r3, [pc, #88]	; (800c624 <HAL_UART_MspInit+0x19c>)
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c5ce:	4b15      	ldr	r3, [pc, #84]	; (800c624 <HAL_UART_MspInit+0x19c>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c5d4:	4b13      	ldr	r3, [pc, #76]	; (800c624 <HAL_UART_MspInit+0x19c>)
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800c5da:	4812      	ldr	r0, [pc, #72]	; (800c624 <HAL_UART_MspInit+0x19c>)
 800c5dc:	f7f5 fe0e 	bl	80021fc <HAL_DMA_Init>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d001      	beq.n	800c5ea <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800c5e6:	f7ff f9d9 	bl	800b99c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4a0d      	ldr	r2, [pc, #52]	; (800c624 <HAL_UART_MspInit+0x19c>)
 800c5ee:	679a      	str	r2, [r3, #120]	; 0x78
 800c5f0:	4a0c      	ldr	r2, [pc, #48]	; (800c624 <HAL_UART_MspInit+0x19c>)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	2027      	movs	r0, #39	; 0x27
 800c5fc:	f7f5 fc77 	bl	8001eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800c600:	2027      	movs	r0, #39	; 0x27
 800c602:	f7f5 fc8e 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800c606:	bf00      	nop
 800c608:	37e0      	adds	r7, #224	; 0xe0
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	40004800 	.word	0x40004800
 800c614:	58024400 	.word	0x58024400
 800c618:	58020c00 	.word	0x58020c00
 800c61c:	24000524 	.word	0x24000524
 800c620:	40020028 	.word	0x40020028
 800c624:	2400062c 	.word	0x2400062c
 800c628:	40020040 	.word	0x40020040

0800c62c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800c62c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c664 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800c630:	f7ff fd7e 	bl	800c130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c634:	480c      	ldr	r0, [pc, #48]	; (800c668 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800c636:	490d      	ldr	r1, [pc, #52]	; (800c66c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800c638:	4a0d      	ldr	r2, [pc, #52]	; (800c670 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800c63a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c63c:	e002      	b.n	800c644 <LoopCopyDataInit>

0800c63e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c63e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c642:	3304      	adds	r3, #4

0800c644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c648:	d3f9      	bcc.n	800c63e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c64a:	4a0a      	ldr	r2, [pc, #40]	; (800c674 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800c64c:	4c0a      	ldr	r4, [pc, #40]	; (800c678 <LoopFillZerobss+0x22>)
  movs r3, #0
 800c64e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c650:	e001      	b.n	800c656 <LoopFillZerobss>

0800c652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c654:	3204      	adds	r2, #4

0800c656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c658:	d3fb      	bcc.n	800c652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800c65a:	f000 f811 	bl	800c680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c65e:	f7ff f883 	bl	800b768 <main>
  bx  lr
 800c662:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c664:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800c668:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800c66c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 800c670:	0800c740 	.word	0x0800c740
  ldr r2, =_sbss
 800c674:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 800c678:	240006a4 	.word	0x240006a4

0800c67c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c67c:	e7fe      	b.n	800c67c <ADC3_IRQHandler>
	...

0800c680 <__libc_init_array>:
 800c680:	b570      	push	{r4, r5, r6, lr}
 800c682:	4e0d      	ldr	r6, [pc, #52]	; (800c6b8 <__libc_init_array+0x38>)
 800c684:	4c0d      	ldr	r4, [pc, #52]	; (800c6bc <__libc_init_array+0x3c>)
 800c686:	1ba4      	subs	r4, r4, r6
 800c688:	10a4      	asrs	r4, r4, #2
 800c68a:	2500      	movs	r5, #0
 800c68c:	42a5      	cmp	r5, r4
 800c68e:	d109      	bne.n	800c6a4 <__libc_init_array+0x24>
 800c690:	4e0b      	ldr	r6, [pc, #44]	; (800c6c0 <__libc_init_array+0x40>)
 800c692:	4c0c      	ldr	r4, [pc, #48]	; (800c6c4 <__libc_init_array+0x44>)
 800c694:	f000 f820 	bl	800c6d8 <_init>
 800c698:	1ba4      	subs	r4, r4, r6
 800c69a:	10a4      	asrs	r4, r4, #2
 800c69c:	2500      	movs	r5, #0
 800c69e:	42a5      	cmp	r5, r4
 800c6a0:	d105      	bne.n	800c6ae <__libc_init_array+0x2e>
 800c6a2:	bd70      	pop	{r4, r5, r6, pc}
 800c6a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6a8:	4798      	blx	r3
 800c6aa:	3501      	adds	r5, #1
 800c6ac:	e7ee      	b.n	800c68c <__libc_init_array+0xc>
 800c6ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6b2:	4798      	blx	r3
 800c6b4:	3501      	adds	r5, #1
 800c6b6:	e7f2      	b.n	800c69e <__libc_init_array+0x1e>
 800c6b8:	0800c738 	.word	0x0800c738
 800c6bc:	0800c738 	.word	0x0800c738
 800c6c0:	0800c738 	.word	0x0800c738
 800c6c4:	0800c73c 	.word	0x0800c73c

0800c6c8 <memset>:
 800c6c8:	4402      	add	r2, r0
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d100      	bne.n	800c6d2 <memset+0xa>
 800c6d0:	4770      	bx	lr
 800c6d2:	f803 1b01 	strb.w	r1, [r3], #1
 800c6d6:	e7f9      	b.n	800c6cc <memset+0x4>

0800c6d8 <_init>:
 800c6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6da:	bf00      	nop
 800c6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6de:	bc08      	pop	{r3}
 800c6e0:	469e      	mov	lr, r3
 800c6e2:	4770      	bx	lr

0800c6e4 <_fini>:
 800c6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6e6:	bf00      	nop
 800c6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ea:	bc08      	pop	{r3}
 800c6ec:	469e      	mov	lr, r3
 800c6ee:	4770      	bx	lr
